
BootLoader_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc8  08003fc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd0  08003fd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08004048  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08004048  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be2d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002166  00000000  00000000  0002becd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002e038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020db7  00000000  00000000  0002f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b735  00000000  00000000  0004ff3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c73ef  00000000  00000000  0005b674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122a63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a8  00000000  00000000  00122ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080039a8 	.word	0x080039a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080039a8 	.word	0x080039a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <verify_address>:
/**
  * @brief  verifies the address
  * @retval bool
  */
bool verify_address(uint32_t goto_address)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if( (goto_address >= SRAM1_BASE)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005c6:	d305      	bcc.n	80005d4 <verify_address+0x1c>
			&& (goto_address <= SRAM1_END) )
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <verify_address+0x68>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d801      	bhi.n	80005d4 <verify_address+0x1c>
	{
		/* Address from 0x2000_0000 to 0x2001_BFFF whose size is 112KB*/
		return ADDR_VALID;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e01e      	b.n	8000612 <verify_address+0x5a>
	}
	else if( (goto_address >= SRAM2_BASE)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <verify_address+0x68>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d305      	bcc.n	80005e8 <verify_address+0x30>
				&& (goto_address <= SRAM2_END) )
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <verify_address+0x6c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d801      	bhi.n	80005e8 <verify_address+0x30>
	{
		/* Address from 0x2001_C000 to 0x2001_FFFF whose size is 16KB*/
		return ADDR_VALID;
 80005e4:	2300      	movs	r3, #0
 80005e6:	e014      	b.n	8000612 <verify_address+0x5a>
	}
	else if( (goto_address >= FLASH_BASE)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005ee:	d305      	bcc.n	80005fc <verify_address+0x44>
				&& (goto_address <= FLASH_END) )
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <verify_address+0x70>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d801      	bhi.n	80005fc <verify_address+0x44>
	{
		/* Address from 0x08000000UL to 0x0807FFFFUL whose size is 512KB*/
		return ADDR_VALID;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e00a      	b.n	8000612 <verify_address+0x5a>
	}
	else if( (goto_address >= BKPSRAM_BASE)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <verify_address+0x74>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d305      	bcc.n	8000610 <verify_address+0x58>
				&& (goto_address <= BKP_SRAM_END) )
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <verify_address+0x78>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d801      	bhi.n	8000610 <verify_address+0x58>
	{
		/* Address from 0x4248_0000 to 0x4248_4090 whose size is 4KB*/
		return ADDR_VALID;
 800060c:	2300      	movs	r3, #0
 800060e:	e000      	b.n	8000612 <verify_address+0x5a>
	}
	else
	{
		return ADDR_INVALID;
 8000610:	2301      	movs	r3, #1
	}
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	2001c000 	.word	0x2001c000
 8000624:	20020000 	.word	0x20020000
 8000628:	0807ffff 	.word	0x0807ffff
 800062c:	40024000 	.word	0x40024000
 8000630:	40025000 	.word	0x40025000

08000634 <process_bootloader_command>:
/**
  * @brief  Process the Bootloader commands and calls the respective function
  * @retval None
  */
void process_bootloader_command(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
   char     *CmdString;
   uint32_t commandLen = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
   uint32_t argc = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
   bool NextArg = ( bool )true;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
   bool isTaskCompleted = TASK_PENDING;
 8000646:	2301      	movs	r3, #1
 8000648:	70fb      	strb	r3, [r7, #3]
   uint16_t i;
   cmdTable_t const * CmdEntry;

   CmdString = &bootRxBuf[0];
 800064a:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <process_bootloader_command+0xd4>)
 800064c:	617b      	str	r3, [r7, #20]

   while ( *CmdString != 0 )
 800064e:	e01c      	b.n	800068a <process_bootloader_command+0x56>
   {
      if ( *CmdString == ' ' )
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b20      	cmp	r3, #32
 8000656:	d105      	bne.n	8000664 <process_bootloader_command+0x30>
      {
         *CmdString = 0;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
         NextArg = ( bool )true;
 800065e:	2301      	movs	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	e00f      	b.n	8000684 <process_bootloader_command+0x50>
      } /* end if() */
      else if ( NextArg )
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00c      	beq.n	8000684 <process_bootloader_command+0x50>
      {
         if ( argc < MAX_CMDLINE_ARGS )
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	2b04      	cmp	r3, #4
 800066e:	d811      	bhi.n	8000694 <process_bootloader_command+0x60>
         {
            argvar[argc] = CmdString;
 8000670:	4926      	ldr	r1, [pc, #152]	; (800070c <process_bootloader_command+0xd8>)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            argc++;
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	3301      	adds	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
            NextArg = ( bool )false;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
      } /* end if() */
 	 else
 	 {
 		 /* Do Nothing */
 	 }
      CmdString++;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
   while ( *CmdString != 0 )
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1de      	bne.n	8000650 <process_bootloader_command+0x1c>
 8000692:	e000      	b.n	8000696 <process_bootloader_command+0x62>
            break;
 8000694:	bf00      	nop
   } /* end while() */

   if ( argc > 0 )
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d031      	beq.n	8000700 <process_bootloader_command+0xcc>
   {
      CmdEntry = bootCmdTable;
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <process_bootloader_command+0xdc>)
 800069e:	60bb      	str	r3, [r7, #8]

      while ( CmdEntry->pfunCmd != 0 )
 80006a0:	e01e      	b.n	80006e0 <process_bootloader_command+0xac>
      {
         if ( !strcasecmp( argvar[0], CmdEntry->pCmdName ) )
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <process_bootloader_command+0xd8>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4610      	mov	r0, r2
 80006ae:	f002 fca3 	bl	8002ff8 <strcasecmp>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d110      	bne.n	80006da <process_bootloader_command+0xa6>
         {
            /* This is the line of code that is actually calling the handler function
               for the command that was received */
        	 isTaskCompleted = CmdEntry->pfunCmd( argc, argvar );
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	4913      	ldr	r1, [pc, #76]	; (800070c <process_bootloader_command+0xd8>)
 80006be:	6938      	ldr	r0, [r7, #16]
 80006c0:	4798      	blx	r3
 80006c2:	4603      	mov	r3, r0
 80006c4:	70fb      	strb	r3, [r7, #3]
        	 if (isTaskCompleted != TASK_COMPLETED)
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00e      	beq.n	80006ea <process_bootloader_command+0xb6>
        	 {
        		 print_msg( "%s comment Failed!\r\n", argvar[0] );
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <process_bootloader_command+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4810      	ldr	r0, [pc, #64]	; (8000714 <process_bootloader_command+0xe0>)
 80006d4:	f000 fabe 	bl	8000c54 <print_msg>
        	 }
        	 else
        	 {
        		 /* Do Nothing */
        	 }
            break;
 80006d8:	e007      	b.n	80006ea <process_bootloader_command+0xb6>
         } /* end if() */
    	 else
    	 {
    		 /* Do Nothing */
    	 }
         CmdEntry++;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	330c      	adds	r3, #12
 80006de:	60bb      	str	r3, [r7, #8]
      while ( CmdEntry->pfunCmd != 0 )
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1dc      	bne.n	80006a2 <process_bootloader_command+0x6e>
 80006e8:	e000      	b.n	80006ec <process_bootloader_command+0xb8>
            break;
 80006ea:	bf00      	nop
      } /* end while() */

      if ( CmdEntry->pCmdName == 0 )
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d105      	bne.n	8000700 <process_bootloader_command+0xcc>
      {
            /* We reached the end of the list and did not find a valid command */
    	  	print_msg( "%s is not a valid command!\r\n", argvar[0] );
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <process_bootloader_command+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <process_bootloader_command+0xe4>)
 80006fc:	f000 faaa 	bl	8000c54 <print_msg>
   } /* end if() */
	 else
	 {
		 /* Do Nothing */
	 }
} /* end process_bootloader_command() */
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000b0 	.word	0x200000b0
 800070c:	2000008c 	.word	0x2000008c
 8000710:	08003e1c 	.word	0x08003e1c
 8000714:	08003ad8 	.word	0x08003ad8
 8000718:	08003af0 	.word	0x08003af0

0800071c <get_boot_ver>:
/**
  * @brief  Prints the Bootloader version
  * @retval Bool
  */
bool get_boot_ver(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	print_msg( "[DBG_MSG]: BOOTLOADER_VERSION: %d\r\n",BOOTLOADER_VERSION );
 8000720:	2101      	movs	r1, #1
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <get_boot_ver+0x14>)
 8000724:	f000 fa96 	bl	8000c54 <print_msg>
	return TASK_COMPLETED;
 8000728:	2300      	movs	r3, #0
}/* end of get_boot_ver */
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08003b10 	.word	0x08003b10

08000734 <get_mcu_id>:
/**
  * @brief  Prints the MCU's Chip ID
  * @retval Bool
  */
bool get_mcu_id(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	uint16_t chipId;
	chipId = ( uint16_t )((DBGMCU->IDCODE) & 0xffff) ;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <get_mcu_id+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	80fb      	strh	r3, [r7, #6]
	print_msg( "[DBG_MSG]: Chip ID: 0x%x\r\n",chipId );
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <get_mcu_id+0x24>)
 8000746:	f000 fa85 	bl	8000c54 <print_msg>
	return TASK_COMPLETED;
 800074a:	2300      	movs	r3, #0
}/* end of get_mcu_id */
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	e0042000 	.word	0xe0042000
 8000758:	08003b34 	.word	0x08003b34

0800075c <get_flash_status>:
/**
  * @brief  Prints the MCU's Chip ID
  * @retval Bool
  */
bool get_flash_status(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef flashStatus;
	HAL_FLASHEx_OBGetConfig(&flashStatus);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f000 ffd5 	bl	8001714 <HAL_FLASHEx_OBGetConfig>
	print_msg( "[DBG_MSG]: Flash Protection Status: 0x%X\r\n",flashStatus.RDPLevel );
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <get_flash_status+0x24>)
 8000770:	f000 fa70 	bl	8000c54 <print_msg>
	return TASK_COMPLETED;
 8000774:	2300      	movs	r3, #0
}/* end of get_flash_status */
 8000776:	4618      	mov	r0, r3
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08003b50 	.word	0x08003b50

08000784 <jump_to_address>:
/**
  * @brief  jump_to_address
  * @retval Bool
  */
bool jump_to_address( uint32_t argc, char *argv[] )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]

	bool returnValue = TASK_PENDING;
 800078e:	2301      	movs	r3, #1
 8000790:	75fb      	strb	r3, [r7, #23]
	bool isAddrValid = ADDR_INVALID;
 8000792:	2301      	movs	r3, #1
 8000794:	75bb      	strb	r3, [r7, #22]
	if ( argc == 3 )
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d12a      	bne.n	80007f2 <jump_to_address+0x6e>
	{
		/* Argument count should be 2 */
 //		uint32_t gotoAddress = (uint32_t)atoi(argv[1]);
   		uint32_t gotoAddress = ( uint32_t )strtol( argv[1], NULL, 16 );
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	3304      	adds	r3, #4
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2210      	movs	r2, #16
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fcc6 	bl	8003138 <strtol>
 80007ac:	4603      	mov	r3, r0
 80007ae:	613b      	str	r3, [r7, #16]
   		isAddrValid = verify_address(gotoAddress);
 80007b0:	6938      	ldr	r0, [r7, #16]
 80007b2:	f7ff ff01 	bl	80005b8 <verify_address>
 80007b6:	4603      	mov	r3, r0
 80007b8:	75bb      	strb	r3, [r7, #22]
   		if(isAddrValid == ADDR_VALID)
 80007ba:	7dbb      	ldrb	r3, [r7, #22]
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d011      	beq.n	80007ea <jump_to_address+0x66>
   		{
			print_msg( "[DBG_MSG]: gotoAddress: 0x%X\r\n",gotoAddress );
 80007c6:	6939      	ldr	r1, [r7, #16]
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <jump_to_address+0x84>)
 80007ca:	f000 fa43 	bl	8000c54 <print_msg>
			gotoAddress |= 1;
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
			void (*jump_func)(void) = (void *)gotoAddress;
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	60fb      	str	r3, [r7, #12]
			print_msg( "[DBG_MSG]: Performing Jump\r\n" );
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <jump_to_address+0x88>)
 80007dc:	f000 fa3a 	bl	8000c54 <print_msg>
			// todo jump results in Hard Fault
			jump_func();
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4798      	blx	r3
			returnValue = TASK_COMPLETED;
 80007e4:	2300      	movs	r3, #0
 80007e6:	75fb      	strb	r3, [r7, #23]
 80007e8:	e008      	b.n	80007fc <jump_to_address+0x78>
		}
		else
		{
			print_msg( "[DBG_MSG]: goto-address is invalid\r\n" );
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <jump_to_address+0x8c>)
 80007ec:	f000 fa32 	bl	8000c54 <print_msg>
 80007f0:	e004      	b.n	80007fc <jump_to_address+0x78>
		}
	}
	else
	{
		print_msg( "[WRG_MSG]: Invalid Argu count. ex: 4jump <Jump to address>\r\n" );
 80007f2:	4808      	ldr	r0, [pc, #32]	; (8000814 <jump_to_address+0x90>)
 80007f4:	f000 fa2e 	bl	8000c54 <print_msg>
		returnValue = TASK_PENDING;
 80007f8:	2301      	movs	r3, #1
 80007fa:	75fb      	strb	r3, [r7, #23]
	}
	return returnValue;
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
}/* end of jump_to_address */
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	08003b7c 	.word	0x08003b7c
 800080c:	08003b9c 	.word	0x08003b9c
 8000810:	08003bbc 	.word	0x08003bbc
 8000814:	08003be4 	.word	0x08003be4

08000818 <erase_sector>:
/**
  * @brief  erase_sector
  * @retval Bool
  */
bool erase_sector( uint32_t argc, char *argv[] )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	; 0x38
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]

	bool returnValue = TASK_PENDING;
 8000822:	2301      	movs	r3, #1
 8000824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if ( argc == 3 )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d14e      	bne.n	80008cc <erase_sector+0xb4>
	{
		/* Argument count should be 2 */
//		uint32_t eraseSector = ( uint32_t )strtol( argv[1], NULL, 16 );
		uint32_t eraseSector = ( uint32_t )atoi(argv[1]);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	3304      	adds	r3, #4
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f002 fba9 	bl	8002f8c <atoi>
 800083a:	4603      	mov	r3, r0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t numSectorToErase = (uint32_t)atoi(argv[2]);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	3308      	adds	r3, #8
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fba1 	bl	8002f8c <atoi>
 800084a:	4603      	mov	r3, r0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
		FLASH_EraseInitTypeDef eraseHandler;
		HAL_StatusTypeDef doesFuncRanRight = HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(numSectorToErase >= 8 || eraseSector >= 8)
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	2b07      	cmp	r3, #7
 8000858:	d802      	bhi.n	8000860 <erase_sector+0x48>
 800085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085c:	2b07      	cmp	r3, #7
 800085e:	d903      	bls.n	8000868 <erase_sector+0x50>
		{
			/* Maximum Flash Sector is 7 */
			print_msg( "[WRG_MSG]: Argument is invalid\r\n" );
 8000860:	4820      	ldr	r0, [pc, #128]	; (80008e4 <erase_sector+0xcc>)
 8000862:	f000 f9f7 	bl	8000c54 <print_msg>
		{
 8000866:	e037      	b.n	80008d8 <erase_sector+0xc0>
		}
		else
		{
			uint32_t sectorError;
			uint32_t remainingSector = 8 - eraseSector;
 8000868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086a:	f1c3 0308 	rsb	r3, r3, #8
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
			/* Check for numSectorToErase */
			if(numSectorToErase >= remainingSector)
 8000870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	429a      	cmp	r2, r3
 8000876:	d301      	bcc.n	800087c <erase_sector+0x64>
			{
				numSectorToErase = remainingSector;
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			/* Erase type is sector erase */
			eraseHandler.TypeErase = FLASH_TYPEERASE_SECTORS;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
			/* Start of sector erase */
			eraseHandler.Sector = eraseSector;
 8000880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000882:	61bb      	str	r3, [r7, #24]
			/* Number of sectors to erase */
			eraseHandler.NbSectors = remainingSector;
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	61fb      	str	r3, [r7, #28]
			/* F446RE MCU has only one Flash Bank */
			eraseHandler.Banks = FLASH_BANK_1;
 8000888:	2301      	movs	r3, #1
 800088a:	617b      	str	r3, [r7, #20]

			/*Get access to touch the flash registers */
			HAL_FLASH_Unlock();
 800088c:	f000 fdfa 	bl	8001484 <HAL_FLASH_Unlock>
			eraseHandler.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
			doesFuncRanRight = (uint8_t) HAL_FLASHEx_Erase(&eraseHandler, &sectorError);
 8000894:	f107 020c 	add.w	r2, r7, #12
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4611      	mov	r1, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fec8 	bl	8001634 <HAL_FLASHEx_Erase>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			HAL_FLASH_Lock();
 80008aa:	f000 fe0d 	bl	80014c8 <HAL_FLASH_Lock>

			if ( doesFuncRanRight == HAL_OK )
 80008ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d106      	bne.n	80008c4 <erase_sector+0xac>
			{
				returnValue = TASK_COMPLETED;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				print_msg( "[DBG_MSG]: Erase Completed Successfully\r\n" );
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <erase_sector+0xd0>)
 80008be:	f000 f9c9 	bl	8000c54 <print_msg>
 80008c2:	e009      	b.n	80008d8 <erase_sector+0xc0>
			}
			else
			{
				print_msg( "[WRG_MSG]: HAL Function Failed\r\n" );
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <erase_sector+0xd4>)
 80008c6:	f000 f9c5 	bl	8000c54 <print_msg>
 80008ca:	e005      	b.n	80008d8 <erase_sector+0xc0>
			}
		}
	}
	else
	{
		print_msg( "[WRG_MSG]: Invalid Argu count. ex: 14erase <Erase Sector> <Num of Sector to Erase>\r\n" );
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <erase_sector+0xd8>)
 80008ce:	f000 f9c1 	bl	8000c54 <print_msg>
		returnValue = TASK_PENDING;
 80008d2:	2301      	movs	r3, #1
 80008d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	return returnValue;
 80008d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}/* end of erase_sector */
 80008dc:	4618      	mov	r0, r3
 80008de:	3738      	adds	r7, #56	; 0x38
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	08003c24 	.word	0x08003c24
 80008e8:	08003c48 	.word	0x08003c48
 80008ec:	08003c74 	.word	0x08003c74
 80008f0:	08003c98 	.word	0x08003c98

080008f4 <help_cmd>:
/**
  * @brief  Prints the Command List
  * @retval Bool
  */
bool help_cmd(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	cmdTable_t  const *CmdLineEntry;
	print_msg( "Boot Command List:\r\n" );
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <help_cmd+0x40>)
 80008fc:	f000 f9aa 	bl	8000c54 <print_msg>
   CmdLineEntry = bootCmdTable;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <help_cmd+0x44>)
 8000902:	607b      	str	r3, [r7, #4]
   while ( CmdLineEntry->pCmdName )
 8000904:	e00d      	b.n	8000922 <help_cmd+0x2e>
   {
      /* has partial command text been entered and no match? */
//      if ((1 == argc) ||
//          (2 == argc) && (NULL != strstr(CmdLineEntry->pCmdName, argv[1])))
//      {
    	  print_msg( "%20s: %s\r\n", CmdLineEntry->pCmdName, CmdLineEntry->pDesString );
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	461a      	mov	r2, r3
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <help_cmd+0x48>)
 8000912:	f000 f99f 	bl	8000c54 <print_msg>
         HAL_Delay(10);
 8000916:	200a      	movs	r0, #10
 8000918:	f000 fc62 	bl	80011e0 <HAL_Delay>
//      }
      CmdLineEntry++;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	330c      	adds	r3, #12
 8000920:	607b      	str	r3, [r7, #4]
   while ( CmdLineEntry->pCmdName )
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1ed      	bne.n	8000906 <help_cmd+0x12>
   } /* end while() */
   return TASK_COMPLETED;
 800092a:	2300      	movs	r3, #0
} /* end DBG_CommandLine_Help () */
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	08003cf0 	.word	0x08003cf0
 8000938:	08003e1c 	.word	0x08003e1c
 800093c:	08003d08 	.word	0x08003d08

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fbd9 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f837 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 f90b 	bl	8000b68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000952:	f000 f8b5 	bl	8000ac0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000956:	f000 f89f 	bl	8000a98 <MX_CRC_Init>
  MX_USART3_UART_Init();
 800095a:	f000 f8db 	bl	8000b14 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(VRL_COM_UART,(uint8_t *)"Hello from Bootloader!\r\n",24,HAL_MAX_DELAY);
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	2218      	movs	r2, #24
 8000964:	4910      	ldr	r1, [pc, #64]	; (80009a8 <main+0x68>)
 8000966:	4811      	ldr	r0, [pc, #68]	; (80009ac <main+0x6c>)
 8000968:	f001 ffa5 	bl	80028b6 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Get the User Button Status */
	  userButton = HAL_GPIO_ReadPin( USER_BUTTON_PORT, USER_BUTTON_PIN );
 800096c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000970:	480f      	ldr	r0, [pc, #60]	; (80009b0 <main+0x70>)
 8000972:	f001 f985 	bl	8001c80 <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	71fb      	strb	r3, [r7, #7]
	  if ( userButton == BUTTON_PRESSED )
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <main+0x5a>
	  {
		  print_msg( "[DBG_MSG]: Button Pressed\r\n" );
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <main+0x74>)
 8000990:	f000 f960 	bl	8000c54 <print_msg>
		  jump_to_app();
 8000994:	f000 f980 	bl	8000c98 <jump_to_app>
 8000998:	e7e8      	b.n	800096c <main+0x2c>
	  }
	  else
	  {
		  print_msg( "[DBG_MSG]: Button Not Pressed\r\n" );
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <main+0x78>)
 800099c:	f000 f95a 	bl	8000c54 <print_msg>
		  read_usr_cmd();
 80009a0:	f000 f9a6 	bl	8000cf0 <read_usr_cmd>
	  userButton = HAL_GPIO_ReadPin( USER_BUTTON_PORT, USER_BUTTON_PIN );
 80009a4:	e7e2      	b.n	800096c <main+0x2c>
 80009a6:	bf00      	nop
 80009a8:	08003d14 	.word	0x08003d14
 80009ac:	20000178 	.word	0x20000178
 80009b0:	40020800 	.word	0x40020800
 80009b4:	08003d30 	.word	0x08003d30
 80009b8:	08003d4c 	.word	0x08003d4c

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2234      	movs	r2, #52	; 0x34
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fb0c 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <SystemClock_Config+0xd4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a29      	ldr	r2, [pc, #164]	; (8000a90 <SystemClock_Config+0xd4>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <SystemClock_Config+0xd4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fc:	2300      	movs	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <SystemClock_Config+0xd8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <SystemClock_Config+0xd8>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <SystemClock_Config+0xd8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a30:	2310      	movs	r3, #16
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fc48 	bl	80022e0 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a56:	f000 f9df 	bl	8000e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 f966 	bl	8001d48 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a82:	f000 f9c9 	bl	8000e18 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_CRC_Init+0x20>)
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <MX_CRC_Init+0x24>)
 8000aa0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_CRC_Init+0x20>)
 8000aa4:	f000 fcd1 	bl	800144a <HAL_CRC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000aae:	f000 f9b3 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000200 	.word	0x20000200
 8000abc:	40023000 	.word	0x40023000

08000ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART2_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af8:	f001 fe90 	bl	800281c <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f989 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000178 	.word	0x20000178
 8000b10:	40004400 	.word	0x40004400

08000b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <MX_USART3_UART_Init+0x50>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_USART3_UART_Init+0x4c>)
 8000b4c:	f001 fe66 	bl	800281c <HAL_UART_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b56:	f000 f95f 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200001bc 	.word	0x200001bc
 8000b64:	40004800 	.word	0x40004800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a29      	ldr	r2, [pc, #164]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_GPIO_Init+0xe0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	4816      	ldr	r0, [pc, #88]	; (8000c4c <MX_GPIO_Init+0xe4>)
 8000bf4:	f001 f85c 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4810      	ldr	r0, [pc, #64]	; (8000c50 <MX_GPIO_Init+0xe8>)
 8000c10:	f000 fea2 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c14:	2320      	movs	r3, #32
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	; (8000c4c <MX_GPIO_Init+0xe4>)
 8000c2c:	f000 fe94 	bl	8001958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2028      	movs	r0, #40	; 0x28
 8000c36:	f000 fbd2 	bl	80013de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c3a:	2028      	movs	r0, #40	; 0x28
 8000c3c:	f000 fbeb 	bl	8001416 <HAL_NVIC_EnableIRQ>

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020800 	.word	0x40020800

08000c54 <print_msg>:
/**
  * @brief  This function is used to print string in Console over UART.
  * @retval None
  */
void print_msg( char *format,... )
{
 8000c54:	b40f      	push	{r0, r1, r2, r3}
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b09a      	sub	sp, #104	; 0x68
 8000c5a:	af00      	add	r7, sp, #0
#if ( BOOT_DEBUG_MSG == 1 )
	char data[100];
	va_list args;
	va_start(args, format);
 8000c5c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c60:	603b      	str	r3, [r7, #0]
	vsprintf(data, format, args);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 fa85 	bl	8003178 <vsiprintf>
	HAL_UART_Transmit( VRL_COM_UART, (uint8_t *)data, strlen(data), HAL_MAX_DELAY );
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff facd 	bl	8000210 <strlen>
 8000c76:	4603      	mov	r3, r0
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	1d39      	adds	r1, r7, #4
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <print_msg+0x40>)
 8000c82:	f001 fe18 	bl	80028b6 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000c86:	bf00      	nop
 8000c88:	3768      	adds	r7, #104	; 0x68
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c90:	b004      	add	sp, #16
 8000c92:	4770      	bx	lr
 8000c94:	20000178 	.word	0x20000178

08000c98 <jump_to_app>:
  * @brief  This function is used to jump the code to app(0X0800_8000 or Sector 2)
  * 		or FLASH_SECTOR2_BASE_ADDRESS
  * @retval None
  */
void jump_to_app(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
	 *		The next address in app(0x0800_8000+4) holds the value of the Reset Handler
	 * 	*/

	/* A function to hold the address of the reset handler */
	void (*app_reset_handler_addr)(void);
	print_msg("[DBG_MSG]: Started jump to application\r\n");
 8000c9e:	480f      	ldr	r0, [pc, #60]	; (8000cdc <jump_to_app+0x44>)
 8000ca0:	f7ff ffd8 	bl	8000c54 <print_msg>

	/* 1.Get the MSP by reading the very first address in app */
	uint32_t mspValue = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <jump_to_app+0x48>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
	print_msg("[DBG_INFO]: mspValue = %#x\r\n",mspValue);
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <jump_to_app+0x4c>)
 8000cae:	f7ff ffd1 	bl	8000c54 <print_msg>
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	f383 8808 	msr	MSP, r3
}
 8000cbc:	bf00      	nop

	/* Sets the New MSP_value */
	__set_MSP(mspValue);

	/* 2.Get the resetHandlerAddr address from next address and set the new value */
	uint32_t resetHandlerAddr = *( volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <jump_to_app+0x50>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60bb      	str	r3, [r7, #8]
	app_reset_handler_addr = (void *)resetHandlerAddr;
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	607b      	str	r3, [r7, #4]

	print_msg("[DBG_INFO]: app_reset_handler_addr = %#x\r\n",app_reset_handler_addr);
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <jump_to_app+0x54>)
 8000ccc:	f7ff ffc2 	bl	8000c54 <print_msg>

	/* 3. Jump to the reset handler of the address */
	app_reset_handler_addr();
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4798      	blx	r3

}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	08003d6c 	.word	0x08003d6c
 8000ce0:	08008000 	.word	0x08008000
 8000ce4:	08003d98 	.word	0x08003d98
 8000ce8:	08008004 	.word	0x08008004
 8000cec:	08003db8 	.word	0x08003db8

08000cf0 <read_usr_cmd>:
/**
  * @brief  This function is used read the commands from the user to process bootloader
  * @retval None
  */
void read_usr_cmd(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	uint8_t rxDataLen = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bootRxBuf, 0,  sizeof(bootRxBuf));
 8000cfa:	22c8      	movs	r2, #200	; 0xc8
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4838      	ldr	r0, [pc, #224]	; (8000de0 <read_usr_cmd+0xf0>)
 8000d00:	f002 f972 	bl	8002fe8 <memset>
		/* First byte is the length of the command, check data frame for each command */
		HAL_UART_Receive(VRL_COM_UART, bootRxBuf, 1, HAL_MAX_DELAY);
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4935      	ldr	r1, [pc, #212]	; (8000de0 <read_usr_cmd+0xf0>)
 8000d0c:	4835      	ldr	r0, [pc, #212]	; (8000de4 <read_usr_cmd+0xf4>)
 8000d0e:	f001 fe64 	bl	80029da <HAL_UART_Receive>
		HAL_UART_Transmit(VRL_COM_UART, bootRxBuf, 1, HAL_MAX_DELAY);
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	2201      	movs	r2, #1
 8000d18:	4931      	ldr	r1, [pc, #196]	; (8000de0 <read_usr_cmd+0xf0>)
 8000d1a:	4832      	ldr	r0, [pc, #200]	; (8000de4 <read_usr_cmd+0xf4>)
 8000d1c:	f001 fdcb 	bl	80028b6 <HAL_UART_Transmit>
		if (isdigit(bootRxBuf[0]))
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <read_usr_cmd+0xf0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	3b30      	subs	r3, #48	; 0x30
 8000d26:	2b09      	cmp	r3, #9
 8000d28:	d84e      	bhi.n	8000dc8 <read_usr_cmd+0xd8>
		{
			HAL_UART_Receive(VRL_COM_UART, &bootRxBuf[1], 1, 500);
 8000d2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d2e:	2201      	movs	r2, #1
 8000d30:	492d      	ldr	r1, [pc, #180]	; (8000de8 <read_usr_cmd+0xf8>)
 8000d32:	482c      	ldr	r0, [pc, #176]	; (8000de4 <read_usr_cmd+0xf4>)
 8000d34:	f001 fe51 	bl	80029da <HAL_UART_Receive>
			HAL_UART_Transmit(VRL_COM_UART, &bootRxBuf[1], 1, HAL_MAX_DELAY);
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	492a      	ldr	r1, [pc, #168]	; (8000de8 <read_usr_cmd+0xf8>)
 8000d40:	4828      	ldr	r0, [pc, #160]	; (8000de4 <read_usr_cmd+0xf4>)
 8000d42:	f001 fdb8 	bl	80028b6 <HAL_UART_Transmit>
			if (isdigit(bootRxBuf[1]))
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <read_usr_cmd+0xf0>)
 8000d48:	785b      	ldrb	r3, [r3, #1]
 8000d4a:	3b30      	subs	r3, #48	; 0x30
 8000d4c:	2b09      	cmp	r3, #9
 8000d4e:	d81d      	bhi.n	8000d8c <read_usr_cmd+0x9c>
			{
				/* Gets Length as 2 Digit */
				rxDataLen = (uint8_t)( (( bootRxBuf[0] - 48 )*10) + (bootRxBuf[1] - 48) ) ; // Converting Hex to decimal
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <read_usr_cmd+0xf0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <read_usr_cmd+0xf0>)
 8000d60:	785b      	ldrb	r3, [r3, #1]
 8000d62:	4413      	add	r3, r2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	3b10      	subs	r3, #16
 8000d68:	71fb      	strb	r3, [r7, #7]
				HAL_UART_Receive(VRL_COM_UART, &bootRxBuf[2], rxDataLen, HAL_MAX_DELAY);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	491e      	ldr	r1, [pc, #120]	; (8000dec <read_usr_cmd+0xfc>)
 8000d74:	481b      	ldr	r0, [pc, #108]	; (8000de4 <read_usr_cmd+0xf4>)
 8000d76:	f001 fe30 	bl	80029da <HAL_UART_Receive>
				HAL_UART_Transmit(VRL_COM_UART, &bootRxBuf[2], rxDataLen, HAL_MAX_DELAY);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	491a      	ldr	r1, [pc, #104]	; (8000dec <read_usr_cmd+0xfc>)
 8000d84:	4817      	ldr	r0, [pc, #92]	; (8000de4 <read_usr_cmd+0xf4>)
 8000d86:	f001 fd96 	bl	80028b6 <HAL_UART_Transmit>
 8000d8a:	e013      	b.n	8000db4 <read_usr_cmd+0xc4>
			}
			else
			{
				/* Gets Length as 1 Digit */
				rxDataLen = (uint8_t)( bootRxBuf[0] - 48 );
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <read_usr_cmd+0xf0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3b30      	subs	r3, #48	; 0x30
 8000d92:	71fb      	strb	r3, [r7, #7]
				HAL_UART_Receive(VRL_COM_UART, &bootRxBuf[1], rxDataLen, HAL_MAX_DELAY);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	4912      	ldr	r1, [pc, #72]	; (8000de8 <read_usr_cmd+0xf8>)
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <read_usr_cmd+0xf4>)
 8000da0:	f001 fe1b 	bl	80029da <HAL_UART_Receive>
				HAL_UART_Transmit(VRL_COM_UART, &bootRxBuf[1], rxDataLen, HAL_MAX_DELAY);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	490e      	ldr	r1, [pc, #56]	; (8000de8 <read_usr_cmd+0xf8>)
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <read_usr_cmd+0xf4>)
 8000db0:	f001 fd81 	bl	80028b6 <HAL_UART_Transmit>
			}

			HAL_UART_Transmit(VRL_COM_UART,(uint8_t *)"\r\n",3,HAL_MAX_DELAY);
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295
 8000db8:	2203      	movs	r2, #3
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <read_usr_cmd+0x100>)
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <read_usr_cmd+0xf4>)
 8000dbe:	f001 fd7a 	bl	80028b6 <HAL_UART_Transmit>
			process_bootloader_command();
 8000dc2:	f7ff fc37 	bl	8000634 <process_bootloader_command>
 8000dc6:	e798      	b.n	8000cfa <read_usr_cmd+0xa>
		}
		else if(bootRxBuf[0] == 13)
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <read_usr_cmd+0xf0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b0d      	cmp	r3, #13
 8000dce:	d103      	bne.n	8000dd8 <read_usr_cmd+0xe8>
		{
			print_msg("\r\n");
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <read_usr_cmd+0x100>)
 8000dd2:	f7ff ff3f 	bl	8000c54 <print_msg>
 8000dd6:	e790      	b.n	8000cfa <read_usr_cmd+0xa>
		}
		else
		{
			print_msg("\r\n[DBG_INFO]: Invalid Input. Enter \"1h\" for help\r\n");
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <read_usr_cmd+0x104>)
 8000dda:	f7ff ff3b 	bl	8000c54 <print_msg>
	{
 8000dde:	e78c      	b.n	8000cfa <read_usr_cmd+0xa>
 8000de0:	200000b0 	.word	0x200000b0
 8000de4:	20000178 	.word	0x20000178
 8000de8:	200000b1 	.word	0x200000b1
 8000dec:	200000b2 	.word	0x200000b2
 8000df0:	08003de4 	.word	0x08003de4
 8000df4:	08003de8 	.word	0x08003de8

08000df8 <HAL_GPIO_EXTI_Callback>:
	}

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e02:	2120      	movs	r1, #32
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000e06:	f000 ff6c 	bl	8001ce2 <HAL_GPIO_TogglePin>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020000 	.word	0x40020000

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e62:	2007      	movs	r0, #7
 8000e64:	f000 fab0 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_CRC_MspInit+0x3c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10d      	bne.n	8000ea2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023000 	.word	0x40023000
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a32      	ldr	r2, [pc, #200]	; (8000fa0 <HAL_UART_MspInit+0xe8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12c      	bne.n	8000f34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a30      	ldr	r2, [pc, #192]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f12:	230c      	movs	r3, #12
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f22:	2307      	movs	r3, #7
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f2e:	f000 fd13 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f32:	e031      	b.n	8000f98 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <HAL_UART_MspInit+0xf4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12c      	bne.n	8000f98 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <HAL_UART_MspInit+0xf8>)
 8000f94:	f000 fce0 	bl	8001958 <HAL_GPIO_Init>
}
 8000f98:	bf00      	nop
 8000f9a:	3730      	adds	r7, #48	; 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40004800 	.word	0x40004800
 8000fb0:	40020800 	.word	0x40020800

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f8ce 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800100c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001010:	f000 fe82 	bl	8001d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f001 ffa4 	bl	8002f94 <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20020000 	.word	0x20020000
 8001078:	00000400 	.word	0x00000400
 800107c:	200000a4 	.word	0x200000a4
 8001080:	20000240 	.word	0x20000240

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c4:	4c0b      	ldr	r4, [pc, #44]	; (80010f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010d2:	f7ff ffd7 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f001 ff63 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fc31 	bl	8000940 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010ec:	08003fd8 	.word	0x08003fd8
  ldr r2, =_sbss
 80010f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010f4:	2000023c 	.word	0x2000023c

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f94f 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe78 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f967 	bl	8001432 <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f92f 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000208 	.word	0x20000208

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000208 	.word	0x20000208

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff8e 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff29 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff3e 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff8e 	bl	800131c <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5d 	bl	80012c8 <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff31 	bl	800128c <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffa2 	bl	8001384 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e00e      	b.n	800147a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	795b      	ldrb	r3, [r3, #5]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d105      	bne.n	8001472 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fd01 	bl	8000e74 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_FLASH_Unlock+0x38>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da0b      	bge.n	80014ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_FLASH_Unlock+0x38>)
 8001498:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_FLASH_Unlock+0x3c>)
 800149a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <HAL_FLASH_Unlock+0x38>)
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <HAL_FLASH_Unlock+0x40>)
 80014a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_FLASH_Unlock+0x38>)
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da01      	bge.n	80014ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40023c00 	.word	0x40023c00
 80014c0:	45670123 	.word	0x45670123
 80014c4:	cdef89ab 	.word	0xcdef89ab

080014c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_FLASH_Lock+0x1c>)
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_FLASH_Lock+0x1c>)
 80014d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <FLASH_WaitForLastOperation+0x78>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80014fa:	f7ff fe65 	bl	80011c8 <HAL_GetTick>
 80014fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001500:	e010      	b.n	8001524 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d00c      	beq.n	8001524 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <FLASH_WaitForLastOperation+0x38>
 8001510:	f7ff fe5a 	bl	80011c8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	d201      	bcs.n	8001524 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e019      	b.n	8001558 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <FLASH_WaitForLastOperation+0x7c>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1e8      	bne.n	8001502 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <FLASH_WaitForLastOperation+0x7c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <FLASH_WaitForLastOperation+0x7c>)
 800153e:	2201      	movs	r2, #1
 8001540:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <FLASH_WaitForLastOperation+0x7c>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800154e:	f000 f80b 	bl	8001568 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
  
}  
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000020c 	.word	0x2000020c
 8001564:	40023c00 	.word	0x40023c00

08001568 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <FLASH_SetErrorCode+0xc4>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	4a2b      	ldr	r2, [pc, #172]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 8001582:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <FLASH_SetErrorCode+0xc4>)
 8001586:	2210      	movs	r2, #16
 8001588:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <FLASH_SetErrorCode+0xc4>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	4a24      	ldr	r2, [pc, #144]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 80015a0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <FLASH_SetErrorCode+0xc4>)
 80015a4:	2220      	movs	r2, #32
 80015a6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80015a8:	4b20      	ldr	r3, [pc, #128]	; (800162c <FLASH_SetErrorCode+0xc4>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 80015be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <FLASH_SetErrorCode+0xc4>)
 80015c2:	2240      	movs	r2, #64	; 0x40
 80015c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <FLASH_SetErrorCode+0xc4>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 80015dc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <FLASH_SetErrorCode+0xc4>)
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <FLASH_SetErrorCode+0xc4>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d009      	beq.n	8001604 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 80015fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <FLASH_SetErrorCode+0xc4>)
 80015fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001602:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <FLASH_SetErrorCode+0xc4>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	4a05      	ldr	r2, [pc, #20]	; (8001630 <FLASH_SetErrorCode+0xc8>)
 800161a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <FLASH_SetErrorCode+0xc4>)
 800161e:	2202      	movs	r2, #2
 8001620:	60da      	str	r2, [r3, #12]
  }
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40023c00 	.word	0x40023c00
 8001630:	2000020c 	.word	0x2000020c

08001634 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <HAL_FLASHEx_Erase+0xd8>)
 8001648:	7e1b      	ldrb	r3, [r3, #24]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_FLASHEx_Erase+0x1e>
 800164e:	2302      	movs	r3, #2
 8001650:	e058      	b.n	8001704 <HAL_FLASHEx_Erase+0xd0>
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_FLASHEx_Erase+0xd8>)
 8001654:	2201      	movs	r2, #1
 8001656:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001658:	f24c 3050 	movw	r0, #50000	; 0xc350
 800165c:	f7ff ff44 	bl	80014e8 <FLASH_WaitForLastOperation>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d148      	bne.n	80016fc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d115      	bne.n	80016a6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4619      	mov	r1, r3
 8001686:	4610      	mov	r0, r2
 8001688:	f000 f868 	bl	800175c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800168c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001690:	f7ff ff2a 	bl	80014e8 <FLASH_WaitForLastOperation>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_FLASHEx_Erase+0xdc>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_FLASHEx_Erase+0xdc>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6113      	str	r3, [r2, #16]
 80016a4:	e028      	b.n	80016f8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	e01c      	b.n	80016e8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4619      	mov	r1, r3
 80016b6:	68b8      	ldr	r0, [r7, #8]
 80016b8:	f000 f874 	bl	80017a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016c0:	f7ff ff12 	bl	80014e8 <FLASH_WaitForLastOperation>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_FLASHEx_Erase+0xdc>)
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_FLASHEx_Erase+0xdc>)
 80016ce:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80016d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	601a      	str	r2, [r3, #0]
          break;
 80016e0:	e00a      	b.n	80016f8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4413      	add	r3, r2
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3da      	bcc.n	80016ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016f8:	f000 f8e8 	bl	80018cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_FLASHEx_Erase+0xd8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	761a      	strb	r2, [r3, #24]

  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000020c 	.word	0x2000020c
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	220f      	movs	r2, #15
 8001720:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001722:	f000 f897 	bl	8001854 <FLASH_OB_GetWRP>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800172e:	f000 f89d 	bl	800186c <FLASH_OB_GetRDP>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800173a:	f000 f87b 	bl	8001834 <FLASH_OB_GetUser>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001746:	f000 f8b1 	bl	80018ac <FLASH_OB_GetBOR>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	615a      	str	r2, [r3, #20]
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <FLASH_MassErase+0x44>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <FLASH_MassErase+0x44>)
 800176e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001772:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <FLASH_MassErase+0x44>)
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <FLASH_MassErase+0x44>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <FLASH_MassErase+0x44>)
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	4313      	orrs	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <FLASH_MassErase+0x44>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6113      	str	r3, [r2, #16]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00

080017a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e010      	b.n	80017e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d103      	bne.n	80017ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80017c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e009      	b.n	80017e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d103      	bne.n	80017dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80017d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e002      	b.n	80017e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80017dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 80017e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	490f      	ldr	r1, [pc, #60]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 8001800:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001804:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4313      	orrs	r3, r2
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <FLASH_Erase_Sector+0x8c>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6113      	str	r3, [r2, #16]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40023c00 	.word	0x40023c00

08001834 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <FLASH_OB_GetUser+0x1c>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f023 031f 	bic.w	r3, r3, #31
 8001842:	b2db      	uxtb	r3, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <FLASH_OB_GetWRP+0x14>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40023c16 	.word	0x40023c16

0800186c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001872:	23aa      	movs	r3, #170	; 0xaa
 8001874:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <FLASH_OB_GetRDP+0x3c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2bcc      	cmp	r3, #204	; 0xcc
 800187e:	d102      	bne.n	8001886 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001880:	23cc      	movs	r3, #204	; 0xcc
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	e009      	b.n	800189a <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <FLASH_OB_GetRDP+0x3c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2baa      	cmp	r3, #170	; 0xaa
 800188e:	d102      	bne.n	8001896 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001890:	23aa      	movs	r3, #170	; 0xaa
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	e001      	b.n	800189a <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8001896:	2355      	movs	r3, #85	; 0x55
 8001898:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800189a:	79fb      	ldrb	r3, [r7, #7]
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40023c15 	.word	0x40023c15

080018ac <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <FLASH_OB_GetBOR+0x1c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023c14 	.word	0x40023c14

080018cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <FLASH_FlushCaches+0x88>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d017      	beq.n	800190c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <FLASH_FlushCaches+0x88>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <FLASH_FlushCaches+0x88>)
 80018e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <FLASH_FlushCaches+0x88>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <FLASH_FlushCaches+0x88>)
 80018ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <FLASH_FlushCaches+0x88>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a16      	ldr	r2, [pc, #88]	; (8001954 <FLASH_FlushCaches+0x88>)
 80018fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <FLASH_FlushCaches+0x88>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <FLASH_FlushCaches+0x88>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <FLASH_FlushCaches+0x88>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d017      	beq.n	8001948 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <FLASH_FlushCaches+0x88>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <FLASH_FlushCaches+0x88>)
 800191e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001922:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <FLASH_FlushCaches+0x88>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <FLASH_FlushCaches+0x88>)
 800192a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <FLASH_FlushCaches+0x88>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <FLASH_FlushCaches+0x88>)
 8001936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800193a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <FLASH_FlushCaches+0x88>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <FLASH_FlushCaches+0x88>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
  }
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e165      	b.n	8001c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8154 	bne.w	8001c3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d005      	beq.n	80019aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80ae 	beq.w	8001c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_GPIO_Init+0x300>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a5c      	ldr	r2, [pc, #368]	; (8001c58 <HAL_GPIO_Init+0x300>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <HAL_GPIO_Init+0x300>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afa:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <HAL_GPIO_Init+0x308>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d025      	beq.n	8001b72 <HAL_GPIO_Init+0x21a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4e      	ldr	r2, [pc, #312]	; (8001c64 <HAL_GPIO_Init+0x30c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01f      	beq.n	8001b6e <HAL_GPIO_Init+0x216>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_GPIO_Init+0x310>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x212>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <HAL_GPIO_Init+0x314>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x20e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4b      	ldr	r2, [pc, #300]	; (8001c70 <HAL_GPIO_Init+0x318>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x20a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4a      	ldr	r2, [pc, #296]	; (8001c74 <HAL_GPIO_Init+0x31c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x206>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x320>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x202>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e00c      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e00a      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	; (8001c5c <HAL_GPIO_Init+0x304>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb6:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_GPIO_Init+0x324>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f ae96 	bls.w	8001974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021400 	.word	0x40021400
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	40013c00 	.word	0x40013c00

08001c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e001      	b.n	8001ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b085      	sub	sp, #20
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf4:	887a      	ldrh	r2, [r7, #2]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	041a      	lsls	r2, r3, #16
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	400b      	ands	r3, r1
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	619a      	str	r2, [r3, #24]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f85e 	bl	8000df8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40013c00 	.word	0x40013c00

08001d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0cc      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d90c      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0b8      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d044      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d119      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e06f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e067      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4934      	ldr	r1, [pc, #208]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e38:	f7ff f9c6 	bl	80011c8 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7ff f9c2 	bl	80011c8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e04f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d20c      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e032      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4916      	ldr	r1, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ece:	f000 f855 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	490a      	ldr	r1, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	5ccb      	ldrb	r3, [r1, r3]
 8001ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1c8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f926 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00
 8001f04:	40023800 	.word	0x40023800
 8001f08:	08003e7c 	.word	0x08003e7c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000

08001f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f30:	f7ff fff0 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0a9b      	lsrs	r3, r3, #10
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4903      	ldr	r1, [pc, #12]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	08003e8c 	.word	0x08003e8c

08001f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f58:	f7ff ffdc 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	0b5b      	lsrs	r3, r3, #13
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	4903      	ldr	r1, [pc, #12]	; (8001f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f6a:	5ccb      	ldrb	r3, [r1, r3]
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08003e8c 	.word	0x08003e8c

08001f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f80:	b088      	sub	sp, #32
 8001f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f98:	4bce      	ldr	r3, [pc, #824]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	f200 818d 	bhi.w	80022c0 <HAL_RCC_GetSysClockFreq+0x344>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <HAL_RCC_GetSysClockFreq+0x30>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fe1 	.word	0x08001fe1
 8001fb0:	080022c1 	.word	0x080022c1
 8001fb4:	080022c1 	.word	0x080022c1
 8001fb8:	080022c1 	.word	0x080022c1
 8001fbc:	08001fe7 	.word	0x08001fe7
 8001fc0:	080022c1 	.word	0x080022c1
 8001fc4:	080022c1 	.word	0x080022c1
 8001fc8:	080022c1 	.word	0x080022c1
 8001fcc:	08001fed 	.word	0x08001fed
 8001fd0:	080022c1 	.word	0x080022c1
 8001fd4:	080022c1 	.word	0x080022c1
 8001fd8:	080022c1 	.word	0x080022c1
 8001fdc:	08002161 	.word	0x08002161
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe0:	4bbd      	ldr	r3, [pc, #756]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fe2:	61bb      	str	r3, [r7, #24]
       break;
 8001fe4:	e16f      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe6:	4bbd      	ldr	r3, [pc, #756]	; (80022dc <HAL_RCC_GetSysClockFreq+0x360>)
 8001fe8:	61bb      	str	r3, [r7, #24]
      break;
 8001fea:	e16c      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fec:	4bb9      	ldr	r3, [pc, #740]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff6:	4bb7      	ldr	r3, [pc, #732]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d053      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002002:	4bb4      	ldr	r3, [pc, #720]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	461a      	mov	r2, r3
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	ea02 0400 	and.w	r4, r2, r0
 800201a:	603c      	str	r4, [r7, #0]
 800201c:	400b      	ands	r3, r1
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	014b      	lsls	r3, r1, #5
 8002032:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002036:	0142      	lsls	r2, r0, #5
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	4623      	mov	r3, r4
 800203e:	1ac0      	subs	r0, r0, r3
 8002040:	462b      	mov	r3, r5
 8002042:	eb61 0103 	sbc.w	r1, r1, r3
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	018b      	lsls	r3, r1, #6
 8002050:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002054:	0182      	lsls	r2, r0, #6
 8002056:	1a12      	subs	r2, r2, r0
 8002058:	eb63 0301 	sbc.w	r3, r3, r1
 800205c:	f04f 0000 	mov.w	r0, #0
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	00d9      	lsls	r1, r3, #3
 8002066:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800206a:	00d0      	lsls	r0, r2, #3
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4621      	mov	r1, r4
 8002072:	1852      	adds	r2, r2, r1
 8002074:	4629      	mov	r1, r5
 8002076:	eb43 0101 	adc.w	r1, r3, r1
 800207a:	460b      	mov	r3, r1
 800207c:	f04f 0000 	mov.w	r0, #0
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	0259      	lsls	r1, r3, #9
 8002086:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800208a:	0250      	lsls	r0, r2, #9
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	461a      	mov	r2, r3
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	f7fe f910 	bl	80002c0 <__aeabi_uldivmod>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4613      	mov	r3, r2
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	e04c      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020aa:	4b8a      	ldr	r3, [pc, #552]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	099b      	lsrs	r3, r3, #6
 80020b0:	461a      	mov	r2, r3
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	ea02 0a00 	and.w	sl, r2, r0
 80020c2:	ea03 0b01 	and.w	fp, r3, r1
 80020c6:	4650      	mov	r0, sl
 80020c8:	4659      	mov	r1, fp
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	014b      	lsls	r3, r1, #5
 80020d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020d8:	0142      	lsls	r2, r0, #5
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	ebb0 000a 	subs.w	r0, r0, sl
 80020e2:	eb61 010b 	sbc.w	r1, r1, fp
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	018b      	lsls	r3, r1, #6
 80020f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020f4:	0182      	lsls	r2, r0, #6
 80020f6:	1a12      	subs	r2, r2, r0
 80020f8:	eb63 0301 	sbc.w	r3, r3, r1
 80020fc:	f04f 0000 	mov.w	r0, #0
 8002100:	f04f 0100 	mov.w	r1, #0
 8002104:	00d9      	lsls	r1, r3, #3
 8002106:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800210a:	00d0      	lsls	r0, r2, #3
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	eb12 020a 	adds.w	r2, r2, sl
 8002114:	eb43 030b 	adc.w	r3, r3, fp
 8002118:	f04f 0000 	mov.w	r0, #0
 800211c:	f04f 0100 	mov.w	r1, #0
 8002120:	0299      	lsls	r1, r3, #10
 8002122:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002126:	0290      	lsls	r0, r2, #10
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	461a      	mov	r2, r3
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	f7fe f8c2 	bl	80002c0 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002144:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	3301      	adds	r3, #1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	61bb      	str	r3, [r7, #24]
      break;
 800215e:	e0b2      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002160:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002168:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800216a:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d04d      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002176:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	461a      	mov	r2, r3
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	ea02 0800 	and.w	r8, r2, r0
 800218e:	ea03 0901 	and.w	r9, r3, r1
 8002192:	4640      	mov	r0, r8
 8002194:	4649      	mov	r1, r9
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	014b      	lsls	r3, r1, #5
 80021a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021a4:	0142      	lsls	r2, r0, #5
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	ebb0 0008 	subs.w	r0, r0, r8
 80021ae:	eb61 0109 	sbc.w	r1, r1, r9
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	018b      	lsls	r3, r1, #6
 80021bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021c0:	0182      	lsls	r2, r0, #6
 80021c2:	1a12      	subs	r2, r2, r0
 80021c4:	eb63 0301 	sbc.w	r3, r3, r1
 80021c8:	f04f 0000 	mov.w	r0, #0
 80021cc:	f04f 0100 	mov.w	r1, #0
 80021d0:	00d9      	lsls	r1, r3, #3
 80021d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021d6:	00d0      	lsls	r0, r2, #3
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	eb12 0208 	adds.w	r2, r2, r8
 80021e0:	eb43 0309 	adc.w	r3, r3, r9
 80021e4:	f04f 0000 	mov.w	r0, #0
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	0259      	lsls	r1, r3, #9
 80021ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80021f2:	0250      	lsls	r0, r2, #9
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	461a      	mov	r2, r3
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	f7fe f85c 	bl	80002c0 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	e04a      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	461a      	mov	r2, r3
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	ea02 0400 	and.w	r4, r2, r0
 800222a:	ea03 0501 	and.w	r5, r3, r1
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	014b      	lsls	r3, r1, #5
 800223c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002240:	0142      	lsls	r2, r0, #5
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	1b00      	subs	r0, r0, r4
 8002248:	eb61 0105 	sbc.w	r1, r1, r5
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	018b      	lsls	r3, r1, #6
 8002256:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800225a:	0182      	lsls	r2, r0, #6
 800225c:	1a12      	subs	r2, r2, r0
 800225e:	eb63 0301 	sbc.w	r3, r3, r1
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	00d9      	lsls	r1, r3, #3
 800226c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002270:	00d0      	lsls	r0, r2, #3
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	1912      	adds	r2, r2, r4
 8002278:	eb45 0303 	adc.w	r3, r5, r3
 800227c:	f04f 0000 	mov.w	r0, #0
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	0299      	lsls	r1, r3, #10
 8002286:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800228a:	0290      	lsls	r0, r2, #10
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	461a      	mov	r2, r3
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	f7fe f810 	bl	80002c0 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4613      	mov	r3, r2
 80022a6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	0f1b      	lsrs	r3, r3, #28
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	61bb      	str	r3, [r7, #24]
      break;
 80022be:	e002      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022c2:	61bb      	str	r3, [r7, #24]
      break;
 80022c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c6:	69bb      	ldr	r3, [r7, #24]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	00f42400 	.word	0x00f42400
 80022dc:	007a1200 	.word	0x007a1200

080022e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e28d      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8083 	beq.w	8002406 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002300:	4b94      	ldr	r3, [pc, #592]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b04      	cmp	r3, #4
 800230a:	d019      	beq.n	8002340 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800230c:	4b91      	ldr	r3, [pc, #580]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002314:	2b08      	cmp	r3, #8
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002318:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002324:	d00c      	beq.n	8002340 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	4b84      	ldr	r3, [pc, #528]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05b      	beq.n	8002404 <HAL_RCC_OscConfig+0x124>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d157      	bne.n	8002404 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e25a      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x90>
 8002362:	4b7c      	ldr	r3, [pc, #496]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a7b      	ldr	r2, [pc, #492]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xcc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0xb4>
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a75      	ldr	r2, [pc, #468]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b73      	ldr	r3, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a72      	ldr	r2, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xcc>
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b6c      	ldr	r3, [pc, #432]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6b      	ldr	r2, [pc, #428]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe ff08 	bl	80011c8 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe ff04 	bl	80011c8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e21f      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xdc>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fef4 	bl	80011c8 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fef0 	bl	80011c8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e20b      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b57      	ldr	r3, [pc, #348]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x104>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06f      	beq.n	80024f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002412:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d017      	beq.n	800244e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800241e:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d105      	bne.n	8002436 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800242a:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d11c      	bne.n	800247c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002442:	4b44      	ldr	r3, [pc, #272]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d116      	bne.n	800247c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_RCC_OscConfig+0x186>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1d3      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4937      	ldr	r1, [pc, #220]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	e03a      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_RCC_OscConfig+0x278>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fe9d 	bl	80011c8 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002492:	f7fe fe99 	bl	80011c8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e1b4      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4925      	ldr	r1, [pc, #148]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
 80024c4:	e015      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c6:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCC_OscConfig+0x278>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fe7c 	bl	80011c8 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe fe78 	bl	80011c8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e193      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d036      	beq.n	800256c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d016      	beq.n	8002534 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_RCC_OscConfig+0x27c>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7fe fe5c 	bl	80011c8 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002514:	f7fe fe58 	bl	80011c8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e173      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_OscConfig+0x274>)
 8002528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x234>
 8002532:	e01b      	b.n	800256c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_RCC_OscConfig+0x27c>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe fe45 	bl	80011c8 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	e00e      	b.n	8002560 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002542:	f7fe fe41 	bl	80011c8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d907      	bls.n	8002560 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e15c      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
 8002554:	40023800 	.word	0x40023800
 8002558:	42470000 	.word	0x42470000
 800255c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002560:	4b8a      	ldr	r3, [pc, #552]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1ea      	bne.n	8002542 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8097 	beq.w	80026a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b83      	ldr	r3, [pc, #524]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b7f      	ldr	r3, [pc, #508]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a7e      	ldr	r2, [pc, #504]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b7c      	ldr	r3, [pc, #496]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b79      	ldr	r3, [pc, #484]	; (8002790 <HAL_RCC_OscConfig+0x4b0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d118      	bne.n	80025e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x4b0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a75      	ldr	r2, [pc, #468]	; (8002790 <HAL_RCC_OscConfig+0x4b0>)
 80025bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fe01 	bl	80011c8 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ca:	f7fe fdfd 	bl	80011c8 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e118      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	4b6c      	ldr	r3, [pc, #432]	; (8002790 <HAL_RCC_OscConfig+0x4b0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d106      	bne.n	80025fe <HAL_RCC_OscConfig+0x31e>
 80025f0:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a65      	ldr	r2, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	e01c      	b.n	8002638 <HAL_RCC_OscConfig+0x358>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b05      	cmp	r3, #5
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x340>
 8002606:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a60      	ldr	r2, [pc, #384]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
 8002612:	4b5e      	ldr	r3, [pc, #376]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4a5d      	ldr	r2, [pc, #372]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6713      	str	r3, [r2, #112]	; 0x70
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0x358>
 8002620:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a59      	ldr	r2, [pc, #356]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
 800262c:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	4a56      	ldr	r2, [pc, #344]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d015      	beq.n	800266c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe fdc2 	bl	80011c8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	e00a      	b.n	800265e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002648:	f7fe fdbe 	bl	80011c8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e0d7      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265e:	4b4b      	ldr	r3, [pc, #300]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0ee      	beq.n	8002648 <HAL_RCC_OscConfig+0x368>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fe fdac 	bl	80011c8 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7fe fda8 	bl	80011c8 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0c1      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268a:	4b40      	ldr	r3, [pc, #256]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ee      	bne.n	8002674 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002696:	7dfb      	ldrb	r3, [r7, #23]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	4a3a      	ldr	r2, [pc, #232]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80026a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80ad 	beq.w	800280c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b2:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d060      	beq.n	8002780 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d145      	bne.n	8002752 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b33      	ldr	r3, [pc, #204]	; (8002794 <HAL_RCC_OscConfig+0x4b4>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fd7c 	bl	80011c8 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fd78 	bl	80011c8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e093      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	019b      	lsls	r3, r3, #6
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	3b01      	subs	r3, #1
 800270c:	041b      	lsls	r3, r3, #16
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	071b      	lsls	r3, r3, #28
 800271e:	491b      	ldr	r1, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x4b4>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fd4d 	bl	80011c8 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fd49 	bl	80011c8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e064      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x452>
 8002750:	e05c      	b.n	800280c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_RCC_OscConfig+0x4b4>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fd36 	bl	80011c8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fd32 	bl	80011c8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e04d      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_OscConfig+0x4ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x480>
 800277e:	e045      	b.n	800280c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e040      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000
 8002794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <HAL_RCC_OscConfig+0x538>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d030      	beq.n	8002808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d129      	bne.n	8002808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d122      	bne.n	8002808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c8:	4013      	ands	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d119      	bne.n	8002808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	3b01      	subs	r3, #1
 80027e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d10f      	bne.n	8002808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e03f      	b.n	80028ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fb38 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800285e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f9cb 	bl	8002bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08a      	sub	sp, #40	; 0x28
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d17c      	bne.n	80029d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_UART_Transmit+0x2c>
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e075      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Transmit+0x3e>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e06e      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2221      	movs	r2, #33	; 0x21
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800290a:	f7fe fc5d 	bl	80011c8 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d108      	bne.n	8002938 <HAL_UART_Transmit+0x82>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e003      	b.n	8002940 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002948:	e02a      	b.n	80029a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f8e2 	bl	8002b1e <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e036      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	3302      	adds	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	e007      	b.n	8002992 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1cf      	bne.n	800294a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2140      	movs	r1, #64	; 0x40
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f8b2 	bl	8002b1e <UART_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e006      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b08a      	sub	sp, #40	; 0x28
 80029de:	af02      	add	r7, sp, #8
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	f040 808c 	bne.w	8002b14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_UART_Receive+0x2e>
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e084      	b.n	8002b16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Receive+0x40>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e07d      	b.n	8002b16 <HAL_UART_Receive+0x13c>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2222      	movs	r2, #34	; 0x22
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a36:	f7fe fbc7 	bl	80011c8 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Receive+0x8a>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a74:	e043      	b.n	8002afe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2120      	movs	r1, #32
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f84c 	bl	8002b1e <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e042      	b.n	8002b16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	3302      	adds	r3, #2
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e01f      	b.n	8002af0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	d007      	beq.n	8002aca <HAL_UART_Receive+0xf0>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_UART_Receive+0xfe>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e008      	b.n	8002aea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1b6      	bne.n	8002a76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b090      	sub	sp, #64	; 0x40
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2e:	e050      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d04c      	beq.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b3e:	f7fe fb43 	bl	80011c8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d241      	bcs.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b6e:	637a      	str	r2, [r7, #52]	; 0x34
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e5      	bne.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3314      	adds	r3, #20
 8002b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	613b      	str	r3, [r7, #16]
   return(result);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ba2:	623a      	str	r2, [r7, #32]
 8002ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	69f9      	ldr	r1, [r7, #28]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e5      	bne.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e00f      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d09f      	beq.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3740      	adds	r7, #64	; 0x40
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c00:	b09f      	sub	sp, #124	; 0x7c
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	ea40 0301 	orr.w	r3, r0, r1
 8002c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c40:	f021 010c 	bic.w	r1, r1, #12
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5a:	6999      	ldr	r1, [r3, #24]
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	ea40 0301 	orr.w	r3, r0, r1
 8002c64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4bc5      	ldr	r3, [pc, #788]	; (8002f80 <UART_SetConfig+0x384>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d004      	beq.n	8002c7a <UART_SetConfig+0x7e>
 8002c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4bc3      	ldr	r3, [pc, #780]	; (8002f84 <UART_SetConfig+0x388>)
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d103      	bne.n	8002c82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c7a:	f7ff f96b 	bl	8001f54 <HAL_RCC_GetPCLK2Freq>
 8002c7e:	6778      	str	r0, [r7, #116]	; 0x74
 8002c80:	e002      	b.n	8002c88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c82:	f7ff f953 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002c86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c90:	f040 80b6 	bne.w	8002e00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c96:	461c      	mov	r4, r3
 8002c98:	f04f 0500 	mov.w	r5, #0
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	6439      	str	r1, [r7, #64]	; 0x40
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cac:	1912      	adds	r2, r2, r4
 8002cae:	eb45 0303 	adc.w	r3, r5, r3
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	00d9      	lsls	r1, r3, #3
 8002cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cc0:	00d0      	lsls	r0, r2, #3
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	1911      	adds	r1, r2, r4
 8002cc8:	6639      	str	r1, [r7, #96]	; 0x60
 8002cca:	416b      	adcs	r3, r5
 8002ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ce8:	f7fd faea 	bl	80002c0 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4ba5      	ldr	r3, [pc, #660]	; (8002f88 <UART_SetConfig+0x38c>)
 8002cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	011e      	lsls	r6, r3, #4
 8002cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfc:	461c      	mov	r4, r3
 8002cfe:	f04f 0500 	mov.w	r5, #0
 8002d02:	4622      	mov	r2, r4
 8002d04:	462b      	mov	r3, r5
 8002d06:	1891      	adds	r1, r2, r2
 8002d08:	6339      	str	r1, [r7, #48]	; 0x30
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d12:	1912      	adds	r2, r2, r4
 8002d14:	eb45 0303 	adc.w	r3, r5, r3
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	00d9      	lsls	r1, r3, #3
 8002d22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d26:	00d0      	lsls	r0, r2, #3
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	1911      	adds	r1, r2, r4
 8002d2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d30:	416b      	adcs	r3, r5
 8002d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	1891      	adds	r1, r2, r2
 8002d40:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d42:	415b      	adcs	r3, r3
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d4e:	f7fd fab7 	bl	80002c0 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4b8c      	ldr	r3, [pc, #560]	; (8002f88 <UART_SetConfig+0x38c>)
 8002d58:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	2164      	movs	r1, #100	; 0x64
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3332      	adds	r3, #50	; 0x32
 8002d6a:	4a87      	ldr	r2, [pc, #540]	; (8002f88 <UART_SetConfig+0x38c>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d78:	441e      	add	r6, r3
 8002d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	1894      	adds	r4, r2, r2
 8002d88:	623c      	str	r4, [r7, #32]
 8002d8a:	415b      	adcs	r3, r3
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d92:	1812      	adds	r2, r2, r0
 8002d94:	eb41 0303 	adc.w	r3, r1, r3
 8002d98:	f04f 0400 	mov.w	r4, #0
 8002d9c:	f04f 0500 	mov.w	r5, #0
 8002da0:	00dd      	lsls	r5, r3, #3
 8002da2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002da6:	00d4      	lsls	r4, r2, #3
 8002da8:	4622      	mov	r2, r4
 8002daa:	462b      	mov	r3, r5
 8002dac:	1814      	adds	r4, r2, r0
 8002dae:	653c      	str	r4, [r7, #80]	; 0x50
 8002db0:	414b      	adcs	r3, r1
 8002db2:	657b      	str	r3, [r7, #84]	; 0x54
 8002db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	1891      	adds	r1, r2, r2
 8002dc0:	61b9      	str	r1, [r7, #24]
 8002dc2:	415b      	adcs	r3, r3
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002dce:	f7fd fa77 	bl	80002c0 <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4b6c      	ldr	r3, [pc, #432]	; (8002f88 <UART_SetConfig+0x38c>)
 8002dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	2164      	movs	r1, #100	; 0x64
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	3332      	adds	r3, #50	; 0x32
 8002dea:	4a67      	ldr	r2, [pc, #412]	; (8002f88 <UART_SetConfig+0x38c>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	f003 0207 	and.w	r2, r3, #7
 8002df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4432      	add	r2, r6
 8002dfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dfe:	e0b9      	b.n	8002f74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e02:	461c      	mov	r4, r3
 8002e04:	f04f 0500 	mov.w	r5, #0
 8002e08:	4622      	mov	r2, r4
 8002e0a:	462b      	mov	r3, r5
 8002e0c:	1891      	adds	r1, r2, r2
 8002e0e:	6139      	str	r1, [r7, #16]
 8002e10:	415b      	adcs	r3, r3
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e18:	1912      	adds	r2, r2, r4
 8002e1a:	eb45 0303 	adc.w	r3, r5, r3
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	00d9      	lsls	r1, r3, #3
 8002e28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e2c:	00d0      	lsls	r0, r2, #3
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	eb12 0804 	adds.w	r8, r2, r4
 8002e36:	eb43 0905 	adc.w	r9, r3, r5
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f04f 0100 	mov.w	r1, #0
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	008b      	lsls	r3, r1, #2
 8002e4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e52:	0082      	lsls	r2, r0, #2
 8002e54:	4640      	mov	r0, r8
 8002e56:	4649      	mov	r1, r9
 8002e58:	f7fd fa32 	bl	80002c0 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <UART_SetConfig+0x38c>)
 8002e62:	fba3 2302 	umull	r2, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	011e      	lsls	r6, r3, #4
 8002e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	1894      	adds	r4, r2, r2
 8002e78:	60bc      	str	r4, [r7, #8]
 8002e7a:	415b      	adcs	r3, r3
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e82:	1812      	adds	r2, r2, r0
 8002e84:	eb41 0303 	adc.w	r3, r1, r3
 8002e88:	f04f 0400 	mov.w	r4, #0
 8002e8c:	f04f 0500 	mov.w	r5, #0
 8002e90:	00dd      	lsls	r5, r3, #3
 8002e92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e96:	00d4      	lsls	r4, r2, #3
 8002e98:	4622      	mov	r2, r4
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	1814      	adds	r4, r2, r0
 8002e9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ea0:	414b      	adcs	r3, r1
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ebc:	0082      	lsls	r2, r0, #2
 8002ebe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ec2:	f7fd f9fd 	bl	80002c0 <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <UART_SetConfig+0x38c>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	; 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <UART_SetConfig+0x38c>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eea:	441e      	add	r6, r3
 8002eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	1894      	adds	r4, r2, r2
 8002efa:	603c      	str	r4, [r7, #0]
 8002efc:	415b      	adcs	r3, r3
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f04:	1812      	adds	r2, r2, r0
 8002f06:	eb41 0303 	adc.w	r3, r1, r3
 8002f0a:	f04f 0400 	mov.w	r4, #0
 8002f0e:	f04f 0500 	mov.w	r5, #0
 8002f12:	00dd      	lsls	r5, r3, #3
 8002f14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f18:	00d4      	lsls	r4, r2, #3
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	eb12 0a00 	adds.w	sl, r2, r0
 8002f22:	eb43 0b01 	adc.w	fp, r3, r1
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	008b      	lsls	r3, r1, #2
 8002f3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f3e:	0082      	lsls	r2, r0, #2
 8002f40:	4650      	mov	r0, sl
 8002f42:	4659      	mov	r1, fp
 8002f44:	f7fd f9bc 	bl	80002c0 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <UART_SetConfig+0x38c>)
 8002f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2164      	movs	r1, #100	; 0x64
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	3332      	adds	r3, #50	; 0x32
 8002f60:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <UART_SetConfig+0x38c>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4432      	add	r2, r6
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	377c      	adds	r7, #124	; 0x7c
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f7e:	bf00      	nop
 8002f80:	40011000 	.word	0x40011000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	51eb851f 	.word	0x51eb851f

08002f8c <atoi>:
 8002f8c:	220a      	movs	r2, #10
 8002f8e:	2100      	movs	r1, #0
 8002f90:	f000 b8d2 	b.w	8003138 <strtol>

08002f94 <__errno>:
 8002f94:	4b01      	ldr	r3, [pc, #4]	; (8002f9c <__errno+0x8>)
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	2000000c 	.word	0x2000000c

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4d0d      	ldr	r5, [pc, #52]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa4:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa6:	1b64      	subs	r4, r4, r5
 8002fa8:	10a4      	asrs	r4, r4, #2
 8002faa:	2600      	movs	r6, #0
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	4d0b      	ldr	r5, [pc, #44]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb2:	4c0c      	ldr	r4, [pc, #48]	; (8002fe4 <__libc_init_array+0x44>)
 8002fb4:	f000 fcf8 	bl	80039a8 <_init>
 8002fb8:	1b64      	subs	r4, r4, r5
 8002fba:	10a4      	asrs	r4, r4, #2
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003fd0 	.word	0x08003fd0
 8002fdc:	08003fd0 	.word	0x08003fd0
 8002fe0:	08003fd0 	.word	0x08003fd0
 8002fe4:	08003fd4 	.word	0x08003fd4

08002fe8 <memset>:
 8002fe8:	4402      	add	r2, r0
 8002fea:	4603      	mov	r3, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <strcasecmp>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4d0c      	ldr	r5, [pc, #48]	; (800302c <strcasecmp+0x34>)
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	462e      	mov	r6, r5
 8003000:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003004:	5d5a      	ldrb	r2, [r3, r5]
 8003006:	f002 0203 	and.w	r2, r2, #3
 800300a:	2a01      	cmp	r2, #1
 800300c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003010:	5cb0      	ldrb	r0, [r6, r2]
 8003012:	f000 0003 	and.w	r0, r0, #3
 8003016:	bf08      	it	eq
 8003018:	3320      	addeq	r3, #32
 800301a:	2801      	cmp	r0, #1
 800301c:	bf08      	it	eq
 800301e:	3220      	addeq	r2, #32
 8003020:	1a98      	subs	r0, r3, r2
 8003022:	d101      	bne.n	8003028 <strcasecmp+0x30>
 8003024:	2a00      	cmp	r2, #0
 8003026:	d1eb      	bne.n	8003000 <strcasecmp+0x8>
 8003028:	bd70      	pop	{r4, r5, r6, pc}
 800302a:	bf00      	nop
 800302c:	08003e95 	.word	0x08003e95

08003030 <_strtol_l.isra.0>:
 8003030:	2b01      	cmp	r3, #1
 8003032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003036:	d001      	beq.n	800303c <_strtol_l.isra.0+0xc>
 8003038:	2b24      	cmp	r3, #36	; 0x24
 800303a:	d906      	bls.n	800304a <_strtol_l.isra.0+0x1a>
 800303c:	f7ff ffaa 	bl	8002f94 <__errno>
 8003040:	2316      	movs	r3, #22
 8003042:	6003      	str	r3, [r0, #0]
 8003044:	2000      	movs	r0, #0
 8003046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304a:	4f3a      	ldr	r7, [pc, #232]	; (8003134 <_strtol_l.isra.0+0x104>)
 800304c:	468e      	mov	lr, r1
 800304e:	4676      	mov	r6, lr
 8003050:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003054:	5de5      	ldrb	r5, [r4, r7]
 8003056:	f015 0508 	ands.w	r5, r5, #8
 800305a:	d1f8      	bne.n	800304e <_strtol_l.isra.0+0x1e>
 800305c:	2c2d      	cmp	r4, #45	; 0x2d
 800305e:	d134      	bne.n	80030ca <_strtol_l.isra.0+0x9a>
 8003060:	f89e 4000 	ldrb.w	r4, [lr]
 8003064:	f04f 0801 	mov.w	r8, #1
 8003068:	f106 0e02 	add.w	lr, r6, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05c      	beq.n	800312a <_strtol_l.isra.0+0xfa>
 8003070:	2b10      	cmp	r3, #16
 8003072:	d10c      	bne.n	800308e <_strtol_l.isra.0+0x5e>
 8003074:	2c30      	cmp	r4, #48	; 0x30
 8003076:	d10a      	bne.n	800308e <_strtol_l.isra.0+0x5e>
 8003078:	f89e 4000 	ldrb.w	r4, [lr]
 800307c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003080:	2c58      	cmp	r4, #88	; 0x58
 8003082:	d14d      	bne.n	8003120 <_strtol_l.isra.0+0xf0>
 8003084:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003088:	2310      	movs	r3, #16
 800308a:	f10e 0e02 	add.w	lr, lr, #2
 800308e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003092:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003096:	2600      	movs	r6, #0
 8003098:	fbbc f9f3 	udiv	r9, ip, r3
 800309c:	4635      	mov	r5, r6
 800309e:	fb03 ca19 	mls	sl, r3, r9, ip
 80030a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80030a6:	2f09      	cmp	r7, #9
 80030a8:	d818      	bhi.n	80030dc <_strtol_l.isra.0+0xac>
 80030aa:	463c      	mov	r4, r7
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	dd24      	ble.n	80030fa <_strtol_l.isra.0+0xca>
 80030b0:	2e00      	cmp	r6, #0
 80030b2:	db1f      	blt.n	80030f4 <_strtol_l.isra.0+0xc4>
 80030b4:	45a9      	cmp	r9, r5
 80030b6:	d31d      	bcc.n	80030f4 <_strtol_l.isra.0+0xc4>
 80030b8:	d101      	bne.n	80030be <_strtol_l.isra.0+0x8e>
 80030ba:	45a2      	cmp	sl, r4
 80030bc:	db1a      	blt.n	80030f4 <_strtol_l.isra.0+0xc4>
 80030be:	fb05 4503 	mla	r5, r5, r3, r4
 80030c2:	2601      	movs	r6, #1
 80030c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80030c8:	e7eb      	b.n	80030a2 <_strtol_l.isra.0+0x72>
 80030ca:	2c2b      	cmp	r4, #43	; 0x2b
 80030cc:	bf08      	it	eq
 80030ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 80030d2:	46a8      	mov	r8, r5
 80030d4:	bf08      	it	eq
 80030d6:	f106 0e02 	addeq.w	lr, r6, #2
 80030da:	e7c7      	b.n	800306c <_strtol_l.isra.0+0x3c>
 80030dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80030e0:	2f19      	cmp	r7, #25
 80030e2:	d801      	bhi.n	80030e8 <_strtol_l.isra.0+0xb8>
 80030e4:	3c37      	subs	r4, #55	; 0x37
 80030e6:	e7e1      	b.n	80030ac <_strtol_l.isra.0+0x7c>
 80030e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80030ec:	2f19      	cmp	r7, #25
 80030ee:	d804      	bhi.n	80030fa <_strtol_l.isra.0+0xca>
 80030f0:	3c57      	subs	r4, #87	; 0x57
 80030f2:	e7db      	b.n	80030ac <_strtol_l.isra.0+0x7c>
 80030f4:	f04f 36ff 	mov.w	r6, #4294967295
 80030f8:	e7e4      	b.n	80030c4 <_strtol_l.isra.0+0x94>
 80030fa:	2e00      	cmp	r6, #0
 80030fc:	da05      	bge.n	800310a <_strtol_l.isra.0+0xda>
 80030fe:	2322      	movs	r3, #34	; 0x22
 8003100:	6003      	str	r3, [r0, #0]
 8003102:	4665      	mov	r5, ip
 8003104:	b942      	cbnz	r2, 8003118 <_strtol_l.isra.0+0xe8>
 8003106:	4628      	mov	r0, r5
 8003108:	e79d      	b.n	8003046 <_strtol_l.isra.0+0x16>
 800310a:	f1b8 0f00 	cmp.w	r8, #0
 800310e:	d000      	beq.n	8003112 <_strtol_l.isra.0+0xe2>
 8003110:	426d      	negs	r5, r5
 8003112:	2a00      	cmp	r2, #0
 8003114:	d0f7      	beq.n	8003106 <_strtol_l.isra.0+0xd6>
 8003116:	b10e      	cbz	r6, 800311c <_strtol_l.isra.0+0xec>
 8003118:	f10e 31ff 	add.w	r1, lr, #4294967295
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	e7f2      	b.n	8003106 <_strtol_l.isra.0+0xd6>
 8003120:	2430      	movs	r4, #48	; 0x30
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1b3      	bne.n	800308e <_strtol_l.isra.0+0x5e>
 8003126:	2308      	movs	r3, #8
 8003128:	e7b1      	b.n	800308e <_strtol_l.isra.0+0x5e>
 800312a:	2c30      	cmp	r4, #48	; 0x30
 800312c:	d0a4      	beq.n	8003078 <_strtol_l.isra.0+0x48>
 800312e:	230a      	movs	r3, #10
 8003130:	e7ad      	b.n	800308e <_strtol_l.isra.0+0x5e>
 8003132:	bf00      	nop
 8003134:	08003e95 	.word	0x08003e95

08003138 <strtol>:
 8003138:	4613      	mov	r3, r2
 800313a:	460a      	mov	r2, r1
 800313c:	4601      	mov	r1, r0
 800313e:	4802      	ldr	r0, [pc, #8]	; (8003148 <strtol+0x10>)
 8003140:	6800      	ldr	r0, [r0, #0]
 8003142:	f7ff bf75 	b.w	8003030 <_strtol_l.isra.0>
 8003146:	bf00      	nop
 8003148:	2000000c 	.word	0x2000000c

0800314c <_vsiprintf_r>:
 800314c:	b500      	push	{lr}
 800314e:	b09b      	sub	sp, #108	; 0x6c
 8003150:	9100      	str	r1, [sp, #0]
 8003152:	9104      	str	r1, [sp, #16]
 8003154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003158:	9105      	str	r1, [sp, #20]
 800315a:	9102      	str	r1, [sp, #8]
 800315c:	4905      	ldr	r1, [pc, #20]	; (8003174 <_vsiprintf_r+0x28>)
 800315e:	9103      	str	r1, [sp, #12]
 8003160:	4669      	mov	r1, sp
 8003162:	f000 f86f 	bl	8003244 <_svfiprintf_r>
 8003166:	9b00      	ldr	r3, [sp, #0]
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	b01b      	add	sp, #108	; 0x6c
 800316e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003172:	bf00      	nop
 8003174:	ffff0208 	.word	0xffff0208

08003178 <vsiprintf>:
 8003178:	4613      	mov	r3, r2
 800317a:	460a      	mov	r2, r1
 800317c:	4601      	mov	r1, r0
 800317e:	4802      	ldr	r0, [pc, #8]	; (8003188 <vsiprintf+0x10>)
 8003180:	6800      	ldr	r0, [r0, #0]
 8003182:	f7ff bfe3 	b.w	800314c <_vsiprintf_r>
 8003186:	bf00      	nop
 8003188:	2000000c 	.word	0x2000000c

0800318c <__ssputs_r>:
 800318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003190:	688e      	ldr	r6, [r1, #8]
 8003192:	429e      	cmp	r6, r3
 8003194:	4682      	mov	sl, r0
 8003196:	460c      	mov	r4, r1
 8003198:	4690      	mov	r8, r2
 800319a:	461f      	mov	r7, r3
 800319c:	d838      	bhi.n	8003210 <__ssputs_r+0x84>
 800319e:	898a      	ldrh	r2, [r1, #12]
 80031a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031a4:	d032      	beq.n	800320c <__ssputs_r+0x80>
 80031a6:	6825      	ldr	r5, [r4, #0]
 80031a8:	6909      	ldr	r1, [r1, #16]
 80031aa:	eba5 0901 	sub.w	r9, r5, r1
 80031ae:	6965      	ldr	r5, [r4, #20]
 80031b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031b8:	3301      	adds	r3, #1
 80031ba:	444b      	add	r3, r9
 80031bc:	106d      	asrs	r5, r5, #1
 80031be:	429d      	cmp	r5, r3
 80031c0:	bf38      	it	cc
 80031c2:	461d      	movcc	r5, r3
 80031c4:	0553      	lsls	r3, r2, #21
 80031c6:	d531      	bpl.n	800322c <__ssputs_r+0xa0>
 80031c8:	4629      	mov	r1, r5
 80031ca:	f000 fb47 	bl	800385c <_malloc_r>
 80031ce:	4606      	mov	r6, r0
 80031d0:	b950      	cbnz	r0, 80031e8 <__ssputs_r+0x5c>
 80031d2:	230c      	movs	r3, #12
 80031d4:	f8ca 3000 	str.w	r3, [sl]
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031de:	81a3      	strh	r3, [r4, #12]
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e8:	6921      	ldr	r1, [r4, #16]
 80031ea:	464a      	mov	r2, r9
 80031ec:	f000 fabe 	bl	800376c <memcpy>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fa:	81a3      	strh	r3, [r4, #12]
 80031fc:	6126      	str	r6, [r4, #16]
 80031fe:	6165      	str	r5, [r4, #20]
 8003200:	444e      	add	r6, r9
 8003202:	eba5 0509 	sub.w	r5, r5, r9
 8003206:	6026      	str	r6, [r4, #0]
 8003208:	60a5      	str	r5, [r4, #8]
 800320a:	463e      	mov	r6, r7
 800320c:	42be      	cmp	r6, r7
 800320e:	d900      	bls.n	8003212 <__ssputs_r+0x86>
 8003210:	463e      	mov	r6, r7
 8003212:	4632      	mov	r2, r6
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	4641      	mov	r1, r8
 8003218:	f000 fab6 	bl	8003788 <memmove>
 800321c:	68a3      	ldr	r3, [r4, #8]
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	1b9b      	subs	r3, r3, r6
 8003222:	4432      	add	r2, r6
 8003224:	60a3      	str	r3, [r4, #8]
 8003226:	6022      	str	r2, [r4, #0]
 8003228:	2000      	movs	r0, #0
 800322a:	e7db      	b.n	80031e4 <__ssputs_r+0x58>
 800322c:	462a      	mov	r2, r5
 800322e:	f000 fb6f 	bl	8003910 <_realloc_r>
 8003232:	4606      	mov	r6, r0
 8003234:	2800      	cmp	r0, #0
 8003236:	d1e1      	bne.n	80031fc <__ssputs_r+0x70>
 8003238:	6921      	ldr	r1, [r4, #16]
 800323a:	4650      	mov	r0, sl
 800323c:	f000 fabe 	bl	80037bc <_free_r>
 8003240:	e7c7      	b.n	80031d2 <__ssputs_r+0x46>
	...

08003244 <_svfiprintf_r>:
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	4698      	mov	r8, r3
 800324a:	898b      	ldrh	r3, [r1, #12]
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	b09d      	sub	sp, #116	; 0x74
 8003250:	4607      	mov	r7, r0
 8003252:	460d      	mov	r5, r1
 8003254:	4614      	mov	r4, r2
 8003256:	d50e      	bpl.n	8003276 <_svfiprintf_r+0x32>
 8003258:	690b      	ldr	r3, [r1, #16]
 800325a:	b963      	cbnz	r3, 8003276 <_svfiprintf_r+0x32>
 800325c:	2140      	movs	r1, #64	; 0x40
 800325e:	f000 fafd 	bl	800385c <_malloc_r>
 8003262:	6028      	str	r0, [r5, #0]
 8003264:	6128      	str	r0, [r5, #16]
 8003266:	b920      	cbnz	r0, 8003272 <_svfiprintf_r+0x2e>
 8003268:	230c      	movs	r3, #12
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	e0d1      	b.n	8003416 <_svfiprintf_r+0x1d2>
 8003272:	2340      	movs	r3, #64	; 0x40
 8003274:	616b      	str	r3, [r5, #20]
 8003276:	2300      	movs	r3, #0
 8003278:	9309      	str	r3, [sp, #36]	; 0x24
 800327a:	2320      	movs	r3, #32
 800327c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003280:	f8cd 800c 	str.w	r8, [sp, #12]
 8003284:	2330      	movs	r3, #48	; 0x30
 8003286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003430 <_svfiprintf_r+0x1ec>
 800328a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800328e:	f04f 0901 	mov.w	r9, #1
 8003292:	4623      	mov	r3, r4
 8003294:	469a      	mov	sl, r3
 8003296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800329a:	b10a      	cbz	r2, 80032a0 <_svfiprintf_r+0x5c>
 800329c:	2a25      	cmp	r2, #37	; 0x25
 800329e:	d1f9      	bne.n	8003294 <_svfiprintf_r+0x50>
 80032a0:	ebba 0b04 	subs.w	fp, sl, r4
 80032a4:	d00b      	beq.n	80032be <_svfiprintf_r+0x7a>
 80032a6:	465b      	mov	r3, fp
 80032a8:	4622      	mov	r2, r4
 80032aa:	4629      	mov	r1, r5
 80032ac:	4638      	mov	r0, r7
 80032ae:	f7ff ff6d 	bl	800318c <__ssputs_r>
 80032b2:	3001      	adds	r0, #1
 80032b4:	f000 80aa 	beq.w	800340c <_svfiprintf_r+0x1c8>
 80032b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ba:	445a      	add	r2, fp
 80032bc:	9209      	str	r2, [sp, #36]	; 0x24
 80032be:	f89a 3000 	ldrb.w	r3, [sl]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80a2 	beq.w	800340c <_svfiprintf_r+0x1c8>
 80032c8:	2300      	movs	r3, #0
 80032ca:	f04f 32ff 	mov.w	r2, #4294967295
 80032ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032d2:	f10a 0a01 	add.w	sl, sl, #1
 80032d6:	9304      	str	r3, [sp, #16]
 80032d8:	9307      	str	r3, [sp, #28]
 80032da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032de:	931a      	str	r3, [sp, #104]	; 0x68
 80032e0:	4654      	mov	r4, sl
 80032e2:	2205      	movs	r2, #5
 80032e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e8:	4851      	ldr	r0, [pc, #324]	; (8003430 <_svfiprintf_r+0x1ec>)
 80032ea:	f7fc ff99 	bl	8000220 <memchr>
 80032ee:	9a04      	ldr	r2, [sp, #16]
 80032f0:	b9d8      	cbnz	r0, 800332a <_svfiprintf_r+0xe6>
 80032f2:	06d0      	lsls	r0, r2, #27
 80032f4:	bf44      	itt	mi
 80032f6:	2320      	movmi	r3, #32
 80032f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032fc:	0711      	lsls	r1, r2, #28
 80032fe:	bf44      	itt	mi
 8003300:	232b      	movmi	r3, #43	; 0x2b
 8003302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003306:	f89a 3000 	ldrb.w	r3, [sl]
 800330a:	2b2a      	cmp	r3, #42	; 0x2a
 800330c:	d015      	beq.n	800333a <_svfiprintf_r+0xf6>
 800330e:	9a07      	ldr	r2, [sp, #28]
 8003310:	4654      	mov	r4, sl
 8003312:	2000      	movs	r0, #0
 8003314:	f04f 0c0a 	mov.w	ip, #10
 8003318:	4621      	mov	r1, r4
 800331a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800331e:	3b30      	subs	r3, #48	; 0x30
 8003320:	2b09      	cmp	r3, #9
 8003322:	d94e      	bls.n	80033c2 <_svfiprintf_r+0x17e>
 8003324:	b1b0      	cbz	r0, 8003354 <_svfiprintf_r+0x110>
 8003326:	9207      	str	r2, [sp, #28]
 8003328:	e014      	b.n	8003354 <_svfiprintf_r+0x110>
 800332a:	eba0 0308 	sub.w	r3, r0, r8
 800332e:	fa09 f303 	lsl.w	r3, r9, r3
 8003332:	4313      	orrs	r3, r2
 8003334:	9304      	str	r3, [sp, #16]
 8003336:	46a2      	mov	sl, r4
 8003338:	e7d2      	b.n	80032e0 <_svfiprintf_r+0x9c>
 800333a:	9b03      	ldr	r3, [sp, #12]
 800333c:	1d19      	adds	r1, r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9103      	str	r1, [sp, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfbb      	ittet	lt
 8003346:	425b      	neglt	r3, r3
 8003348:	f042 0202 	orrlt.w	r2, r2, #2
 800334c:	9307      	strge	r3, [sp, #28]
 800334e:	9307      	strlt	r3, [sp, #28]
 8003350:	bfb8      	it	lt
 8003352:	9204      	strlt	r2, [sp, #16]
 8003354:	7823      	ldrb	r3, [r4, #0]
 8003356:	2b2e      	cmp	r3, #46	; 0x2e
 8003358:	d10c      	bne.n	8003374 <_svfiprintf_r+0x130>
 800335a:	7863      	ldrb	r3, [r4, #1]
 800335c:	2b2a      	cmp	r3, #42	; 0x2a
 800335e:	d135      	bne.n	80033cc <_svfiprintf_r+0x188>
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	1d1a      	adds	r2, r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	9203      	str	r2, [sp, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	bfb8      	it	lt
 800336c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003370:	3402      	adds	r4, #2
 8003372:	9305      	str	r3, [sp, #20]
 8003374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003440 <_svfiprintf_r+0x1fc>
 8003378:	7821      	ldrb	r1, [r4, #0]
 800337a:	2203      	movs	r2, #3
 800337c:	4650      	mov	r0, sl
 800337e:	f7fc ff4f 	bl	8000220 <memchr>
 8003382:	b140      	cbz	r0, 8003396 <_svfiprintf_r+0x152>
 8003384:	2340      	movs	r3, #64	; 0x40
 8003386:	eba0 000a 	sub.w	r0, r0, sl
 800338a:	fa03 f000 	lsl.w	r0, r3, r0
 800338e:	9b04      	ldr	r3, [sp, #16]
 8003390:	4303      	orrs	r3, r0
 8003392:	3401      	adds	r4, #1
 8003394:	9304      	str	r3, [sp, #16]
 8003396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800339a:	4826      	ldr	r0, [pc, #152]	; (8003434 <_svfiprintf_r+0x1f0>)
 800339c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033a0:	2206      	movs	r2, #6
 80033a2:	f7fc ff3d 	bl	8000220 <memchr>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d038      	beq.n	800341c <_svfiprintf_r+0x1d8>
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <_svfiprintf_r+0x1f4>)
 80033ac:	bb1b      	cbnz	r3, 80033f6 <_svfiprintf_r+0x1b2>
 80033ae:	9b03      	ldr	r3, [sp, #12]
 80033b0:	3307      	adds	r3, #7
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	3308      	adds	r3, #8
 80033b8:	9303      	str	r3, [sp, #12]
 80033ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033bc:	4433      	add	r3, r6
 80033be:	9309      	str	r3, [sp, #36]	; 0x24
 80033c0:	e767      	b.n	8003292 <_svfiprintf_r+0x4e>
 80033c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80033c6:	460c      	mov	r4, r1
 80033c8:	2001      	movs	r0, #1
 80033ca:	e7a5      	b.n	8003318 <_svfiprintf_r+0xd4>
 80033cc:	2300      	movs	r3, #0
 80033ce:	3401      	adds	r4, #1
 80033d0:	9305      	str	r3, [sp, #20]
 80033d2:	4619      	mov	r1, r3
 80033d4:	f04f 0c0a 	mov.w	ip, #10
 80033d8:	4620      	mov	r0, r4
 80033da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033de:	3a30      	subs	r2, #48	; 0x30
 80033e0:	2a09      	cmp	r2, #9
 80033e2:	d903      	bls.n	80033ec <_svfiprintf_r+0x1a8>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0c5      	beq.n	8003374 <_svfiprintf_r+0x130>
 80033e8:	9105      	str	r1, [sp, #20]
 80033ea:	e7c3      	b.n	8003374 <_svfiprintf_r+0x130>
 80033ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80033f0:	4604      	mov	r4, r0
 80033f2:	2301      	movs	r3, #1
 80033f4:	e7f0      	b.n	80033d8 <_svfiprintf_r+0x194>
 80033f6:	ab03      	add	r3, sp, #12
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	462a      	mov	r2, r5
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <_svfiprintf_r+0x1f8>)
 80033fe:	a904      	add	r1, sp, #16
 8003400:	4638      	mov	r0, r7
 8003402:	f3af 8000 	nop.w
 8003406:	1c42      	adds	r2, r0, #1
 8003408:	4606      	mov	r6, r0
 800340a:	d1d6      	bne.n	80033ba <_svfiprintf_r+0x176>
 800340c:	89ab      	ldrh	r3, [r5, #12]
 800340e:	065b      	lsls	r3, r3, #25
 8003410:	f53f af2c 	bmi.w	800326c <_svfiprintf_r+0x28>
 8003414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003416:	b01d      	add	sp, #116	; 0x74
 8003418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341c:	ab03      	add	r3, sp, #12
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	462a      	mov	r2, r5
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <_svfiprintf_r+0x1f8>)
 8003424:	a904      	add	r1, sp, #16
 8003426:	4638      	mov	r0, r7
 8003428:	f000 f87a 	bl	8003520 <_printf_i>
 800342c:	e7eb      	b.n	8003406 <_svfiprintf_r+0x1c2>
 800342e:	bf00      	nop
 8003430:	08003f95 	.word	0x08003f95
 8003434:	08003f9f 	.word	0x08003f9f
 8003438:	00000000 	.word	0x00000000
 800343c:	0800318d 	.word	0x0800318d
 8003440:	08003f9b 	.word	0x08003f9b

08003444 <_printf_common>:
 8003444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003448:	4616      	mov	r6, r2
 800344a:	4699      	mov	r9, r3
 800344c:	688a      	ldr	r2, [r1, #8]
 800344e:	690b      	ldr	r3, [r1, #16]
 8003450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003454:	4293      	cmp	r3, r2
 8003456:	bfb8      	it	lt
 8003458:	4613      	movlt	r3, r2
 800345a:	6033      	str	r3, [r6, #0]
 800345c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003460:	4607      	mov	r7, r0
 8003462:	460c      	mov	r4, r1
 8003464:	b10a      	cbz	r2, 800346a <_printf_common+0x26>
 8003466:	3301      	adds	r3, #1
 8003468:	6033      	str	r3, [r6, #0]
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	0699      	lsls	r1, r3, #26
 800346e:	bf42      	ittt	mi
 8003470:	6833      	ldrmi	r3, [r6, #0]
 8003472:	3302      	addmi	r3, #2
 8003474:	6033      	strmi	r3, [r6, #0]
 8003476:	6825      	ldr	r5, [r4, #0]
 8003478:	f015 0506 	ands.w	r5, r5, #6
 800347c:	d106      	bne.n	800348c <_printf_common+0x48>
 800347e:	f104 0a19 	add.w	sl, r4, #25
 8003482:	68e3      	ldr	r3, [r4, #12]
 8003484:	6832      	ldr	r2, [r6, #0]
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	42ab      	cmp	r3, r5
 800348a:	dc26      	bgt.n	80034da <_printf_common+0x96>
 800348c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003490:	1e13      	subs	r3, r2, #0
 8003492:	6822      	ldr	r2, [r4, #0]
 8003494:	bf18      	it	ne
 8003496:	2301      	movne	r3, #1
 8003498:	0692      	lsls	r2, r2, #26
 800349a:	d42b      	bmi.n	80034f4 <_printf_common+0xb0>
 800349c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034a0:	4649      	mov	r1, r9
 80034a2:	4638      	mov	r0, r7
 80034a4:	47c0      	blx	r8
 80034a6:	3001      	adds	r0, #1
 80034a8:	d01e      	beq.n	80034e8 <_printf_common+0xa4>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	68e5      	ldr	r5, [r4, #12]
 80034ae:	6832      	ldr	r2, [r6, #0]
 80034b0:	f003 0306 	and.w	r3, r3, #6
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	bf08      	it	eq
 80034b8:	1aad      	subeq	r5, r5, r2
 80034ba:	68a3      	ldr	r3, [r4, #8]
 80034bc:	6922      	ldr	r2, [r4, #16]
 80034be:	bf0c      	ite	eq
 80034c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034c4:	2500      	movne	r5, #0
 80034c6:	4293      	cmp	r3, r2
 80034c8:	bfc4      	itt	gt
 80034ca:	1a9b      	subgt	r3, r3, r2
 80034cc:	18ed      	addgt	r5, r5, r3
 80034ce:	2600      	movs	r6, #0
 80034d0:	341a      	adds	r4, #26
 80034d2:	42b5      	cmp	r5, r6
 80034d4:	d11a      	bne.n	800350c <_printf_common+0xc8>
 80034d6:	2000      	movs	r0, #0
 80034d8:	e008      	b.n	80034ec <_printf_common+0xa8>
 80034da:	2301      	movs	r3, #1
 80034dc:	4652      	mov	r2, sl
 80034de:	4649      	mov	r1, r9
 80034e0:	4638      	mov	r0, r7
 80034e2:	47c0      	blx	r8
 80034e4:	3001      	adds	r0, #1
 80034e6:	d103      	bne.n	80034f0 <_printf_common+0xac>
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f0:	3501      	adds	r5, #1
 80034f2:	e7c6      	b.n	8003482 <_printf_common+0x3e>
 80034f4:	18e1      	adds	r1, r4, r3
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	2030      	movs	r0, #48	; 0x30
 80034fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034fe:	4422      	add	r2, r4
 8003500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003508:	3302      	adds	r3, #2
 800350a:	e7c7      	b.n	800349c <_printf_common+0x58>
 800350c:	2301      	movs	r3, #1
 800350e:	4622      	mov	r2, r4
 8003510:	4649      	mov	r1, r9
 8003512:	4638      	mov	r0, r7
 8003514:	47c0      	blx	r8
 8003516:	3001      	adds	r0, #1
 8003518:	d0e6      	beq.n	80034e8 <_printf_common+0xa4>
 800351a:	3601      	adds	r6, #1
 800351c:	e7d9      	b.n	80034d2 <_printf_common+0x8e>
	...

08003520 <_printf_i>:
 8003520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003524:	460c      	mov	r4, r1
 8003526:	4691      	mov	r9, r2
 8003528:	7e27      	ldrb	r7, [r4, #24]
 800352a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800352c:	2f78      	cmp	r7, #120	; 0x78
 800352e:	4680      	mov	r8, r0
 8003530:	469a      	mov	sl, r3
 8003532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003536:	d807      	bhi.n	8003548 <_printf_i+0x28>
 8003538:	2f62      	cmp	r7, #98	; 0x62
 800353a:	d80a      	bhi.n	8003552 <_printf_i+0x32>
 800353c:	2f00      	cmp	r7, #0
 800353e:	f000 80d8 	beq.w	80036f2 <_printf_i+0x1d2>
 8003542:	2f58      	cmp	r7, #88	; 0x58
 8003544:	f000 80a3 	beq.w	800368e <_printf_i+0x16e>
 8003548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800354c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003550:	e03a      	b.n	80035c8 <_printf_i+0xa8>
 8003552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003556:	2b15      	cmp	r3, #21
 8003558:	d8f6      	bhi.n	8003548 <_printf_i+0x28>
 800355a:	a001      	add	r0, pc, #4	; (adr r0, 8003560 <_printf_i+0x40>)
 800355c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003560:	080035b9 	.word	0x080035b9
 8003564:	080035cd 	.word	0x080035cd
 8003568:	08003549 	.word	0x08003549
 800356c:	08003549 	.word	0x08003549
 8003570:	08003549 	.word	0x08003549
 8003574:	08003549 	.word	0x08003549
 8003578:	080035cd 	.word	0x080035cd
 800357c:	08003549 	.word	0x08003549
 8003580:	08003549 	.word	0x08003549
 8003584:	08003549 	.word	0x08003549
 8003588:	08003549 	.word	0x08003549
 800358c:	080036d9 	.word	0x080036d9
 8003590:	080035fd 	.word	0x080035fd
 8003594:	080036bb 	.word	0x080036bb
 8003598:	08003549 	.word	0x08003549
 800359c:	08003549 	.word	0x08003549
 80035a0:	080036fb 	.word	0x080036fb
 80035a4:	08003549 	.word	0x08003549
 80035a8:	080035fd 	.word	0x080035fd
 80035ac:	08003549 	.word	0x08003549
 80035b0:	08003549 	.word	0x08003549
 80035b4:	080036c3 	.word	0x080036c3
 80035b8:	680b      	ldr	r3, [r1, #0]
 80035ba:	1d1a      	adds	r2, r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	600a      	str	r2, [r1, #0]
 80035c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0a3      	b.n	8003714 <_printf_i+0x1f4>
 80035cc:	6825      	ldr	r5, [r4, #0]
 80035ce:	6808      	ldr	r0, [r1, #0]
 80035d0:	062e      	lsls	r6, r5, #24
 80035d2:	f100 0304 	add.w	r3, r0, #4
 80035d6:	d50a      	bpl.n	80035ee <_printf_i+0xce>
 80035d8:	6805      	ldr	r5, [r0, #0]
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	2d00      	cmp	r5, #0
 80035de:	da03      	bge.n	80035e8 <_printf_i+0xc8>
 80035e0:	232d      	movs	r3, #45	; 0x2d
 80035e2:	426d      	negs	r5, r5
 80035e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e8:	485e      	ldr	r0, [pc, #376]	; (8003764 <_printf_i+0x244>)
 80035ea:	230a      	movs	r3, #10
 80035ec:	e019      	b.n	8003622 <_printf_i+0x102>
 80035ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035f2:	6805      	ldr	r5, [r0, #0]
 80035f4:	600b      	str	r3, [r1, #0]
 80035f6:	bf18      	it	ne
 80035f8:	b22d      	sxthne	r5, r5
 80035fa:	e7ef      	b.n	80035dc <_printf_i+0xbc>
 80035fc:	680b      	ldr	r3, [r1, #0]
 80035fe:	6825      	ldr	r5, [r4, #0]
 8003600:	1d18      	adds	r0, r3, #4
 8003602:	6008      	str	r0, [r1, #0]
 8003604:	0628      	lsls	r0, r5, #24
 8003606:	d501      	bpl.n	800360c <_printf_i+0xec>
 8003608:	681d      	ldr	r5, [r3, #0]
 800360a:	e002      	b.n	8003612 <_printf_i+0xf2>
 800360c:	0669      	lsls	r1, r5, #25
 800360e:	d5fb      	bpl.n	8003608 <_printf_i+0xe8>
 8003610:	881d      	ldrh	r5, [r3, #0]
 8003612:	4854      	ldr	r0, [pc, #336]	; (8003764 <_printf_i+0x244>)
 8003614:	2f6f      	cmp	r7, #111	; 0x6f
 8003616:	bf0c      	ite	eq
 8003618:	2308      	moveq	r3, #8
 800361a:	230a      	movne	r3, #10
 800361c:	2100      	movs	r1, #0
 800361e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003622:	6866      	ldr	r6, [r4, #4]
 8003624:	60a6      	str	r6, [r4, #8]
 8003626:	2e00      	cmp	r6, #0
 8003628:	bfa2      	ittt	ge
 800362a:	6821      	ldrge	r1, [r4, #0]
 800362c:	f021 0104 	bicge.w	r1, r1, #4
 8003630:	6021      	strge	r1, [r4, #0]
 8003632:	b90d      	cbnz	r5, 8003638 <_printf_i+0x118>
 8003634:	2e00      	cmp	r6, #0
 8003636:	d04d      	beq.n	80036d4 <_printf_i+0x1b4>
 8003638:	4616      	mov	r6, r2
 800363a:	fbb5 f1f3 	udiv	r1, r5, r3
 800363e:	fb03 5711 	mls	r7, r3, r1, r5
 8003642:	5dc7      	ldrb	r7, [r0, r7]
 8003644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003648:	462f      	mov	r7, r5
 800364a:	42bb      	cmp	r3, r7
 800364c:	460d      	mov	r5, r1
 800364e:	d9f4      	bls.n	800363a <_printf_i+0x11a>
 8003650:	2b08      	cmp	r3, #8
 8003652:	d10b      	bne.n	800366c <_printf_i+0x14c>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	07df      	lsls	r7, r3, #31
 8003658:	d508      	bpl.n	800366c <_printf_i+0x14c>
 800365a:	6923      	ldr	r3, [r4, #16]
 800365c:	6861      	ldr	r1, [r4, #4]
 800365e:	4299      	cmp	r1, r3
 8003660:	bfde      	ittt	le
 8003662:	2330      	movle	r3, #48	; 0x30
 8003664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003668:	f106 36ff 	addle.w	r6, r6, #4294967295
 800366c:	1b92      	subs	r2, r2, r6
 800366e:	6122      	str	r2, [r4, #16]
 8003670:	f8cd a000 	str.w	sl, [sp]
 8003674:	464b      	mov	r3, r9
 8003676:	aa03      	add	r2, sp, #12
 8003678:	4621      	mov	r1, r4
 800367a:	4640      	mov	r0, r8
 800367c:	f7ff fee2 	bl	8003444 <_printf_common>
 8003680:	3001      	adds	r0, #1
 8003682:	d14c      	bne.n	800371e <_printf_i+0x1fe>
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	b004      	add	sp, #16
 800368a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368e:	4835      	ldr	r0, [pc, #212]	; (8003764 <_printf_i+0x244>)
 8003690:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	680e      	ldr	r6, [r1, #0]
 8003698:	061f      	lsls	r7, r3, #24
 800369a:	f856 5b04 	ldr.w	r5, [r6], #4
 800369e:	600e      	str	r6, [r1, #0]
 80036a0:	d514      	bpl.n	80036cc <_printf_i+0x1ac>
 80036a2:	07d9      	lsls	r1, r3, #31
 80036a4:	bf44      	itt	mi
 80036a6:	f043 0320 	orrmi.w	r3, r3, #32
 80036aa:	6023      	strmi	r3, [r4, #0]
 80036ac:	b91d      	cbnz	r5, 80036b6 <_printf_i+0x196>
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	f023 0320 	bic.w	r3, r3, #32
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	2310      	movs	r3, #16
 80036b8:	e7b0      	b.n	800361c <_printf_i+0xfc>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	f043 0320 	orr.w	r3, r3, #32
 80036c0:	6023      	str	r3, [r4, #0]
 80036c2:	2378      	movs	r3, #120	; 0x78
 80036c4:	4828      	ldr	r0, [pc, #160]	; (8003768 <_printf_i+0x248>)
 80036c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036ca:	e7e3      	b.n	8003694 <_printf_i+0x174>
 80036cc:	065e      	lsls	r6, r3, #25
 80036ce:	bf48      	it	mi
 80036d0:	b2ad      	uxthmi	r5, r5
 80036d2:	e7e6      	b.n	80036a2 <_printf_i+0x182>
 80036d4:	4616      	mov	r6, r2
 80036d6:	e7bb      	b.n	8003650 <_printf_i+0x130>
 80036d8:	680b      	ldr	r3, [r1, #0]
 80036da:	6826      	ldr	r6, [r4, #0]
 80036dc:	6960      	ldr	r0, [r4, #20]
 80036de:	1d1d      	adds	r5, r3, #4
 80036e0:	600d      	str	r5, [r1, #0]
 80036e2:	0635      	lsls	r5, r6, #24
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	d501      	bpl.n	80036ec <_printf_i+0x1cc>
 80036e8:	6018      	str	r0, [r3, #0]
 80036ea:	e002      	b.n	80036f2 <_printf_i+0x1d2>
 80036ec:	0671      	lsls	r1, r6, #25
 80036ee:	d5fb      	bpl.n	80036e8 <_printf_i+0x1c8>
 80036f0:	8018      	strh	r0, [r3, #0]
 80036f2:	2300      	movs	r3, #0
 80036f4:	6123      	str	r3, [r4, #16]
 80036f6:	4616      	mov	r6, r2
 80036f8:	e7ba      	b.n	8003670 <_printf_i+0x150>
 80036fa:	680b      	ldr	r3, [r1, #0]
 80036fc:	1d1a      	adds	r2, r3, #4
 80036fe:	600a      	str	r2, [r1, #0]
 8003700:	681e      	ldr	r6, [r3, #0]
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	2100      	movs	r1, #0
 8003706:	4630      	mov	r0, r6
 8003708:	f7fc fd8a 	bl	8000220 <memchr>
 800370c:	b108      	cbz	r0, 8003712 <_printf_i+0x1f2>
 800370e:	1b80      	subs	r0, r0, r6
 8003710:	6060      	str	r0, [r4, #4]
 8003712:	6863      	ldr	r3, [r4, #4]
 8003714:	6123      	str	r3, [r4, #16]
 8003716:	2300      	movs	r3, #0
 8003718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800371c:	e7a8      	b.n	8003670 <_printf_i+0x150>
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	4632      	mov	r2, r6
 8003722:	4649      	mov	r1, r9
 8003724:	4640      	mov	r0, r8
 8003726:	47d0      	blx	sl
 8003728:	3001      	adds	r0, #1
 800372a:	d0ab      	beq.n	8003684 <_printf_i+0x164>
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	079b      	lsls	r3, r3, #30
 8003730:	d413      	bmi.n	800375a <_printf_i+0x23a>
 8003732:	68e0      	ldr	r0, [r4, #12]
 8003734:	9b03      	ldr	r3, [sp, #12]
 8003736:	4298      	cmp	r0, r3
 8003738:	bfb8      	it	lt
 800373a:	4618      	movlt	r0, r3
 800373c:	e7a4      	b.n	8003688 <_printf_i+0x168>
 800373e:	2301      	movs	r3, #1
 8003740:	4632      	mov	r2, r6
 8003742:	4649      	mov	r1, r9
 8003744:	4640      	mov	r0, r8
 8003746:	47d0      	blx	sl
 8003748:	3001      	adds	r0, #1
 800374a:	d09b      	beq.n	8003684 <_printf_i+0x164>
 800374c:	3501      	adds	r5, #1
 800374e:	68e3      	ldr	r3, [r4, #12]
 8003750:	9903      	ldr	r1, [sp, #12]
 8003752:	1a5b      	subs	r3, r3, r1
 8003754:	42ab      	cmp	r3, r5
 8003756:	dcf2      	bgt.n	800373e <_printf_i+0x21e>
 8003758:	e7eb      	b.n	8003732 <_printf_i+0x212>
 800375a:	2500      	movs	r5, #0
 800375c:	f104 0619 	add.w	r6, r4, #25
 8003760:	e7f5      	b.n	800374e <_printf_i+0x22e>
 8003762:	bf00      	nop
 8003764:	08003fa6 	.word	0x08003fa6
 8003768:	08003fb7 	.word	0x08003fb7

0800376c <memcpy>:
 800376c:	440a      	add	r2, r1
 800376e:	4291      	cmp	r1, r2
 8003770:	f100 33ff 	add.w	r3, r0, #4294967295
 8003774:	d100      	bne.n	8003778 <memcpy+0xc>
 8003776:	4770      	bx	lr
 8003778:	b510      	push	{r4, lr}
 800377a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800377e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003782:	4291      	cmp	r1, r2
 8003784:	d1f9      	bne.n	800377a <memcpy+0xe>
 8003786:	bd10      	pop	{r4, pc}

08003788 <memmove>:
 8003788:	4288      	cmp	r0, r1
 800378a:	b510      	push	{r4, lr}
 800378c:	eb01 0402 	add.w	r4, r1, r2
 8003790:	d902      	bls.n	8003798 <memmove+0x10>
 8003792:	4284      	cmp	r4, r0
 8003794:	4623      	mov	r3, r4
 8003796:	d807      	bhi.n	80037a8 <memmove+0x20>
 8003798:	1e43      	subs	r3, r0, #1
 800379a:	42a1      	cmp	r1, r4
 800379c:	d008      	beq.n	80037b0 <memmove+0x28>
 800379e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037a6:	e7f8      	b.n	800379a <memmove+0x12>
 80037a8:	4402      	add	r2, r0
 80037aa:	4601      	mov	r1, r0
 80037ac:	428a      	cmp	r2, r1
 80037ae:	d100      	bne.n	80037b2 <memmove+0x2a>
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037ba:	e7f7      	b.n	80037ac <memmove+0x24>

080037bc <_free_r>:
 80037bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037be:	2900      	cmp	r1, #0
 80037c0:	d048      	beq.n	8003854 <_free_r+0x98>
 80037c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c6:	9001      	str	r0, [sp, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f1a1 0404 	sub.w	r4, r1, #4
 80037ce:	bfb8      	it	lt
 80037d0:	18e4      	addlt	r4, r4, r3
 80037d2:	f000 f8d3 	bl	800397c <__malloc_lock>
 80037d6:	4a20      	ldr	r2, [pc, #128]	; (8003858 <_free_r+0x9c>)
 80037d8:	9801      	ldr	r0, [sp, #4]
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	4615      	mov	r5, r2
 80037de:	b933      	cbnz	r3, 80037ee <_free_r+0x32>
 80037e0:	6063      	str	r3, [r4, #4]
 80037e2:	6014      	str	r4, [r2, #0]
 80037e4:	b003      	add	sp, #12
 80037e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037ea:	f000 b8cd 	b.w	8003988 <__malloc_unlock>
 80037ee:	42a3      	cmp	r3, r4
 80037f0:	d90b      	bls.n	800380a <_free_r+0x4e>
 80037f2:	6821      	ldr	r1, [r4, #0]
 80037f4:	1862      	adds	r2, r4, r1
 80037f6:	4293      	cmp	r3, r2
 80037f8:	bf04      	itt	eq
 80037fa:	681a      	ldreq	r2, [r3, #0]
 80037fc:	685b      	ldreq	r3, [r3, #4]
 80037fe:	6063      	str	r3, [r4, #4]
 8003800:	bf04      	itt	eq
 8003802:	1852      	addeq	r2, r2, r1
 8003804:	6022      	streq	r2, [r4, #0]
 8003806:	602c      	str	r4, [r5, #0]
 8003808:	e7ec      	b.n	80037e4 <_free_r+0x28>
 800380a:	461a      	mov	r2, r3
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b10b      	cbz	r3, 8003814 <_free_r+0x58>
 8003810:	42a3      	cmp	r3, r4
 8003812:	d9fa      	bls.n	800380a <_free_r+0x4e>
 8003814:	6811      	ldr	r1, [r2, #0]
 8003816:	1855      	adds	r5, r2, r1
 8003818:	42a5      	cmp	r5, r4
 800381a:	d10b      	bne.n	8003834 <_free_r+0x78>
 800381c:	6824      	ldr	r4, [r4, #0]
 800381e:	4421      	add	r1, r4
 8003820:	1854      	adds	r4, r2, r1
 8003822:	42a3      	cmp	r3, r4
 8003824:	6011      	str	r1, [r2, #0]
 8003826:	d1dd      	bne.n	80037e4 <_free_r+0x28>
 8003828:	681c      	ldr	r4, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	6053      	str	r3, [r2, #4]
 800382e:	4421      	add	r1, r4
 8003830:	6011      	str	r1, [r2, #0]
 8003832:	e7d7      	b.n	80037e4 <_free_r+0x28>
 8003834:	d902      	bls.n	800383c <_free_r+0x80>
 8003836:	230c      	movs	r3, #12
 8003838:	6003      	str	r3, [r0, #0]
 800383a:	e7d3      	b.n	80037e4 <_free_r+0x28>
 800383c:	6825      	ldr	r5, [r4, #0]
 800383e:	1961      	adds	r1, r4, r5
 8003840:	428b      	cmp	r3, r1
 8003842:	bf04      	itt	eq
 8003844:	6819      	ldreq	r1, [r3, #0]
 8003846:	685b      	ldreq	r3, [r3, #4]
 8003848:	6063      	str	r3, [r4, #4]
 800384a:	bf04      	itt	eq
 800384c:	1949      	addeq	r1, r1, r5
 800384e:	6021      	streq	r1, [r4, #0]
 8003850:	6054      	str	r4, [r2, #4]
 8003852:	e7c7      	b.n	80037e4 <_free_r+0x28>
 8003854:	b003      	add	sp, #12
 8003856:	bd30      	pop	{r4, r5, pc}
 8003858:	200000a8 	.word	0x200000a8

0800385c <_malloc_r>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	1ccd      	adds	r5, r1, #3
 8003860:	f025 0503 	bic.w	r5, r5, #3
 8003864:	3508      	adds	r5, #8
 8003866:	2d0c      	cmp	r5, #12
 8003868:	bf38      	it	cc
 800386a:	250c      	movcc	r5, #12
 800386c:	2d00      	cmp	r5, #0
 800386e:	4606      	mov	r6, r0
 8003870:	db01      	blt.n	8003876 <_malloc_r+0x1a>
 8003872:	42a9      	cmp	r1, r5
 8003874:	d903      	bls.n	800387e <_malloc_r+0x22>
 8003876:	230c      	movs	r3, #12
 8003878:	6033      	str	r3, [r6, #0]
 800387a:	2000      	movs	r0, #0
 800387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800387e:	f000 f87d 	bl	800397c <__malloc_lock>
 8003882:	4921      	ldr	r1, [pc, #132]	; (8003908 <_malloc_r+0xac>)
 8003884:	680a      	ldr	r2, [r1, #0]
 8003886:	4614      	mov	r4, r2
 8003888:	b99c      	cbnz	r4, 80038b2 <_malloc_r+0x56>
 800388a:	4f20      	ldr	r7, [pc, #128]	; (800390c <_malloc_r+0xb0>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b923      	cbnz	r3, 800389a <_malloc_r+0x3e>
 8003890:	4621      	mov	r1, r4
 8003892:	4630      	mov	r0, r6
 8003894:	f000 f862 	bl	800395c <_sbrk_r>
 8003898:	6038      	str	r0, [r7, #0]
 800389a:	4629      	mov	r1, r5
 800389c:	4630      	mov	r0, r6
 800389e:	f000 f85d 	bl	800395c <_sbrk_r>
 80038a2:	1c43      	adds	r3, r0, #1
 80038a4:	d123      	bne.n	80038ee <_malloc_r+0x92>
 80038a6:	230c      	movs	r3, #12
 80038a8:	6033      	str	r3, [r6, #0]
 80038aa:	4630      	mov	r0, r6
 80038ac:	f000 f86c 	bl	8003988 <__malloc_unlock>
 80038b0:	e7e3      	b.n	800387a <_malloc_r+0x1e>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	1b5b      	subs	r3, r3, r5
 80038b6:	d417      	bmi.n	80038e8 <_malloc_r+0x8c>
 80038b8:	2b0b      	cmp	r3, #11
 80038ba:	d903      	bls.n	80038c4 <_malloc_r+0x68>
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	441c      	add	r4, r3
 80038c0:	6025      	str	r5, [r4, #0]
 80038c2:	e004      	b.n	80038ce <_malloc_r+0x72>
 80038c4:	6863      	ldr	r3, [r4, #4]
 80038c6:	42a2      	cmp	r2, r4
 80038c8:	bf0c      	ite	eq
 80038ca:	600b      	streq	r3, [r1, #0]
 80038cc:	6053      	strne	r3, [r2, #4]
 80038ce:	4630      	mov	r0, r6
 80038d0:	f000 f85a 	bl	8003988 <__malloc_unlock>
 80038d4:	f104 000b 	add.w	r0, r4, #11
 80038d8:	1d23      	adds	r3, r4, #4
 80038da:	f020 0007 	bic.w	r0, r0, #7
 80038de:	1ac2      	subs	r2, r0, r3
 80038e0:	d0cc      	beq.n	800387c <_malloc_r+0x20>
 80038e2:	1a1b      	subs	r3, r3, r0
 80038e4:	50a3      	str	r3, [r4, r2]
 80038e6:	e7c9      	b.n	800387c <_malloc_r+0x20>
 80038e8:	4622      	mov	r2, r4
 80038ea:	6864      	ldr	r4, [r4, #4]
 80038ec:	e7cc      	b.n	8003888 <_malloc_r+0x2c>
 80038ee:	1cc4      	adds	r4, r0, #3
 80038f0:	f024 0403 	bic.w	r4, r4, #3
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d0e3      	beq.n	80038c0 <_malloc_r+0x64>
 80038f8:	1a21      	subs	r1, r4, r0
 80038fa:	4630      	mov	r0, r6
 80038fc:	f000 f82e 	bl	800395c <_sbrk_r>
 8003900:	3001      	adds	r0, #1
 8003902:	d1dd      	bne.n	80038c0 <_malloc_r+0x64>
 8003904:	e7cf      	b.n	80038a6 <_malloc_r+0x4a>
 8003906:	bf00      	nop
 8003908:	200000a8 	.word	0x200000a8
 800390c:	200000ac 	.word	0x200000ac

08003910 <_realloc_r>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	4607      	mov	r7, r0
 8003914:	4614      	mov	r4, r2
 8003916:	460e      	mov	r6, r1
 8003918:	b921      	cbnz	r1, 8003924 <_realloc_r+0x14>
 800391a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800391e:	4611      	mov	r1, r2
 8003920:	f7ff bf9c 	b.w	800385c <_malloc_r>
 8003924:	b922      	cbnz	r2, 8003930 <_realloc_r+0x20>
 8003926:	f7ff ff49 	bl	80037bc <_free_r>
 800392a:	4625      	mov	r5, r4
 800392c:	4628      	mov	r0, r5
 800392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003930:	f000 f830 	bl	8003994 <_malloc_usable_size_r>
 8003934:	42a0      	cmp	r0, r4
 8003936:	d20f      	bcs.n	8003958 <_realloc_r+0x48>
 8003938:	4621      	mov	r1, r4
 800393a:	4638      	mov	r0, r7
 800393c:	f7ff ff8e 	bl	800385c <_malloc_r>
 8003940:	4605      	mov	r5, r0
 8003942:	2800      	cmp	r0, #0
 8003944:	d0f2      	beq.n	800392c <_realloc_r+0x1c>
 8003946:	4631      	mov	r1, r6
 8003948:	4622      	mov	r2, r4
 800394a:	f7ff ff0f 	bl	800376c <memcpy>
 800394e:	4631      	mov	r1, r6
 8003950:	4638      	mov	r0, r7
 8003952:	f7ff ff33 	bl	80037bc <_free_r>
 8003956:	e7e9      	b.n	800392c <_realloc_r+0x1c>
 8003958:	4635      	mov	r5, r6
 800395a:	e7e7      	b.n	800392c <_realloc_r+0x1c>

0800395c <_sbrk_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	4d06      	ldr	r5, [pc, #24]	; (8003978 <_sbrk_r+0x1c>)
 8003960:	2300      	movs	r3, #0
 8003962:	4604      	mov	r4, r0
 8003964:	4608      	mov	r0, r1
 8003966:	602b      	str	r3, [r5, #0]
 8003968:	f7fd fb56 	bl	8001018 <_sbrk>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d102      	bne.n	8003976 <_sbrk_r+0x1a>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	b103      	cbz	r3, 8003976 <_sbrk_r+0x1a>
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	2000022c 	.word	0x2000022c

0800397c <__malloc_lock>:
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <__malloc_lock+0x8>)
 800397e:	f000 b811 	b.w	80039a4 <__retarget_lock_acquire_recursive>
 8003982:	bf00      	nop
 8003984:	20000234 	.word	0x20000234

08003988 <__malloc_unlock>:
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <__malloc_unlock+0x8>)
 800398a:	f000 b80c 	b.w	80039a6 <__retarget_lock_release_recursive>
 800398e:	bf00      	nop
 8003990:	20000234 	.word	0x20000234

08003994 <_malloc_usable_size_r>:
 8003994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003998:	1f18      	subs	r0, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	bfbc      	itt	lt
 800399e:	580b      	ldrlt	r3, [r1, r0]
 80039a0:	18c0      	addlt	r0, r0, r3
 80039a2:	4770      	bx	lr

080039a4 <__retarget_lock_acquire_recursive>:
 80039a4:	4770      	bx	lr

080039a6 <__retarget_lock_release_recursive>:
 80039a6:	4770      	bx	lr

080039a8 <_init>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr

080039b4 <_fini>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr

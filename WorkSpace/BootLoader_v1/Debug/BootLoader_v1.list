
BootLoader_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab4  08003ab4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003abc  08003abc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08003b34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003b34  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6d7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed5  00000000  00000000  0002b777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0002d650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bed  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ace5  00000000  00000000  0004f25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c71d1  00000000  00000000  00059f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121113  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002504  00000000  00000000  00121168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003560 	.word	0x08003560

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003560 	.word	0x08003560

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <verify_address>:
/**
  * @brief  verifies the address
  * @retval bool
  */
bool verify_address(uint32_t goto_address)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if( (goto_address >= SRAM1_BASE)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005c6:	d305      	bcc.n	80005d4 <verify_address+0x1c>
			&& (goto_address <= SRAM1_END) )
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <verify_address+0x68>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d801      	bhi.n	80005d4 <verify_address+0x1c>
	{
		/* Address from 0x2000_0000 to 0x2001_BFFF whose size is 112KB*/
		return ADDR_VALID;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e01e      	b.n	8000612 <verify_address+0x5a>
	}
	else if( (goto_address >= SRAM2_BASE)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <verify_address+0x68>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d305      	bcc.n	80005e8 <verify_address+0x30>
				&& (goto_address <= SRAM2_END) )
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <verify_address+0x6c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d801      	bhi.n	80005e8 <verify_address+0x30>
	{
		/* Address from 0x2001_C000 to 0x2001_FFFF whose size is 16KB*/
		return ADDR_VALID;
 80005e4:	2300      	movs	r3, #0
 80005e6:	e014      	b.n	8000612 <verify_address+0x5a>
	}
	else if( (goto_address >= FLASH_BASE)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005ee:	d305      	bcc.n	80005fc <verify_address+0x44>
				&& (goto_address <= FLASH_END) )
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <verify_address+0x70>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d801      	bhi.n	80005fc <verify_address+0x44>
	{
		/* Address from 0x08000000UL to 0x0807FFFFUL whose size is 512KB*/
		return ADDR_VALID;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e00a      	b.n	8000612 <verify_address+0x5a>
	}
	else if( (goto_address >= BKPSRAM_BASE)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <verify_address+0x74>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d305      	bcc.n	8000610 <verify_address+0x58>
				&& (goto_address <= BKP_SRAM_END) )
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <verify_address+0x78>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d801      	bhi.n	8000610 <verify_address+0x58>
	{
		/* Address from 0x4248_0000 to 0x4248_4090 whose size is 4KB*/
		return ADDR_VALID;
 800060c:	2300      	movs	r3, #0
 800060e:	e000      	b.n	8000612 <verify_address+0x5a>
	}
	else
	{
		return ADDR_INVALID;
 8000610:	2301      	movs	r3, #1
	}
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	2001c000 	.word	0x2001c000
 8000624:	20020000 	.word	0x20020000
 8000628:	0807ffff 	.word	0x0807ffff
 800062c:	40024000 	.word	0x40024000
 8000630:	40025000 	.word	0x40025000

08000634 <process_bootloader_command>:
/**
  * @brief  Process the Bootloader commands and calls the respective function
  * @retval None
  */
void process_bootloader_command(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
   char     *CmdString;
   uint32_t commandLen = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
   uint32_t argc = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
   bool NextArg = ( bool )true;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
   bool isTaskCompleted = TASK_PENDING;
 8000646:	2301      	movs	r3, #1
 8000648:	70fb      	strb	r3, [r7, #3]
   uint16_t i;
   cmdTable_t const * CmdEntry;

   CmdString = &bootRxBuf[0];
 800064a:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <process_bootloader_command+0xd4>)
 800064c:	617b      	str	r3, [r7, #20]

   while ( *CmdString != 0 )
 800064e:	e01c      	b.n	800068a <process_bootloader_command+0x56>
   {
      if ( *CmdString == ' ' )
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b20      	cmp	r3, #32
 8000656:	d105      	bne.n	8000664 <process_bootloader_command+0x30>
      {
         *CmdString = 0;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
         NextArg = ( bool )true;
 800065e:	2301      	movs	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	e00f      	b.n	8000684 <process_bootloader_command+0x50>
      } /* end if() */
      else if ( NextArg )
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00c      	beq.n	8000684 <process_bootloader_command+0x50>
      {
         if ( argc < MAX_CMDLINE_ARGS )
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	2b04      	cmp	r3, #4
 800066e:	d811      	bhi.n	8000694 <process_bootloader_command+0x60>
         {
            argvar[argc] = CmdString;
 8000670:	4926      	ldr	r1, [pc, #152]	; (800070c <process_bootloader_command+0xd8>)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            argc++;
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	3301      	adds	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
            NextArg = ( bool )false;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
      } /* end if() */
 	 else
 	 {
 		 /* Do Nothing */
 	 }
      CmdString++;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
   while ( *CmdString != 0 )
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1de      	bne.n	8000650 <process_bootloader_command+0x1c>
 8000692:	e000      	b.n	8000696 <process_bootloader_command+0x62>
            break;
 8000694:	bf00      	nop
   } /* end while() */

   if ( argc > 0 )
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d031      	beq.n	8000700 <process_bootloader_command+0xcc>
   {
      CmdEntry = bootCmdTable;
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <process_bootloader_command+0xdc>)
 800069e:	60bb      	str	r3, [r7, #8]

      while ( CmdEntry->pfunCmd != 0 )
 80006a0:	e01e      	b.n	80006e0 <process_bootloader_command+0xac>
      {
         if ( !strcasecmp( argvar[0], CmdEntry->pCmdName ) )
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <process_bootloader_command+0xd8>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4610      	mov	r0, r2
 80006ae:	f002 fa7f 	bl	8002bb0 <strcasecmp>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d110      	bne.n	80006da <process_bootloader_command+0xa6>
         {
            /* This is the line of code that is actually calling the handler function
               for the command that was received */
        	 isTaskCompleted = CmdEntry->pfunCmd( argc, argvar );
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	4913      	ldr	r1, [pc, #76]	; (800070c <process_bootloader_command+0xd8>)
 80006be:	6938      	ldr	r0, [r7, #16]
 80006c0:	4798      	blx	r3
 80006c2:	4603      	mov	r3, r0
 80006c4:	70fb      	strb	r3, [r7, #3]
        	 if (isTaskCompleted != TASK_COMPLETED)
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00e      	beq.n	80006ea <process_bootloader_command+0xb6>
        	 {
        		 print_msg( "%s comment Failed!\r\n", argvar[0] );
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <process_bootloader_command+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4810      	ldr	r0, [pc, #64]	; (8000714 <process_bootloader_command+0xe0>)
 80006d4:	f000 fa9a 	bl	8000c0c <print_msg>
        	 }
        	 else
        	 {
        		 /* Do Nothing */
        	 }
            break;
 80006d8:	e007      	b.n	80006ea <process_bootloader_command+0xb6>
         } /* end if() */
    	 else
    	 {
    		 /* Do Nothing */
    	 }
         CmdEntry++;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	330c      	adds	r3, #12
 80006de:	60bb      	str	r3, [r7, #8]
      while ( CmdEntry->pfunCmd != 0 )
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1dc      	bne.n	80006a2 <process_bootloader_command+0x6e>
 80006e8:	e000      	b.n	80006ec <process_bootloader_command+0xb8>
            break;
 80006ea:	bf00      	nop
      } /* end while() */

      if ( CmdEntry->pCmdName == 0 )
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d105      	bne.n	8000700 <process_bootloader_command+0xcc>
      {
            /* We reached the end of the list and did not find a valid command */
    	  	print_msg( "%s is not a valid command!\r\n", argvar[0] );
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <process_bootloader_command+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <process_bootloader_command+0xe4>)
 80006fc:	f000 fa86 	bl	8000c0c <print_msg>
   } /* end if() */
	 else
	 {
		 /* Do Nothing */
	 }
} /* end process_bootloader_command() */
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000b0 	.word	0x200000b0
 800070c:	2000008c 	.word	0x2000008c
 8000710:	08003908 	.word	0x08003908
 8000714:	08003690 	.word	0x08003690
 8000718:	080036a8 	.word	0x080036a8

0800071c <get_boot_ver>:
/**
  * @brief  Prints the Bootloader version
  * @retval Bool
  */
bool get_boot_ver(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	print_msg( "[DBG_MSG]: BOOTLOADER_VERSION: %d\r\n",BOOTLOADER_VERSION );
 8000720:	2101      	movs	r1, #1
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <get_boot_ver+0x14>)
 8000724:	f000 fa72 	bl	8000c0c <print_msg>
	return TASK_COMPLETED;
 8000728:	2300      	movs	r3, #0
}/* end of get_boot_ver */
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	080036c8 	.word	0x080036c8

08000734 <get_mcu_id>:
/**
  * @brief  Prints the MCU's Chip ID
  * @retval Bool
  */
bool get_mcu_id(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	uint16_t chipId;
	chipId = ( uint16_t )((DBGMCU->IDCODE) & 0xffff) ;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <get_mcu_id+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	80fb      	strh	r3, [r7, #6]
	print_msg( "[DBG_MSG]: Chip ID: 0x%x\r\n",chipId );
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <get_mcu_id+0x24>)
 8000746:	f000 fa61 	bl	8000c0c <print_msg>
	return TASK_COMPLETED;
 800074a:	2300      	movs	r3, #0
}/* end of get_mcu_id */
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	e0042000 	.word	0xe0042000
 8000758:	080036ec 	.word	0x080036ec

0800075c <get_flash_status>:
/**
  * @brief  Prints the MCU's Chip ID
  * @retval Bool
  */
bool get_flash_status(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef flashStatus;
	HAL_FLASHEx_OBGetConfig(&flashStatus);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fe68 	bl	800143a <HAL_FLASHEx_OBGetConfig>
	print_msg( "[DBG_MSG]: Flash Protection Status: 0x%X\r\n",flashStatus.RDPLevel );
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <get_flash_status+0x24>)
 8000770:	f000 fa4c 	bl	8000c0c <print_msg>
	return TASK_COMPLETED;
 8000774:	2300      	movs	r3, #0
}/* end of get_flash_status */
 8000776:	4618      	mov	r0, r3
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08003708 	.word	0x08003708

08000784 <jump_to_address>:
/**
  * @brief  jump_to_address
  * @retval Bool
  */
bool jump_to_address( uint32_t argc, char *argv[] )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]

	bool returnValue = TASK_PENDING;
 800078e:	2301      	movs	r3, #1
 8000790:	75fb      	strb	r3, [r7, #23]
	bool isAddrValid = ADDR_INVALID;
 8000792:	2301      	movs	r3, #1
 8000794:	75bb      	strb	r3, [r7, #22]
	if ( argc == 2 )
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d12a      	bne.n	80007f2 <jump_to_address+0x6e>
	{
		/* Argument count should be 1 */
//		uint32_t gotoAddress = (uint32_t)atoi(argv[1]);
		uint32_t gotoAddress = ( uint32_t )strtol( argv[1], NULL, 16 );
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	3304      	adds	r3, #4
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2210      	movs	r2, #16
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 faa2 	bl	8002cf0 <strtol>
 80007ac:	4603      	mov	r3, r0
 80007ae:	613b      	str	r3, [r7, #16]
		isAddrValid = verify_address(gotoAddress);
 80007b0:	6938      	ldr	r0, [r7, #16]
 80007b2:	f7ff ff01 	bl	80005b8 <verify_address>
 80007b6:	4603      	mov	r3, r0
 80007b8:	75bb      	strb	r3, [r7, #22]
		if(isAddrValid == ADDR_VALID)
 80007ba:	7dbb      	ldrb	r3, [r7, #22]
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d011      	beq.n	80007ea <jump_to_address+0x66>
		{
			print_msg( "[DBG_MSG]: gotoAddress: 0x%X\r\n",gotoAddress );
 80007c6:	6939      	ldr	r1, [r7, #16]
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <jump_to_address+0x84>)
 80007ca:	f000 fa1f 	bl	8000c0c <print_msg>
			gotoAddress |= 1;
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
			void (*jump_func)(void) = (void *)gotoAddress;
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	60fb      	str	r3, [r7, #12]
			print_msg( "[DBG_MSG]: Performing Jump\r\n" );
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <jump_to_address+0x88>)
 80007dc:	f000 fa16 	bl	8000c0c <print_msg>
			// todo jump results in Hard Fault
			jump_func();
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4798      	blx	r3
			returnValue = TASK_COMPLETED;
 80007e4:	2300      	movs	r3, #0
 80007e6:	75fb      	strb	r3, [r7, #23]
 80007e8:	e008      	b.n	80007fc <jump_to_address+0x78>
		}
		else
		{
			print_msg( "[DBG_MSG]: goto-address is invalid\r\n" );
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <jump_to_address+0x8c>)
 80007ec:	f000 fa0e 	bl	8000c0c <print_msg>
 80007f0:	e004      	b.n	80007fc <jump_to_address+0x78>
		}
	}
	else
	{
		print_msg( "[WRG_MSG]: Invalid Argu count. ex: 4jump <Jump to address>\r\n" );
 80007f2:	4808      	ldr	r0, [pc, #32]	; (8000814 <jump_to_address+0x90>)
 80007f4:	f000 fa0a 	bl	8000c0c <print_msg>
		returnValue = TASK_PENDING;
 80007f8:	2301      	movs	r3, #1
 80007fa:	75fb      	strb	r3, [r7, #23]
	}
	return returnValue;
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
}/* end of jump_to_address */
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	08003734 	.word	0x08003734
 800080c:	08003754 	.word	0x08003754
 8000810:	08003774 	.word	0x08003774
 8000814:	0800379c 	.word	0x0800379c

08000818 <erase_sector>:
/**
  * @brief  erase_sector
  * @retval Bool
  */
bool erase_sector( uint32_t argc, char *argv[] )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]

	bool returnValue = TASK_PENDING;
 8000822:	2301      	movs	r3, #1
 8000824:	75fb      	strb	r3, [r7, #23]
	bool isAddrValid = ADDR_INVALID;
 8000826:	2301      	movs	r3, #1
 8000828:	75bb      	strb	r3, [r7, #22]
	if ( argc == 2 )
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d12a      	bne.n	8000886 <erase_sector+0x6e>
	{
		/* Argument count should be 1 */
//		uint32_t gotoAddress = (uint32_t)atoi(argv[1]);
		uint32_t gotoAddress = ( uint32_t )strtol( argv[1], NULL, 16 );
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	3304      	adds	r3, #4
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2210      	movs	r2, #16
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fa58 	bl	8002cf0 <strtol>
 8000840:	4603      	mov	r3, r0
 8000842:	613b      	str	r3, [r7, #16]
		isAddrValid = verify_address(gotoAddress);
 8000844:	6938      	ldr	r0, [r7, #16]
 8000846:	f7ff feb7 	bl	80005b8 <verify_address>
 800084a:	4603      	mov	r3, r0
 800084c:	75bb      	strb	r3, [r7, #22]
		if(isAddrValid == ADDR_VALID)
 800084e:	7dbb      	ldrb	r3, [r7, #22]
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d011      	beq.n	800087e <erase_sector+0x66>
		{
			print_msg( "[DBG_MSG]: gotoAddress: 0x%X\r\n",gotoAddress );
 800085a:	6939      	ldr	r1, [r7, #16]
 800085c:	480f      	ldr	r0, [pc, #60]	; (800089c <erase_sector+0x84>)
 800085e:	f000 f9d5 	bl	8000c0c <print_msg>
			gotoAddress |= 1;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	613b      	str	r3, [r7, #16]
			void (*jump_func)(void) = (void *)gotoAddress;
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	60fb      	str	r3, [r7, #12]
			print_msg( "[DBG_MSG]: Performing Jump\r\n" );
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <erase_sector+0x88>)
 8000870:	f000 f9cc 	bl	8000c0c <print_msg>
			// todo jump results in Hard Fault
			jump_func();
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4798      	blx	r3
			returnValue = TASK_COMPLETED;
 8000878:	2300      	movs	r3, #0
 800087a:	75fb      	strb	r3, [r7, #23]
 800087c:	e008      	b.n	8000890 <erase_sector+0x78>
		}
		else
		{
			print_msg( "[DBG_MSG]: goto-address is invalid\r\n" );
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <erase_sector+0x8c>)
 8000880:	f000 f9c4 	bl	8000c0c <print_msg>
 8000884:	e004      	b.n	8000890 <erase_sector+0x78>
		}
	}
	else
	{
		print_msg( "[WRG_MSG]: Invalid Argu count. ex: 4jump <Jump to address>\r\n" );
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <erase_sector+0x90>)
 8000888:	f000 f9c0 	bl	8000c0c <print_msg>
		returnValue = TASK_PENDING;
 800088c:	2301      	movs	r3, #1
 800088e:	75fb      	strb	r3, [r7, #23]
	}
	return returnValue;
 8000890:	7dfb      	ldrb	r3, [r7, #23]
}/* end of erase_sector */
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08003734 	.word	0x08003734
 80008a0:	08003754 	.word	0x08003754
 80008a4:	08003774 	.word	0x08003774
 80008a8:	0800379c 	.word	0x0800379c

080008ac <help_cmd>:
/**
  * @brief  Prints the Command List
  * @retval Bool
  */
bool help_cmd(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	cmdTable_t  const *CmdLineEntry;
	print_msg( "Boot Command List:\r\n" );
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <help_cmd+0x40>)
 80008b4:	f000 f9aa 	bl	8000c0c <print_msg>
   CmdLineEntry = bootCmdTable;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <help_cmd+0x44>)
 80008ba:	607b      	str	r3, [r7, #4]
   while ( CmdLineEntry->pCmdName )
 80008bc:	e00d      	b.n	80008da <help_cmd+0x2e>
   {
      /* has partial command text been entered and no match? */
//      if ((1 == argc) ||
//          (2 == argc) && (NULL != strstr(CmdLineEntry->pCmdName, argv[1])))
//      {
    	  print_msg( "%20s: %s\r\n", CmdLineEntry->pCmdName, CmdLineEntry->pDesString );
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	461a      	mov	r2, r3
 80008c8:	480a      	ldr	r0, [pc, #40]	; (80008f4 <help_cmd+0x48>)
 80008ca:	f000 f99f 	bl	8000c0c <print_msg>
         HAL_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f000 fc62 	bl	8001198 <HAL_Delay>
//      }
      CmdLineEntry++;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	330c      	adds	r3, #12
 80008d8:	607b      	str	r3, [r7, #4]
   while ( CmdLineEntry->pCmdName )
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1ed      	bne.n	80008be <help_cmd+0x12>
   } /* end while() */
   return TASK_COMPLETED;
 80008e2:	2300      	movs	r3, #0
} /* end DBG_CommandLine_Help () */
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	080037dc 	.word	0x080037dc
 80008f0:	08003908 	.word	0x08003908
 80008f4:	080037f4 	.word	0x080037f4

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 fbd9 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f837 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 f90b 	bl	8000b20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800090a:	f000 f8b5 	bl	8000a78 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800090e:	f000 f89f 	bl	8000a50 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8000912:	f000 f8db 	bl	8000acc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(VRL_COM_UART,(uint8_t *)"Hello from Bootloader!\r\n",15,HAL_MAX_DELAY);
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	220f      	movs	r2, #15
 800091c:	4910      	ldr	r1, [pc, #64]	; (8000960 <main+0x68>)
 800091e:	4811      	ldr	r0, [pc, #68]	; (8000964 <main+0x6c>)
 8000920:	f001 fda9 	bl	8002476 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Get the User Button Status */
	  userButton = HAL_GPIO_ReadPin( USER_BUTTON_PORT, USER_BUTTON_PIN );
 8000924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000928:	480f      	ldr	r0, [pc, #60]	; (8000968 <main+0x70>)
 800092a:	f000 ff89 	bl	8001840 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
	  if ( userButton == BUTTON_PRESSED )
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f083 0301 	eor.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d005      	beq.n	8000952 <main+0x5a>
	  {
		  print_msg( "[DBG_MSG]: Button Pressed\r\n" );
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <main+0x74>)
 8000948:	f000 f960 	bl	8000c0c <print_msg>
		  jump_to_app();
 800094c:	f000 f980 	bl	8000c50 <jump_to_app>
 8000950:	e7e8      	b.n	8000924 <main+0x2c>
	  }
	  else
	  {
		  print_msg( "[DBG_MSG]: Button Not Pressed\r\n" );
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <main+0x78>)
 8000954:	f000 f95a 	bl	8000c0c <print_msg>
		  read_usr_cmd();
 8000958:	f000 f9a6 	bl	8000ca8 <read_usr_cmd>
	  userButton = HAL_GPIO_ReadPin( USER_BUTTON_PORT, USER_BUTTON_PIN );
 800095c:	e7e2      	b.n	8000924 <main+0x2c>
 800095e:	bf00      	nop
 8000960:	08003800 	.word	0x08003800
 8000964:	20000178 	.word	0x20000178
 8000968:	40020800 	.word	0x40020800
 800096c:	0800381c 	.word	0x0800381c
 8000970:	08003838 	.word	0x08003838

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2234      	movs	r2, #52	; 0x34
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f002 f90c 	bl	8002ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <SystemClock_Config+0xd4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <SystemClock_Config+0xd4>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <SystemClock_Config+0xd4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b4:	2300      	movs	r3, #0
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <SystemClock_Config+0xd8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <SystemClock_Config+0xd8>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemClock_Config+0xd8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	2310      	movs	r3, #16
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e8:	2310      	movs	r3, #16
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009f2:	2304      	movs	r3, #4
 80009f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fa4c 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a0e:	f000 f9df 	bl	8000dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	230f      	movs	r3, #15
 8000a14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	2302      	movs	r3, #2
 8000a18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 ff6a 	bl	8001908 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a3a:	f000 f9c9 	bl	8000dd0 <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3750      	adds	r7, #80	; 0x50
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000

08000a50 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_CRC_Init+0x20>)
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <MX_CRC_Init+0x24>)
 8000a58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_CRC_Init+0x20>)
 8000a5c:	f000 fcd1 	bl	8001402 <HAL_CRC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a66:	f000 f9b3 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000200 	.word	0x20000200
 8000a74:	40023000 	.word	0x40023000

08000a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_USART2_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f001 fc94 	bl	80023dc <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 f989 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000178 	.word	0x20000178
 8000ac8:	40004400 	.word	0x40004400

08000acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_USART3_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART3_UART_Init+0x4c>)
 8000b04:	f001 fc6a 	bl	80023dc <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 f95f 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200001bc 	.word	0x200001bc
 8000b1c:	40004800 	.word	0x40004800

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a30      	ldr	r2, [pc, #192]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a29      	ldr	r2, [pc, #164]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2120      	movs	r1, #32
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_GPIO_Init+0xe4>)
 8000bac:	f000 fe60 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4810      	ldr	r0, [pc, #64]	; (8000c08 <MX_GPIO_Init+0xe8>)
 8000bc8:	f000 fca6 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_GPIO_Init+0xe4>)
 8000be4:	f000 fc98 	bl	8001518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2028      	movs	r0, #40	; 0x28
 8000bee:	f000 fbd2 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf2:	2028      	movs	r0, #40	; 0x28
 8000bf4:	f000 fbeb 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020800 	.word	0x40020800

08000c0c <print_msg>:
/**
  * @brief  This function is used to print string in Console over UART.
  * @retval None
  */
void print_msg( char *format,... )
{
 8000c0c:	b40f      	push	{r0, r1, r2, r3}
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b09a      	sub	sp, #104	; 0x68
 8000c12:	af00      	add	r7, sp, #0
#if ( BOOT_DEBUG_MSG == 1 )
	char data[100];
	va_list args;
	va_start(args, format);
 8000c14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c18:	603b      	str	r3, [r7, #0]
	vsprintf(data, format, args);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 f885 	bl	8002d30 <vsiprintf>
	HAL_UART_Transmit( VRL_COM_UART, (uint8_t *)data, strlen(data), HAL_MAX_DELAY );
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff faf1 	bl	8000210 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	1d39      	adds	r1, r7, #4
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <print_msg+0x40>)
 8000c3a:	f001 fc1c 	bl	8002476 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000c3e:	bf00      	nop
 8000c40:	3768      	adds	r7, #104	; 0x68
 8000c42:	46bd      	mov	sp, r7
 8000c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr
 8000c4c:	20000178 	.word	0x20000178

08000c50 <jump_to_app>:
  * @brief  This function is used to jump the code to app(0X0800_8000 or Sector 2)
  * 		or FLASH_SECTOR2_BASE_ADDRESS
  * @retval None
  */
void jump_to_app(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	 *		The next address in app(0x0800_8000+4) holds the value of the Reset Handler
	 * 	*/

	/* A function to hold the address of the reset handler */
	void (*app_reset_handler_addr)(void);
	print_msg("[DBG_MSG]: Started jump to application\r\n");
 8000c56:	480f      	ldr	r0, [pc, #60]	; (8000c94 <jump_to_app+0x44>)
 8000c58:	f7ff ffd8 	bl	8000c0c <print_msg>

	/* 1.Get the MSP by reading the very first address in app */
	uint32_t mspValue = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <jump_to_app+0x48>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
	print_msg("[DBG_INFO]: mspValue = %#x\r\n",mspValue);
 8000c62:	68f9      	ldr	r1, [r7, #12]
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <jump_to_app+0x4c>)
 8000c66:	f7ff ffd1 	bl	8000c0c <print_msg>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	f383 8808 	msr	MSP, r3
}
 8000c74:	bf00      	nop

	/* Sets the New MSP_value */
	__set_MSP(mspValue);

	/* 2.Get the resetHandlerAddr address from next address and set the new value */
	uint32_t resetHandlerAddr = *( volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <jump_to_app+0x50>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	60bb      	str	r3, [r7, #8]
	app_reset_handler_addr = (void *)resetHandlerAddr;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	607b      	str	r3, [r7, #4]

	print_msg("[DBG_INFO]: app_reset_handler_addr = %#x\r\n",app_reset_handler_addr);
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <jump_to_app+0x54>)
 8000c84:	f7ff ffc2 	bl	8000c0c <print_msg>

	/* 3. Jump to the reset handler of the address */
	app_reset_handler_addr();
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4798      	blx	r3

}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08003858 	.word	0x08003858
 8000c98:	08008000 	.word	0x08008000
 8000c9c:	08003884 	.word	0x08003884
 8000ca0:	08008004 	.word	0x08008004
 8000ca4:	080038a4 	.word	0x080038a4

08000ca8 <read_usr_cmd>:
/**
  * @brief  This function is used read the commands from the user to process bootloader
  * @retval None
  */
void read_usr_cmd(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
	uint8_t rxDataLen = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bootRxBuf, 0,  sizeof(bootRxBuf));
 8000cb2:	22c8      	movs	r2, #200	; 0xc8
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4838      	ldr	r0, [pc, #224]	; (8000d98 <read_usr_cmd+0xf0>)
 8000cb8:	f001 ff72 	bl	8002ba0 <memset>
		/* First byte is the length of the command, check data frame for each command */
		HAL_UART_Receive(VRL_COM_UART, bootRxBuf, 1, HAL_MAX_DELAY);
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4935      	ldr	r1, [pc, #212]	; (8000d98 <read_usr_cmd+0xf0>)
 8000cc4:	4835      	ldr	r0, [pc, #212]	; (8000d9c <read_usr_cmd+0xf4>)
 8000cc6:	f001 fc68 	bl	800259a <HAL_UART_Receive>
		HAL_UART_Transmit(VRL_COM_UART, bootRxBuf, 1, HAL_MAX_DELAY);
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4931      	ldr	r1, [pc, #196]	; (8000d98 <read_usr_cmd+0xf0>)
 8000cd2:	4832      	ldr	r0, [pc, #200]	; (8000d9c <read_usr_cmd+0xf4>)
 8000cd4:	f001 fbcf 	bl	8002476 <HAL_UART_Transmit>
		if (isdigit(bootRxBuf[0]))
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <read_usr_cmd+0xf0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	3b30      	subs	r3, #48	; 0x30
 8000cde:	2b09      	cmp	r3, #9
 8000ce0:	d84e      	bhi.n	8000d80 <read_usr_cmd+0xd8>
		{
			HAL_UART_Receive(VRL_COM_UART, &bootRxBuf[1], 1, 500);
 8000ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	492d      	ldr	r1, [pc, #180]	; (8000da0 <read_usr_cmd+0xf8>)
 8000cea:	482c      	ldr	r0, [pc, #176]	; (8000d9c <read_usr_cmd+0xf4>)
 8000cec:	f001 fc55 	bl	800259a <HAL_UART_Receive>
			HAL_UART_Transmit(VRL_COM_UART, &bootRxBuf[1], 1, HAL_MAX_DELAY);
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	492a      	ldr	r1, [pc, #168]	; (8000da0 <read_usr_cmd+0xf8>)
 8000cf8:	4828      	ldr	r0, [pc, #160]	; (8000d9c <read_usr_cmd+0xf4>)
 8000cfa:	f001 fbbc 	bl	8002476 <HAL_UART_Transmit>
			if (isdigit(bootRxBuf[1]))
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <read_usr_cmd+0xf0>)
 8000d00:	785b      	ldrb	r3, [r3, #1]
 8000d02:	3b30      	subs	r3, #48	; 0x30
 8000d04:	2b09      	cmp	r3, #9
 8000d06:	d81d      	bhi.n	8000d44 <read_usr_cmd+0x9c>
			{
				/* Gets Length as 2 Digit */
				rxDataLen = (uint8_t)( (( bootRxBuf[0] - 48 )*10) + (bootRxBuf[1] - 48) ) ; // Converting Hex to decimal
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <read_usr_cmd+0xf0>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <read_usr_cmd+0xf0>)
 8000d18:	785b      	ldrb	r3, [r3, #1]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3b10      	subs	r3, #16
 8000d20:	71fb      	strb	r3, [r7, #7]
				HAL_UART_Receive(VRL_COM_UART, &bootRxBuf[2], rxDataLen, HAL_MAX_DELAY);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	491e      	ldr	r1, [pc, #120]	; (8000da4 <read_usr_cmd+0xfc>)
 8000d2c:	481b      	ldr	r0, [pc, #108]	; (8000d9c <read_usr_cmd+0xf4>)
 8000d2e:	f001 fc34 	bl	800259a <HAL_UART_Receive>
				HAL_UART_Transmit(VRL_COM_UART, &bootRxBuf[2], rxDataLen, HAL_MAX_DELAY);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	491a      	ldr	r1, [pc, #104]	; (8000da4 <read_usr_cmd+0xfc>)
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <read_usr_cmd+0xf4>)
 8000d3e:	f001 fb9a 	bl	8002476 <HAL_UART_Transmit>
 8000d42:	e013      	b.n	8000d6c <read_usr_cmd+0xc4>
			}
			else
			{
				/* Gets Length as 1 Digit */
				rxDataLen = (uint8_t)( bootRxBuf[0] - 48 );
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <read_usr_cmd+0xf0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3b30      	subs	r3, #48	; 0x30
 8000d4a:	71fb      	strb	r3, [r7, #7]
				HAL_UART_Receive(VRL_COM_UART, &bootRxBuf[1], rxDataLen, HAL_MAX_DELAY);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	4912      	ldr	r1, [pc, #72]	; (8000da0 <read_usr_cmd+0xf8>)
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <read_usr_cmd+0xf4>)
 8000d58:	f001 fc1f 	bl	800259a <HAL_UART_Receive>
				HAL_UART_Transmit(VRL_COM_UART, &bootRxBuf[1], rxDataLen, HAL_MAX_DELAY);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	490e      	ldr	r1, [pc, #56]	; (8000da0 <read_usr_cmd+0xf8>)
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <read_usr_cmd+0xf4>)
 8000d68:	f001 fb85 	bl	8002476 <HAL_UART_Transmit>
			}

			HAL_UART_Transmit(VRL_COM_UART,(uint8_t *)"\r\n",3,HAL_MAX_DELAY);
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2203      	movs	r2, #3
 8000d72:	490d      	ldr	r1, [pc, #52]	; (8000da8 <read_usr_cmd+0x100>)
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <read_usr_cmd+0xf4>)
 8000d76:	f001 fb7e 	bl	8002476 <HAL_UART_Transmit>
			process_bootloader_command();
 8000d7a:	f7ff fc5b 	bl	8000634 <process_bootloader_command>
 8000d7e:	e798      	b.n	8000cb2 <read_usr_cmd+0xa>
		}
		else if(bootRxBuf[0] == 13)
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <read_usr_cmd+0xf0>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b0d      	cmp	r3, #13
 8000d86:	d103      	bne.n	8000d90 <read_usr_cmd+0xe8>
		{
			print_msg("\r\n");
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <read_usr_cmd+0x100>)
 8000d8a:	f7ff ff3f 	bl	8000c0c <print_msg>
 8000d8e:	e790      	b.n	8000cb2 <read_usr_cmd+0xa>
		}
		else
		{
			print_msg("\r\n[DBG_INFO]: Invalid Input. Enter \"1h\" for help\r\n");
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <read_usr_cmd+0x104>)
 8000d92:	f7ff ff3b 	bl	8000c0c <print_msg>
	{
 8000d96:	e78c      	b.n	8000cb2 <read_usr_cmd+0xa>
 8000d98:	200000b0 	.word	0x200000b0
 8000d9c:	20000178 	.word	0x20000178
 8000da0:	200000b1 	.word	0x200000b1
 8000da4:	200000b2 	.word	0x200000b2
 8000da8:	080038d0 	.word	0x080038d0
 8000dac:	080038d4 	.word	0x080038d4

08000db0 <HAL_GPIO_EXTI_Callback>:
	}

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000dba:	2120      	movs	r1, #32
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x1c>)
 8000dbe:	f000 fd70 	bl	80018a2 <HAL_GPIO_TogglePin>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>
	...

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <HAL_MspInit+0x4c>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x4c>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e1a:	2007      	movs	r0, #7
 8000e1c:	f000 fab0 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_CRC_MspInit+0x3c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10d      	bne.n	8000e5a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023000 	.word	0x40023000
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a32      	ldr	r2, [pc, #200]	; (8000f58 <HAL_UART_MspInit+0xe8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12c      	bne.n	8000eec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a30      	ldr	r2, [pc, #192]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481e      	ldr	r0, [pc, #120]	; (8000f60 <HAL_UART_MspInit+0xf0>)
 8000ee6:	f000 fb17 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eea:	e031      	b.n	8000f50 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <HAL_UART_MspInit+0xf4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_UART_MspInit+0xec>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f40:	2307      	movs	r3, #7
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <HAL_UART_MspInit+0xf8>)
 8000f4c:	f000 fae4 	bl	8001518 <HAL_GPIO_Init>
}
 8000f50:	bf00      	nop
 8000f52:	3730      	adds	r7, #48	; 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40004400 	.word	0x40004400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40004800 	.word	0x40004800
 8000f68:	40020800 	.word	0x40020800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f8ce 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fc8:	f000 fc86 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f001 fda4 	bl	8002b4c <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20020000 	.word	0x20020000
 8001030:	00000400 	.word	0x00000400
 8001034:	200000a4 	.word	0x200000a4
 8001038:	20000220 	.word	0x20000220

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	; (80010ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800108a:	f7ff ffd7 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f001 fd63 	bl	8002b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fc31 	bl	80008f8 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010a4:	08003ac4 	.word	0x08003ac4
  ldr r2, =_sbss
 80010a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010ac:	2000021c 	.word	0x2000021c

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f94f 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fe78 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f967 	bl	80013ea <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f000 f92f 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000
 8001150:	20000008 	.word	0x20000008
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	20000208 	.word	0x20000208

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000208 	.word	0x20000208

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e00e      	b.n	8001432 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	795b      	ldrb	r3, [r3, #5]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d105      	bne.n	800142a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fd01 	bl	8000e2c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	220f      	movs	r2, #15
 8001446:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001448:	f000 f82a 	bl	80014a0 <FLASH_OB_GetWRP>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001454:	f000 f830 	bl	80014b8 <FLASH_OB_GetRDP>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001460:	f000 f80e 	bl	8001480 <FLASH_OB_GetUser>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800146c:	f000 f844 	bl	80014f8 <FLASH_OB_GetBOR>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	615a      	str	r2, [r3, #20]
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <FLASH_OB_GetUser+0x1c>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f023 031f 	bic.w	r3, r3, #31
 800148e:	b2db      	uxtb	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <FLASH_OB_GetWRP+0x14>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40023c16 	.word	0x40023c16

080014b8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80014be:	23aa      	movs	r3, #170	; 0xaa
 80014c0:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <FLASH_OB_GetRDP+0x3c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2bcc      	cmp	r3, #204	; 0xcc
 80014ca:	d102      	bne.n	80014d2 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80014cc:	23cc      	movs	r3, #204	; 0xcc
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	e009      	b.n	80014e6 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <FLASH_OB_GetRDP+0x3c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2baa      	cmp	r3, #170	; 0xaa
 80014da:	d102      	bne.n	80014e2 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80014dc:	23aa      	movs	r3, #170	; 0xaa
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	e001      	b.n	80014e6 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80014e2:	2355      	movs	r3, #85	; 0x55
 80014e4:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80014e6:	79fb      	ldrb	r3, [r7, #7]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40023c15 	.word	0x40023c15

080014f8 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <FLASH_OB_GetBOR+0x1c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	b2db      	uxtb	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023c14 	.word	0x40023c14

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e165      	b.n	8001800 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8154 	bne.w	80017fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	2b02      	cmp	r3, #2
 8001568:	d130      	bne.n	80015cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 0201 	and.w	r2, r3, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d017      	beq.n	8001608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d123      	bne.n	800165c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80ae 	beq.w	80017fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <HAL_GPIO_Init+0x300>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <HAL_GPIO_Init+0x300>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <HAL_GPIO_Init+0x300>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ba:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_GPIO_Init+0x304>)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <HAL_GPIO_Init+0x308>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d025      	beq.n	8001732 <HAL_GPIO_Init+0x21a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4e      	ldr	r2, [pc, #312]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01f      	beq.n	800172e <HAL_GPIO_Init+0x216>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_GPIO_Init+0x310>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d019      	beq.n	800172a <HAL_GPIO_Init+0x212>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_GPIO_Init+0x314>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x20e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_GPIO_Init+0x318>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x20a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <HAL_GPIO_Init+0x31c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x206>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a49      	ldr	r2, [pc, #292]	; (8001838 <HAL_GPIO_Init+0x320>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x202>
 8001716:	2306      	movs	r3, #6
 8001718:	e00c      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 800171a:	2307      	movs	r3, #7
 800171c:	e00a      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 800171e:	2305      	movs	r3, #5
 8001720:	e008      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 8001722:	2304      	movs	r3, #4
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 8001726:	2303      	movs	r3, #3
 8001728:	e004      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 8001732:	2300      	movs	r3, #0
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f002 0203 	and.w	r2, r2, #3
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	4093      	lsls	r3, r2
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001744:	4935      	ldr	r1, [pc, #212]	; (800181c <HAL_GPIO_Init+0x304>)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001752:	4b3a      	ldr	r3, [pc, #232]	; (800183c <HAL_GPIO_Init+0x324>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001776:	4a31      	ldr	r2, [pc, #196]	; (800183c <HAL_GPIO_Init+0x324>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <HAL_GPIO_Init+0x324>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a0:	4a26      	ldr	r2, [pc, #152]	; (800183c <HAL_GPIO_Init+0x324>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_GPIO_Init+0x324>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ca:	4a1c      	ldr	r2, [pc, #112]	; (800183c <HAL_GPIO_Init+0x324>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_GPIO_Init+0x324>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f4:	4a11      	ldr	r2, [pc, #68]	; (800183c <HAL_GPIO_Init+0x324>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2b0f      	cmp	r3, #15
 8001804:	f67f ae96 	bls.w	8001534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3724      	adds	r7, #36	; 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40013800 	.word	0x40013800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400
 8001828:	40020800 	.word	0x40020800
 800182c:	40020c00 	.word	0x40020c00
 8001830:	40021000 	.word	0x40021000
 8001834:	40021400 	.word	0x40021400
 8001838:	40021800 	.word	0x40021800
 800183c:	40013c00 	.word	0x40013c00

08001840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e001      	b.n	8001862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018b4:	887a      	ldrh	r2, [r7, #2]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	041a      	lsls	r2, r3, #16
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43d9      	mvns	r1, r3
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	400b      	ands	r3, r1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa5a 	bl	8000db0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40013c00 	.word	0x40013c00

08001908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0cc      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d90c      	bls.n	8001944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800197e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d044      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d119      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e067      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4934      	ldr	r1, [pc, #208]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff fbc2 	bl	8001180 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff fbbe 	bl	8001180 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e04f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d20c      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f855 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	490a      	ldr	r1, [pc, #40]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	5ccb      	ldrb	r3, [r1, r3]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fb22 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08003968 	.word	0x08003968
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0a9b      	lsrs	r3, r3, #10
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08003978 	.word	0x08003978

08001b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b18:	f7ff ffdc 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0b5b      	lsrs	r3, r3, #13
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08003978 	.word	0x08003978

08001b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b40:	b088      	sub	sp, #32
 8001b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b58:	4bce      	ldr	r3, [pc, #824]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	f200 818d 	bhi.w	8001e80 <HAL_RCC_GetSysClockFreq+0x344>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_RCC_GetSysClockFreq+0x30>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001ba1 	.word	0x08001ba1
 8001b70:	08001e81 	.word	0x08001e81
 8001b74:	08001e81 	.word	0x08001e81
 8001b78:	08001e81 	.word	0x08001e81
 8001b7c:	08001ba7 	.word	0x08001ba7
 8001b80:	08001e81 	.word	0x08001e81
 8001b84:	08001e81 	.word	0x08001e81
 8001b88:	08001e81 	.word	0x08001e81
 8001b8c:	08001bad 	.word	0x08001bad
 8001b90:	08001e81 	.word	0x08001e81
 8001b94:	08001e81 	.word	0x08001e81
 8001b98:	08001e81 	.word	0x08001e81
 8001b9c:	08001d21 	.word	0x08001d21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4bbd      	ldr	r3, [pc, #756]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ba2:	61bb      	str	r3, [r7, #24]
       break;
 8001ba4:	e16f      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4bbd      	ldr	r3, [pc, #756]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x360>)
 8001ba8:	61bb      	str	r3, [r7, #24]
      break;
 8001baa:	e16c      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4bb9      	ldr	r3, [pc, #740]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4bb7      	ldr	r3, [pc, #732]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d053      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4bb4      	ldr	r3, [pc, #720]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	ea02 0400 	and.w	r4, r2, r0
 8001bda:	603c      	str	r4, [r7, #0]
 8001bdc:	400b      	ands	r3, r1
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	014b      	lsls	r3, r1, #5
 8001bf2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf6:	0142      	lsls	r2, r0, #5
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	1ac0      	subs	r0, r0, r3
 8001c00:	462b      	mov	r3, r5
 8001c02:	eb61 0103 	sbc.w	r1, r1, r3
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c14:	0182      	lsls	r2, r0, #6
 8001c16:	1a12      	subs	r2, r2, r0
 8001c18:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	00d9      	lsls	r1, r3, #3
 8001c26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c2a:	00d0      	lsls	r0, r2, #3
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4621      	mov	r1, r4
 8001c32:	1852      	adds	r2, r2, r1
 8001c34:	4629      	mov	r1, r5
 8001c36:	eb43 0101 	adc.w	r1, r3, r1
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	f04f 0000 	mov.w	r0, #0
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	0259      	lsls	r1, r3, #9
 8001c46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c4a:	0250      	lsls	r0, r2, #9
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f7fe fb30 	bl	80002c0 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e04c      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	461a      	mov	r2, r3
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	ea02 0a00 	and.w	sl, r2, r0
 8001c82:	ea03 0b01 	and.w	fp, r3, r1
 8001c86:	4650      	mov	r0, sl
 8001c88:	4659      	mov	r1, fp
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	014b      	lsls	r3, r1, #5
 8001c94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c98:	0142      	lsls	r2, r0, #5
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	ebb0 000a 	subs.w	r0, r0, sl
 8001ca2:	eb61 010b 	sbc.w	r1, r1, fp
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cb4:	0182      	lsls	r2, r0, #6
 8001cb6:	1a12      	subs	r2, r2, r0
 8001cb8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbc:	f04f 0000 	mov.w	r0, #0
 8001cc0:	f04f 0100 	mov.w	r1, #0
 8001cc4:	00d9      	lsls	r1, r3, #3
 8001cc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cca:	00d0      	lsls	r0, r2, #3
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	eb12 020a 	adds.w	r2, r2, sl
 8001cd4:	eb43 030b 	adc.w	r3, r3, fp
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	0299      	lsls	r1, r3, #10
 8001ce2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ce6:	0290      	lsls	r0, r2, #10
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f7fe fae2 	bl	80002c0 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	61bb      	str	r3, [r7, #24]
      break;
 8001d1e:	e0b2      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d20:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d28:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d04d      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	ea02 0800 	and.w	r8, r2, r0
 8001d4e:	ea03 0901 	and.w	r9, r3, r1
 8001d52:	4640      	mov	r0, r8
 8001d54:	4649      	mov	r1, r9
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	014b      	lsls	r3, r1, #5
 8001d60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d64:	0142      	lsls	r2, r0, #5
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	ebb0 0008 	subs.w	r0, r0, r8
 8001d6e:	eb61 0109 	sbc.w	r1, r1, r9
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	018b      	lsls	r3, r1, #6
 8001d7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d80:	0182      	lsls	r2, r0, #6
 8001d82:	1a12      	subs	r2, r2, r0
 8001d84:	eb63 0301 	sbc.w	r3, r3, r1
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	00d9      	lsls	r1, r3, #3
 8001d92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d96:	00d0      	lsls	r0, r2, #3
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	eb12 0208 	adds.w	r2, r2, r8
 8001da0:	eb43 0309 	adc.w	r3, r3, r9
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	0259      	lsls	r1, r3, #9
 8001dae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001db2:	0250      	lsls	r0, r2, #9
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	f7fe fa7c 	bl	80002c0 <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	e04a      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	099b      	lsrs	r3, r3, #6
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	ea02 0400 	and.w	r4, r2, r0
 8001dea:	ea03 0501 	and.w	r5, r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	014b      	lsls	r3, r1, #5
 8001dfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e00:	0142      	lsls	r2, r0, #5
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	1b00      	subs	r0, r0, r4
 8001e08:	eb61 0105 	sbc.w	r1, r1, r5
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	018b      	lsls	r3, r1, #6
 8001e16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e1a:	0182      	lsls	r2, r0, #6
 8001e1c:	1a12      	subs	r2, r2, r0
 8001e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e22:	f04f 0000 	mov.w	r0, #0
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	00d9      	lsls	r1, r3, #3
 8001e2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e30:	00d0      	lsls	r0, r2, #3
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	1912      	adds	r2, r2, r4
 8001e38:	eb45 0303 	adc.w	r3, r5, r3
 8001e3c:	f04f 0000 	mov.w	r0, #0
 8001e40:	f04f 0100 	mov.w	r1, #0
 8001e44:	0299      	lsls	r1, r3, #10
 8001e46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e4a:	0290      	lsls	r0, r2, #10
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	f7fe fa30 	bl	80002c0 <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0f1b      	lsrs	r3, r3, #28
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	61bb      	str	r3, [r7, #24]
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e82:	61bb      	str	r3, [r7, #24]
      break;
 8001e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e86:	69bb      	ldr	r3, [r7, #24]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e28d      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8083 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ec0:	4b94      	ldr	r3, [pc, #592]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d019      	beq.n	8001f00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ecc:	4b91      	ldr	r3, [pc, #580]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ed8:	4b8e      	ldr	r3, [pc, #568]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee4:	d00c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d112      	bne.n	8001f18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef2:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	4b84      	ldr	r3, [pc, #528]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05b      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x124>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d157      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e25a      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x90>
 8001f22:	4b7c      	ldr	r3, [pc, #496]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7b      	ldr	r2, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xcc>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0xb4>
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a72      	ldr	r2, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xcc>
 8001f54:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b6c      	ldr	r3, [pc, #432]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a6b      	ldr	r2, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f904 	bl	8001180 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f900 	bl	8001180 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e21f      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xdc>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f8f0 	bl	8001180 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f8ec 	bl	8001180 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e20b      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b57      	ldr	r3, [pc, #348]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x104>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d06f      	beq.n	80020b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd2:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d017      	beq.n	800200e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fde:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fea:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b44      	ldr	r3, [pc, #272]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x186>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1d3      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4937      	ldr	r1, [pc, #220]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_RCC_OscConfig+0x278>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff f899 	bl	8001180 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff f895 	bl	8001180 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1b4      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4925      	ldr	r1, [pc, #148]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_OscConfig+0x278>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f878 	bl	8001180 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002094:	f7ff f874 	bl	8001180 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e193      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d036      	beq.n	800212c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_RCC_OscConfig+0x27c>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff f858 	bl	8001180 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff f854 	bl	8001180 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e173      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 80020e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x234>
 80020f2:	e01b      	b.n	800212c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_OscConfig+0x27c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff f841 	bl	8001180 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e00e      	b.n	8002120 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7ff f83d 	bl	8001180 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d907      	bls.n	8002120 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e15c      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
 8002114:	40023800 	.word	0x40023800
 8002118:	42470000 	.word	0x42470000
 800211c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b8a      	ldr	r3, [pc, #552]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ea      	bne.n	8002102 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8097 	beq.w	8002268 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b83      	ldr	r3, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a7e      	ldr	r2, [pc, #504]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b79      	ldr	r3, [pc, #484]	; (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002176:	4b76      	ldr	r3, [pc, #472]	; (8002350 <HAL_RCC_OscConfig+0x4b0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a75      	ldr	r2, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7fe fffd 	bl	8001180 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7fe fff9 	bl	8001180 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e118      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x31e>
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a65      	ldr	r2, [pc, #404]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x358>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x340>
 80021c6:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a60      	ldr	r2, [pc, #384]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
 80021d2:	4b5e      	ldr	r3, [pc, #376]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	4a5d      	ldr	r2, [pc, #372]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6713      	str	r3, [r2, #112]	; 0x70
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0x358>
 80021e0:	4b5a      	ldr	r3, [pc, #360]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a59      	ldr	r2, [pc, #356]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a56      	ldr	r2, [pc, #344]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe ffbe 	bl	8001180 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe ffba 	bl	8001180 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0d7      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ee      	beq.n	8002208 <HAL_RCC_OscConfig+0x368>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7fe ffa8 	bl	8001180 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe ffa4 	bl	8001180 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0c1      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	4a3a      	ldr	r2, [pc, #232]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002266:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80ad 	beq.w	80023cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d060      	beq.n	8002340 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d145      	bne.n	8002312 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_RCC_OscConfig+0x4b4>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe ff78 	bl	8001180 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe ff74 	bl	8001180 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e093      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	491b      	ldr	r1, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x4b4>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe ff49 	bl	8001180 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe ff45 	bl	8001180 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e064      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x452>
 8002310:	e05c      	b.n	80023cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_RCC_OscConfig+0x4b4>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ff32 	bl	8001180 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe ff2e 	bl	8001180 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e04d      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x480>
 800233e:	e045      	b.n	80023cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e040      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000
 8002354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_RCC_OscConfig+0x538>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d030      	beq.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d129      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d122      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800238e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002390:	4293      	cmp	r3, r2
 8002392:	d119      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10f      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e03f      	b.n	800246e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fd34 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800241e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f9cb 	bl	80027bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b08a      	sub	sp, #40	; 0x28
 800247a:	af02      	add	r7, sp, #8
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	d17c      	bne.n	8002590 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_UART_Transmit+0x2c>
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e075      	b.n	8002592 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_UART_Transmit+0x3e>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e06e      	b.n	8002592 <HAL_UART_Transmit+0x11c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	; 0x21
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ca:	f7fe fe59 	bl	8001180 <HAL_GetTick>
 80024ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d108      	bne.n	80024f8 <HAL_UART_Transmit+0x82>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	e003      	b.n	8002500 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002508:	e02a      	b.n	8002560 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8e2 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e036      	b.n	8002592 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10b      	bne.n	8002542 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3302      	adds	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e007      	b.n	8002552 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3301      	adds	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1cf      	bne.n	800250a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f8b2 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e006      	b.n	8002592 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b08a      	sub	sp, #40	; 0x28
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 808c 	bne.w	80026d4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_UART_Receive+0x2e>
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e084      	b.n	80026d6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_UART_Receive+0x40>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e07d      	b.n	80026d6 <HAL_UART_Receive+0x13c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2222      	movs	r2, #34	; 0x22
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f6:	f7fe fdc3 	bl	8001180 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d108      	bne.n	8002624 <HAL_UART_Receive+0x8a>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e003      	b.n	800262c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002634:	e043      	b.n	80026be <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	2120      	movs	r1, #32
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f84c 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e042      	b.n	80026d6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002662:	b29a      	uxth	r2, r3
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	3302      	adds	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e01f      	b.n	80026b0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002678:	d007      	beq.n	800268a <HAL_UART_Receive+0xf0>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <HAL_UART_Receive+0xfe>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e008      	b.n	80026aa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1b6      	bne.n	8002636 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b090      	sub	sp, #64	; 0x40
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ee:	e050      	b.n	8002792 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d04c      	beq.n	8002792 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <UART_WaitOnFlagUntilTimeout+0x30>
 80026fe:	f7fe fd3f 	bl	8001180 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800270a:	429a      	cmp	r2, r3
 800270c:	d241      	bcs.n	8002792 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	e853 3f00 	ldrex	r3, [r3]
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800272e:	637a      	str	r2, [r7, #52]	; 0x34
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002736:	e841 2300 	strex	r3, r2, [r1]
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e5      	bne.n	800270e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3314      	adds	r3, #20
 8002748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	613b      	str	r3, [r7, #16]
   return(result);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	63bb      	str	r3, [r7, #56]	; 0x38
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3314      	adds	r3, #20
 8002760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002762:	623a      	str	r2, [r7, #32]
 8002764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002766:	69f9      	ldr	r1, [r7, #28]
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	e841 2300 	strex	r3, r2, [r1]
 800276e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e5      	bne.n	8002742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e00f      	b.n	80027b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	429a      	cmp	r2, r3
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d09f      	beq.n	80026f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3740      	adds	r7, #64	; 0x40
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c0:	b09f      	sub	sp, #124	; 0x7c
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d2:	68d9      	ldr	r1, [r3, #12]
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	ea40 0301 	orr.w	r3, r0, r1
 80027dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80027f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002800:	f021 010c 	bic.w	r1, r1, #12
 8002804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280a:	430b      	orrs	r3, r1
 800280c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	6999      	ldr	r1, [r3, #24]
 800281c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	ea40 0301 	orr.w	r3, r0, r1
 8002824:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4bc5      	ldr	r3, [pc, #788]	; (8002b40 <UART_SetConfig+0x384>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d004      	beq.n	800283a <UART_SetConfig+0x7e>
 8002830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4bc3      	ldr	r3, [pc, #780]	; (8002b44 <UART_SetConfig+0x388>)
 8002836:	429a      	cmp	r2, r3
 8002838:	d103      	bne.n	8002842 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800283a:	f7ff f96b 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 800283e:	6778      	str	r0, [r7, #116]	; 0x74
 8002840:	e002      	b.n	8002848 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002842:	f7ff f953 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002846:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002850:	f040 80b6 	bne.w	80029c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002856:	461c      	mov	r4, r3
 8002858:	f04f 0500 	mov.w	r5, #0
 800285c:	4622      	mov	r2, r4
 800285e:	462b      	mov	r3, r5
 8002860:	1891      	adds	r1, r2, r2
 8002862:	6439      	str	r1, [r7, #64]	; 0x40
 8002864:	415b      	adcs	r3, r3
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800286c:	1912      	adds	r2, r2, r4
 800286e:	eb45 0303 	adc.w	r3, r5, r3
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	00d9      	lsls	r1, r3, #3
 800287c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002880:	00d0      	lsls	r0, r2, #3
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	1911      	adds	r1, r2, r4
 8002888:	6639      	str	r1, [r7, #96]	; 0x60
 800288a:	416b      	adcs	r3, r5
 800288c:	667b      	str	r3, [r7, #100]	; 0x64
 800288e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	461a      	mov	r2, r3
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	1891      	adds	r1, r2, r2
 800289a:	63b9      	str	r1, [r7, #56]	; 0x38
 800289c:	415b      	adcs	r3, r3
 800289e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028a8:	f7fd fd0a 	bl	80002c0 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4ba5      	ldr	r3, [pc, #660]	; (8002b48 <UART_SetConfig+0x38c>)
 80028b2:	fba3 2302 	umull	r2, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	011e      	lsls	r6, r3, #4
 80028ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028bc:	461c      	mov	r4, r3
 80028be:	f04f 0500 	mov.w	r5, #0
 80028c2:	4622      	mov	r2, r4
 80028c4:	462b      	mov	r3, r5
 80028c6:	1891      	adds	r1, r2, r2
 80028c8:	6339      	str	r1, [r7, #48]	; 0x30
 80028ca:	415b      	adcs	r3, r3
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
 80028ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028d2:	1912      	adds	r2, r2, r4
 80028d4:	eb45 0303 	adc.w	r3, r5, r3
 80028d8:	f04f 0000 	mov.w	r0, #0
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	00d9      	lsls	r1, r3, #3
 80028e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e6:	00d0      	lsls	r0, r2, #3
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	1911      	adds	r1, r2, r4
 80028ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80028f0:	416b      	adcs	r3, r5
 80028f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	1891      	adds	r1, r2, r2
 8002900:	62b9      	str	r1, [r7, #40]	; 0x28
 8002902:	415b      	adcs	r3, r3
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800290a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800290e:	f7fd fcd7 	bl	80002c0 <__aeabi_uldivmod>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4b8c      	ldr	r3, [pc, #560]	; (8002b48 <UART_SetConfig+0x38c>)
 8002918:	fba3 1302 	umull	r1, r3, r3, r2
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	2164      	movs	r1, #100	; 0x64
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	3332      	adds	r3, #50	; 0x32
 800292a:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <UART_SetConfig+0x38c>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002938:	441e      	add	r6, r3
 800293a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293c:	4618      	mov	r0, r3
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	1894      	adds	r4, r2, r2
 8002948:	623c      	str	r4, [r7, #32]
 800294a:	415b      	adcs	r3, r3
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002952:	1812      	adds	r2, r2, r0
 8002954:	eb41 0303 	adc.w	r3, r1, r3
 8002958:	f04f 0400 	mov.w	r4, #0
 800295c:	f04f 0500 	mov.w	r5, #0
 8002960:	00dd      	lsls	r5, r3, #3
 8002962:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002966:	00d4      	lsls	r4, r2, #3
 8002968:	4622      	mov	r2, r4
 800296a:	462b      	mov	r3, r5
 800296c:	1814      	adds	r4, r2, r0
 800296e:	653c      	str	r4, [r7, #80]	; 0x50
 8002970:	414b      	adcs	r3, r1
 8002972:	657b      	str	r3, [r7, #84]	; 0x54
 8002974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	461a      	mov	r2, r3
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	1891      	adds	r1, r2, r2
 8002980:	61b9      	str	r1, [r7, #24]
 8002982:	415b      	adcs	r3, r3
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800298a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800298e:	f7fd fc97 	bl	80002c0 <__aeabi_uldivmod>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <UART_SetConfig+0x38c>)
 8002998:	fba3 1302 	umull	r1, r3, r3, r2
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	2164      	movs	r1, #100	; 0x64
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	3332      	adds	r3, #50	; 0x32
 80029aa:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <UART_SetConfig+0x38c>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	f003 0207 	and.w	r2, r3, #7
 80029b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4432      	add	r2, r6
 80029bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029be:	e0b9      	b.n	8002b34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c2:	461c      	mov	r4, r3
 80029c4:	f04f 0500 	mov.w	r5, #0
 80029c8:	4622      	mov	r2, r4
 80029ca:	462b      	mov	r3, r5
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	6139      	str	r1, [r7, #16]
 80029d0:	415b      	adcs	r3, r3
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029d8:	1912      	adds	r2, r2, r4
 80029da:	eb45 0303 	adc.w	r3, r5, r3
 80029de:	f04f 0000 	mov.w	r0, #0
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	00d9      	lsls	r1, r3, #3
 80029e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ec:	00d0      	lsls	r0, r2, #3
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	eb12 0804 	adds.w	r8, r2, r4
 80029f6:	eb43 0905 	adc.w	r9, r3, r5
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f04f 0100 	mov.w	r1, #0
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	008b      	lsls	r3, r1, #2
 8002a0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a12:	0082      	lsls	r2, r0, #2
 8002a14:	4640      	mov	r0, r8
 8002a16:	4649      	mov	r1, r9
 8002a18:	f7fd fc52 	bl	80002c0 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4b49      	ldr	r3, [pc, #292]	; (8002b48 <UART_SetConfig+0x38c>)
 8002a22:	fba3 2302 	umull	r2, r3, r3, r2
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	011e      	lsls	r6, r3, #4
 8002a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	1894      	adds	r4, r2, r2
 8002a38:	60bc      	str	r4, [r7, #8]
 8002a3a:	415b      	adcs	r3, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a42:	1812      	adds	r2, r2, r0
 8002a44:	eb41 0303 	adc.w	r3, r1, r3
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	f04f 0500 	mov.w	r5, #0
 8002a50:	00dd      	lsls	r5, r3, #3
 8002a52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a56:	00d4      	lsls	r4, r2, #3
 8002a58:	4622      	mov	r2, r4
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	1814      	adds	r4, r2, r0
 8002a5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a60:	414b      	adcs	r3, r1
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	008b      	lsls	r3, r1, #2
 8002a78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a7c:	0082      	lsls	r2, r0, #2
 8002a7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a82:	f7fd fc1d 	bl	80002c0 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <UART_SetConfig+0x38c>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	2164      	movs	r1, #100	; 0x64
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	3332      	adds	r3, #50	; 0x32
 8002a9e:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <UART_SetConfig+0x38c>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aaa:	441e      	add	r6, r3
 8002aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f04f 0100 	mov.w	r1, #0
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	1894      	adds	r4, r2, r2
 8002aba:	603c      	str	r4, [r7, #0]
 8002abc:	415b      	adcs	r3, r3
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac4:	1812      	adds	r2, r2, r0
 8002ac6:	eb41 0303 	adc.w	r3, r1, r3
 8002aca:	f04f 0400 	mov.w	r4, #0
 8002ace:	f04f 0500 	mov.w	r5, #0
 8002ad2:	00dd      	lsls	r5, r3, #3
 8002ad4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ad8:	00d4      	lsls	r4, r2, #3
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	eb12 0a00 	adds.w	sl, r2, r0
 8002ae2:	eb43 0b01 	adc.w	fp, r3, r1
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	008b      	lsls	r3, r1, #2
 8002afa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002afe:	0082      	lsls	r2, r0, #2
 8002b00:	4650      	mov	r0, sl
 8002b02:	4659      	mov	r1, fp
 8002b04:	f7fd fbdc 	bl	80002c0 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <UART_SetConfig+0x38c>)
 8002b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2164      	movs	r1, #100	; 0x64
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	3332      	adds	r3, #50	; 0x32
 8002b20:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <UART_SetConfig+0x38c>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	f003 020f 	and.w	r2, r3, #15
 8002b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4432      	add	r2, r6
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	377c      	adds	r7, #124	; 0x7c
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b3e:	bf00      	nop
 8002b40:	40011000 	.word	0x40011000
 8002b44:	40011400 	.word	0x40011400
 8002b48:	51eb851f 	.word	0x51eb851f

08002b4c <__errno>:
 8002b4c:	4b01      	ldr	r3, [pc, #4]	; (8002b54 <__errno+0x8>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	2000000c 	.word	0x2000000c

08002b58 <__libc_init_array>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	4d0d      	ldr	r5, [pc, #52]	; (8002b90 <__libc_init_array+0x38>)
 8002b5c:	4c0d      	ldr	r4, [pc, #52]	; (8002b94 <__libc_init_array+0x3c>)
 8002b5e:	1b64      	subs	r4, r4, r5
 8002b60:	10a4      	asrs	r4, r4, #2
 8002b62:	2600      	movs	r6, #0
 8002b64:	42a6      	cmp	r6, r4
 8002b66:	d109      	bne.n	8002b7c <__libc_init_array+0x24>
 8002b68:	4d0b      	ldr	r5, [pc, #44]	; (8002b98 <__libc_init_array+0x40>)
 8002b6a:	4c0c      	ldr	r4, [pc, #48]	; (8002b9c <__libc_init_array+0x44>)
 8002b6c:	f000 fcf8 	bl	8003560 <_init>
 8002b70:	1b64      	subs	r4, r4, r5
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	2600      	movs	r6, #0
 8002b76:	42a6      	cmp	r6, r4
 8002b78:	d105      	bne.n	8002b86 <__libc_init_array+0x2e>
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b80:	4798      	blx	r3
 8002b82:	3601      	adds	r6, #1
 8002b84:	e7ee      	b.n	8002b64 <__libc_init_array+0xc>
 8002b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8a:	4798      	blx	r3
 8002b8c:	3601      	adds	r6, #1
 8002b8e:	e7f2      	b.n	8002b76 <__libc_init_array+0x1e>
 8002b90:	08003abc 	.word	0x08003abc
 8002b94:	08003abc 	.word	0x08003abc
 8002b98:	08003abc 	.word	0x08003abc
 8002b9c:	08003ac0 	.word	0x08003ac0

08002ba0 <memset>:
 8002ba0:	4402      	add	r2, r0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d100      	bne.n	8002baa <memset+0xa>
 8002ba8:	4770      	bx	lr
 8002baa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bae:	e7f9      	b.n	8002ba4 <memset+0x4>

08002bb0 <strcasecmp>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4d0c      	ldr	r5, [pc, #48]	; (8002be4 <strcasecmp+0x34>)
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	462e      	mov	r6, r5
 8002bb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002bbc:	5d5a      	ldrb	r2, [r3, r5]
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	2a01      	cmp	r2, #1
 8002bc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bc8:	5cb0      	ldrb	r0, [r6, r2]
 8002bca:	f000 0003 	and.w	r0, r0, #3
 8002bce:	bf08      	it	eq
 8002bd0:	3320      	addeq	r3, #32
 8002bd2:	2801      	cmp	r0, #1
 8002bd4:	bf08      	it	eq
 8002bd6:	3220      	addeq	r2, #32
 8002bd8:	1a98      	subs	r0, r3, r2
 8002bda:	d101      	bne.n	8002be0 <strcasecmp+0x30>
 8002bdc:	2a00      	cmp	r2, #0
 8002bde:	d1eb      	bne.n	8002bb8 <strcasecmp+0x8>
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
 8002be2:	bf00      	nop
 8002be4:	08003981 	.word	0x08003981

08002be8 <_strtol_l.isra.0>:
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bee:	d001      	beq.n	8002bf4 <_strtol_l.isra.0+0xc>
 8002bf0:	2b24      	cmp	r3, #36	; 0x24
 8002bf2:	d906      	bls.n	8002c02 <_strtol_l.isra.0+0x1a>
 8002bf4:	f7ff ffaa 	bl	8002b4c <__errno>
 8002bf8:	2316      	movs	r3, #22
 8002bfa:	6003      	str	r3, [r0, #0]
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c02:	4f3a      	ldr	r7, [pc, #232]	; (8002cec <_strtol_l.isra.0+0x104>)
 8002c04:	468e      	mov	lr, r1
 8002c06:	4676      	mov	r6, lr
 8002c08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002c0c:	5de5      	ldrb	r5, [r4, r7]
 8002c0e:	f015 0508 	ands.w	r5, r5, #8
 8002c12:	d1f8      	bne.n	8002c06 <_strtol_l.isra.0+0x1e>
 8002c14:	2c2d      	cmp	r4, #45	; 0x2d
 8002c16:	d134      	bne.n	8002c82 <_strtol_l.isra.0+0x9a>
 8002c18:	f89e 4000 	ldrb.w	r4, [lr]
 8002c1c:	f04f 0801 	mov.w	r8, #1
 8002c20:	f106 0e02 	add.w	lr, r6, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05c      	beq.n	8002ce2 <_strtol_l.isra.0+0xfa>
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d10c      	bne.n	8002c46 <_strtol_l.isra.0+0x5e>
 8002c2c:	2c30      	cmp	r4, #48	; 0x30
 8002c2e:	d10a      	bne.n	8002c46 <_strtol_l.isra.0+0x5e>
 8002c30:	f89e 4000 	ldrb.w	r4, [lr]
 8002c34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002c38:	2c58      	cmp	r4, #88	; 0x58
 8002c3a:	d14d      	bne.n	8002cd8 <_strtol_l.isra.0+0xf0>
 8002c3c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002c40:	2310      	movs	r3, #16
 8002c42:	f10e 0e02 	add.w	lr, lr, #2
 8002c46:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002c4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002c4e:	2600      	movs	r6, #0
 8002c50:	fbbc f9f3 	udiv	r9, ip, r3
 8002c54:	4635      	mov	r5, r6
 8002c56:	fb03 ca19 	mls	sl, r3, r9, ip
 8002c5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002c5e:	2f09      	cmp	r7, #9
 8002c60:	d818      	bhi.n	8002c94 <_strtol_l.isra.0+0xac>
 8002c62:	463c      	mov	r4, r7
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	dd24      	ble.n	8002cb2 <_strtol_l.isra.0+0xca>
 8002c68:	2e00      	cmp	r6, #0
 8002c6a:	db1f      	blt.n	8002cac <_strtol_l.isra.0+0xc4>
 8002c6c:	45a9      	cmp	r9, r5
 8002c6e:	d31d      	bcc.n	8002cac <_strtol_l.isra.0+0xc4>
 8002c70:	d101      	bne.n	8002c76 <_strtol_l.isra.0+0x8e>
 8002c72:	45a2      	cmp	sl, r4
 8002c74:	db1a      	blt.n	8002cac <_strtol_l.isra.0+0xc4>
 8002c76:	fb05 4503 	mla	r5, r5, r3, r4
 8002c7a:	2601      	movs	r6, #1
 8002c7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002c80:	e7eb      	b.n	8002c5a <_strtol_l.isra.0+0x72>
 8002c82:	2c2b      	cmp	r4, #43	; 0x2b
 8002c84:	bf08      	it	eq
 8002c86:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002c8a:	46a8      	mov	r8, r5
 8002c8c:	bf08      	it	eq
 8002c8e:	f106 0e02 	addeq.w	lr, r6, #2
 8002c92:	e7c7      	b.n	8002c24 <_strtol_l.isra.0+0x3c>
 8002c94:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002c98:	2f19      	cmp	r7, #25
 8002c9a:	d801      	bhi.n	8002ca0 <_strtol_l.isra.0+0xb8>
 8002c9c:	3c37      	subs	r4, #55	; 0x37
 8002c9e:	e7e1      	b.n	8002c64 <_strtol_l.isra.0+0x7c>
 8002ca0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002ca4:	2f19      	cmp	r7, #25
 8002ca6:	d804      	bhi.n	8002cb2 <_strtol_l.isra.0+0xca>
 8002ca8:	3c57      	subs	r4, #87	; 0x57
 8002caa:	e7db      	b.n	8002c64 <_strtol_l.isra.0+0x7c>
 8002cac:	f04f 36ff 	mov.w	r6, #4294967295
 8002cb0:	e7e4      	b.n	8002c7c <_strtol_l.isra.0+0x94>
 8002cb2:	2e00      	cmp	r6, #0
 8002cb4:	da05      	bge.n	8002cc2 <_strtol_l.isra.0+0xda>
 8002cb6:	2322      	movs	r3, #34	; 0x22
 8002cb8:	6003      	str	r3, [r0, #0]
 8002cba:	4665      	mov	r5, ip
 8002cbc:	b942      	cbnz	r2, 8002cd0 <_strtol_l.isra.0+0xe8>
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	e79d      	b.n	8002bfe <_strtol_l.isra.0+0x16>
 8002cc2:	f1b8 0f00 	cmp.w	r8, #0
 8002cc6:	d000      	beq.n	8002cca <_strtol_l.isra.0+0xe2>
 8002cc8:	426d      	negs	r5, r5
 8002cca:	2a00      	cmp	r2, #0
 8002ccc:	d0f7      	beq.n	8002cbe <_strtol_l.isra.0+0xd6>
 8002cce:	b10e      	cbz	r6, 8002cd4 <_strtol_l.isra.0+0xec>
 8002cd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002cd4:	6011      	str	r1, [r2, #0]
 8002cd6:	e7f2      	b.n	8002cbe <_strtol_l.isra.0+0xd6>
 8002cd8:	2430      	movs	r4, #48	; 0x30
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1b3      	bne.n	8002c46 <_strtol_l.isra.0+0x5e>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	e7b1      	b.n	8002c46 <_strtol_l.isra.0+0x5e>
 8002ce2:	2c30      	cmp	r4, #48	; 0x30
 8002ce4:	d0a4      	beq.n	8002c30 <_strtol_l.isra.0+0x48>
 8002ce6:	230a      	movs	r3, #10
 8002ce8:	e7ad      	b.n	8002c46 <_strtol_l.isra.0+0x5e>
 8002cea:	bf00      	nop
 8002cec:	08003981 	.word	0x08003981

08002cf0 <strtol>:
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	460a      	mov	r2, r1
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	4802      	ldr	r0, [pc, #8]	; (8002d00 <strtol+0x10>)
 8002cf8:	6800      	ldr	r0, [r0, #0]
 8002cfa:	f7ff bf75 	b.w	8002be8 <_strtol_l.isra.0>
 8002cfe:	bf00      	nop
 8002d00:	2000000c 	.word	0x2000000c

08002d04 <_vsiprintf_r>:
 8002d04:	b500      	push	{lr}
 8002d06:	b09b      	sub	sp, #108	; 0x6c
 8002d08:	9100      	str	r1, [sp, #0]
 8002d0a:	9104      	str	r1, [sp, #16]
 8002d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d10:	9105      	str	r1, [sp, #20]
 8002d12:	9102      	str	r1, [sp, #8]
 8002d14:	4905      	ldr	r1, [pc, #20]	; (8002d2c <_vsiprintf_r+0x28>)
 8002d16:	9103      	str	r1, [sp, #12]
 8002d18:	4669      	mov	r1, sp
 8002d1a:	f000 f86f 	bl	8002dfc <_svfiprintf_r>
 8002d1e:	9b00      	ldr	r3, [sp, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	b01b      	add	sp, #108	; 0x6c
 8002d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d2a:	bf00      	nop
 8002d2c:	ffff0208 	.word	0xffff0208

08002d30 <vsiprintf>:
 8002d30:	4613      	mov	r3, r2
 8002d32:	460a      	mov	r2, r1
 8002d34:	4601      	mov	r1, r0
 8002d36:	4802      	ldr	r0, [pc, #8]	; (8002d40 <vsiprintf+0x10>)
 8002d38:	6800      	ldr	r0, [r0, #0]
 8002d3a:	f7ff bfe3 	b.w	8002d04 <_vsiprintf_r>
 8002d3e:	bf00      	nop
 8002d40:	2000000c 	.word	0x2000000c

08002d44 <__ssputs_r>:
 8002d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d48:	688e      	ldr	r6, [r1, #8]
 8002d4a:	429e      	cmp	r6, r3
 8002d4c:	4682      	mov	sl, r0
 8002d4e:	460c      	mov	r4, r1
 8002d50:	4690      	mov	r8, r2
 8002d52:	461f      	mov	r7, r3
 8002d54:	d838      	bhi.n	8002dc8 <__ssputs_r+0x84>
 8002d56:	898a      	ldrh	r2, [r1, #12]
 8002d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d5c:	d032      	beq.n	8002dc4 <__ssputs_r+0x80>
 8002d5e:	6825      	ldr	r5, [r4, #0]
 8002d60:	6909      	ldr	r1, [r1, #16]
 8002d62:	eba5 0901 	sub.w	r9, r5, r1
 8002d66:	6965      	ldr	r5, [r4, #20]
 8002d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d70:	3301      	adds	r3, #1
 8002d72:	444b      	add	r3, r9
 8002d74:	106d      	asrs	r5, r5, #1
 8002d76:	429d      	cmp	r5, r3
 8002d78:	bf38      	it	cc
 8002d7a:	461d      	movcc	r5, r3
 8002d7c:	0553      	lsls	r3, r2, #21
 8002d7e:	d531      	bpl.n	8002de4 <__ssputs_r+0xa0>
 8002d80:	4629      	mov	r1, r5
 8002d82:	f000 fb47 	bl	8003414 <_malloc_r>
 8002d86:	4606      	mov	r6, r0
 8002d88:	b950      	cbnz	r0, 8002da0 <__ssputs_r+0x5c>
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	f8ca 3000 	str.w	r3, [sl]
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d96:	81a3      	strh	r3, [r4, #12]
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da0:	6921      	ldr	r1, [r4, #16]
 8002da2:	464a      	mov	r2, r9
 8002da4:	f000 fabe 	bl	8003324 <memcpy>
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db2:	81a3      	strh	r3, [r4, #12]
 8002db4:	6126      	str	r6, [r4, #16]
 8002db6:	6165      	str	r5, [r4, #20]
 8002db8:	444e      	add	r6, r9
 8002dba:	eba5 0509 	sub.w	r5, r5, r9
 8002dbe:	6026      	str	r6, [r4, #0]
 8002dc0:	60a5      	str	r5, [r4, #8]
 8002dc2:	463e      	mov	r6, r7
 8002dc4:	42be      	cmp	r6, r7
 8002dc6:	d900      	bls.n	8002dca <__ssputs_r+0x86>
 8002dc8:	463e      	mov	r6, r7
 8002dca:	4632      	mov	r2, r6
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	4641      	mov	r1, r8
 8002dd0:	f000 fab6 	bl	8003340 <memmove>
 8002dd4:	68a3      	ldr	r3, [r4, #8]
 8002dd6:	6822      	ldr	r2, [r4, #0]
 8002dd8:	1b9b      	subs	r3, r3, r6
 8002dda:	4432      	add	r2, r6
 8002ddc:	60a3      	str	r3, [r4, #8]
 8002dde:	6022      	str	r2, [r4, #0]
 8002de0:	2000      	movs	r0, #0
 8002de2:	e7db      	b.n	8002d9c <__ssputs_r+0x58>
 8002de4:	462a      	mov	r2, r5
 8002de6:	f000 fb6f 	bl	80034c8 <_realloc_r>
 8002dea:	4606      	mov	r6, r0
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d1e1      	bne.n	8002db4 <__ssputs_r+0x70>
 8002df0:	6921      	ldr	r1, [r4, #16]
 8002df2:	4650      	mov	r0, sl
 8002df4:	f000 fabe 	bl	8003374 <_free_r>
 8002df8:	e7c7      	b.n	8002d8a <__ssputs_r+0x46>
	...

08002dfc <_svfiprintf_r>:
 8002dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e00:	4698      	mov	r8, r3
 8002e02:	898b      	ldrh	r3, [r1, #12]
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	b09d      	sub	sp, #116	; 0x74
 8002e08:	4607      	mov	r7, r0
 8002e0a:	460d      	mov	r5, r1
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	d50e      	bpl.n	8002e2e <_svfiprintf_r+0x32>
 8002e10:	690b      	ldr	r3, [r1, #16]
 8002e12:	b963      	cbnz	r3, 8002e2e <_svfiprintf_r+0x32>
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	f000 fafd 	bl	8003414 <_malloc_r>
 8002e1a:	6028      	str	r0, [r5, #0]
 8002e1c:	6128      	str	r0, [r5, #16]
 8002e1e:	b920      	cbnz	r0, 8002e2a <_svfiprintf_r+0x2e>
 8002e20:	230c      	movs	r3, #12
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	e0d1      	b.n	8002fce <_svfiprintf_r+0x1d2>
 8002e2a:	2340      	movs	r3, #64	; 0x40
 8002e2c:	616b      	str	r3, [r5, #20]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9309      	str	r3, [sp, #36]	; 0x24
 8002e32:	2320      	movs	r3, #32
 8002e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e3c:	2330      	movs	r3, #48	; 0x30
 8002e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fe8 <_svfiprintf_r+0x1ec>
 8002e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e46:	f04f 0901 	mov.w	r9, #1
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	469a      	mov	sl, r3
 8002e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e52:	b10a      	cbz	r2, 8002e58 <_svfiprintf_r+0x5c>
 8002e54:	2a25      	cmp	r2, #37	; 0x25
 8002e56:	d1f9      	bne.n	8002e4c <_svfiprintf_r+0x50>
 8002e58:	ebba 0b04 	subs.w	fp, sl, r4
 8002e5c:	d00b      	beq.n	8002e76 <_svfiprintf_r+0x7a>
 8002e5e:	465b      	mov	r3, fp
 8002e60:	4622      	mov	r2, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	4638      	mov	r0, r7
 8002e66:	f7ff ff6d 	bl	8002d44 <__ssputs_r>
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	f000 80aa 	beq.w	8002fc4 <_svfiprintf_r+0x1c8>
 8002e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e72:	445a      	add	r2, fp
 8002e74:	9209      	str	r2, [sp, #36]	; 0x24
 8002e76:	f89a 3000 	ldrb.w	r3, [sl]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80a2 	beq.w	8002fc4 <_svfiprintf_r+0x1c8>
 8002e80:	2300      	movs	r3, #0
 8002e82:	f04f 32ff 	mov.w	r2, #4294967295
 8002e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e8a:	f10a 0a01 	add.w	sl, sl, #1
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	9307      	str	r3, [sp, #28]
 8002e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e96:	931a      	str	r3, [sp, #104]	; 0x68
 8002e98:	4654      	mov	r4, sl
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ea0:	4851      	ldr	r0, [pc, #324]	; (8002fe8 <_svfiprintf_r+0x1ec>)
 8002ea2:	f7fd f9bd 	bl	8000220 <memchr>
 8002ea6:	9a04      	ldr	r2, [sp, #16]
 8002ea8:	b9d8      	cbnz	r0, 8002ee2 <_svfiprintf_r+0xe6>
 8002eaa:	06d0      	lsls	r0, r2, #27
 8002eac:	bf44      	itt	mi
 8002eae:	2320      	movmi	r3, #32
 8002eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002eb4:	0711      	lsls	r1, r2, #28
 8002eb6:	bf44      	itt	mi
 8002eb8:	232b      	movmi	r3, #43	; 0x2b
 8002eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8002ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec4:	d015      	beq.n	8002ef2 <_svfiprintf_r+0xf6>
 8002ec6:	9a07      	ldr	r2, [sp, #28]
 8002ec8:	4654      	mov	r4, sl
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f04f 0c0a 	mov.w	ip, #10
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ed6:	3b30      	subs	r3, #48	; 0x30
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	d94e      	bls.n	8002f7a <_svfiprintf_r+0x17e>
 8002edc:	b1b0      	cbz	r0, 8002f0c <_svfiprintf_r+0x110>
 8002ede:	9207      	str	r2, [sp, #28]
 8002ee0:	e014      	b.n	8002f0c <_svfiprintf_r+0x110>
 8002ee2:	eba0 0308 	sub.w	r3, r0, r8
 8002ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	9304      	str	r3, [sp, #16]
 8002eee:	46a2      	mov	sl, r4
 8002ef0:	e7d2      	b.n	8002e98 <_svfiprintf_r+0x9c>
 8002ef2:	9b03      	ldr	r3, [sp, #12]
 8002ef4:	1d19      	adds	r1, r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	9103      	str	r1, [sp, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bfbb      	ittet	lt
 8002efe:	425b      	neglt	r3, r3
 8002f00:	f042 0202 	orrlt.w	r2, r2, #2
 8002f04:	9307      	strge	r3, [sp, #28]
 8002f06:	9307      	strlt	r3, [sp, #28]
 8002f08:	bfb8      	it	lt
 8002f0a:	9204      	strlt	r2, [sp, #16]
 8002f0c:	7823      	ldrb	r3, [r4, #0]
 8002f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8002f10:	d10c      	bne.n	8002f2c <_svfiprintf_r+0x130>
 8002f12:	7863      	ldrb	r3, [r4, #1]
 8002f14:	2b2a      	cmp	r3, #42	; 0x2a
 8002f16:	d135      	bne.n	8002f84 <_svfiprintf_r+0x188>
 8002f18:	9b03      	ldr	r3, [sp, #12]
 8002f1a:	1d1a      	adds	r2, r3, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	9203      	str	r2, [sp, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bfb8      	it	lt
 8002f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f28:	3402      	adds	r4, #2
 8002f2a:	9305      	str	r3, [sp, #20]
 8002f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ff8 <_svfiprintf_r+0x1fc>
 8002f30:	7821      	ldrb	r1, [r4, #0]
 8002f32:	2203      	movs	r2, #3
 8002f34:	4650      	mov	r0, sl
 8002f36:	f7fd f973 	bl	8000220 <memchr>
 8002f3a:	b140      	cbz	r0, 8002f4e <_svfiprintf_r+0x152>
 8002f3c:	2340      	movs	r3, #64	; 0x40
 8002f3e:	eba0 000a 	sub.w	r0, r0, sl
 8002f42:	fa03 f000 	lsl.w	r0, r3, r0
 8002f46:	9b04      	ldr	r3, [sp, #16]
 8002f48:	4303      	orrs	r3, r0
 8002f4a:	3401      	adds	r4, #1
 8002f4c:	9304      	str	r3, [sp, #16]
 8002f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f52:	4826      	ldr	r0, [pc, #152]	; (8002fec <_svfiprintf_r+0x1f0>)
 8002f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f58:	2206      	movs	r2, #6
 8002f5a:	f7fd f961 	bl	8000220 <memchr>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d038      	beq.n	8002fd4 <_svfiprintf_r+0x1d8>
 8002f62:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <_svfiprintf_r+0x1f4>)
 8002f64:	bb1b      	cbnz	r3, 8002fae <_svfiprintf_r+0x1b2>
 8002f66:	9b03      	ldr	r3, [sp, #12]
 8002f68:	3307      	adds	r3, #7
 8002f6a:	f023 0307 	bic.w	r3, r3, #7
 8002f6e:	3308      	adds	r3, #8
 8002f70:	9303      	str	r3, [sp, #12]
 8002f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f74:	4433      	add	r3, r6
 8002f76:	9309      	str	r3, [sp, #36]	; 0x24
 8002f78:	e767      	b.n	8002e4a <_svfiprintf_r+0x4e>
 8002f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f7e:	460c      	mov	r4, r1
 8002f80:	2001      	movs	r0, #1
 8002f82:	e7a5      	b.n	8002ed0 <_svfiprintf_r+0xd4>
 8002f84:	2300      	movs	r3, #0
 8002f86:	3401      	adds	r4, #1
 8002f88:	9305      	str	r3, [sp, #20]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f04f 0c0a 	mov.w	ip, #10
 8002f90:	4620      	mov	r0, r4
 8002f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f96:	3a30      	subs	r2, #48	; 0x30
 8002f98:	2a09      	cmp	r2, #9
 8002f9a:	d903      	bls.n	8002fa4 <_svfiprintf_r+0x1a8>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0c5      	beq.n	8002f2c <_svfiprintf_r+0x130>
 8002fa0:	9105      	str	r1, [sp, #20]
 8002fa2:	e7c3      	b.n	8002f2c <_svfiprintf_r+0x130>
 8002fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fa8:	4604      	mov	r4, r0
 8002faa:	2301      	movs	r3, #1
 8002fac:	e7f0      	b.n	8002f90 <_svfiprintf_r+0x194>
 8002fae:	ab03      	add	r3, sp, #12
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	462a      	mov	r2, r5
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <_svfiprintf_r+0x1f8>)
 8002fb6:	a904      	add	r1, sp, #16
 8002fb8:	4638      	mov	r0, r7
 8002fba:	f3af 8000 	nop.w
 8002fbe:	1c42      	adds	r2, r0, #1
 8002fc0:	4606      	mov	r6, r0
 8002fc2:	d1d6      	bne.n	8002f72 <_svfiprintf_r+0x176>
 8002fc4:	89ab      	ldrh	r3, [r5, #12]
 8002fc6:	065b      	lsls	r3, r3, #25
 8002fc8:	f53f af2c 	bmi.w	8002e24 <_svfiprintf_r+0x28>
 8002fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fce:	b01d      	add	sp, #116	; 0x74
 8002fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd4:	ab03      	add	r3, sp, #12
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	462a      	mov	r2, r5
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <_svfiprintf_r+0x1f8>)
 8002fdc:	a904      	add	r1, sp, #16
 8002fde:	4638      	mov	r0, r7
 8002fe0:	f000 f87a 	bl	80030d8 <_printf_i>
 8002fe4:	e7eb      	b.n	8002fbe <_svfiprintf_r+0x1c2>
 8002fe6:	bf00      	nop
 8002fe8:	08003a81 	.word	0x08003a81
 8002fec:	08003a8b 	.word	0x08003a8b
 8002ff0:	00000000 	.word	0x00000000
 8002ff4:	08002d45 	.word	0x08002d45
 8002ff8:	08003a87 	.word	0x08003a87

08002ffc <_printf_common>:
 8002ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003000:	4616      	mov	r6, r2
 8003002:	4699      	mov	r9, r3
 8003004:	688a      	ldr	r2, [r1, #8]
 8003006:	690b      	ldr	r3, [r1, #16]
 8003008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800300c:	4293      	cmp	r3, r2
 800300e:	bfb8      	it	lt
 8003010:	4613      	movlt	r3, r2
 8003012:	6033      	str	r3, [r6, #0]
 8003014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003018:	4607      	mov	r7, r0
 800301a:	460c      	mov	r4, r1
 800301c:	b10a      	cbz	r2, 8003022 <_printf_common+0x26>
 800301e:	3301      	adds	r3, #1
 8003020:	6033      	str	r3, [r6, #0]
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	0699      	lsls	r1, r3, #26
 8003026:	bf42      	ittt	mi
 8003028:	6833      	ldrmi	r3, [r6, #0]
 800302a:	3302      	addmi	r3, #2
 800302c:	6033      	strmi	r3, [r6, #0]
 800302e:	6825      	ldr	r5, [r4, #0]
 8003030:	f015 0506 	ands.w	r5, r5, #6
 8003034:	d106      	bne.n	8003044 <_printf_common+0x48>
 8003036:	f104 0a19 	add.w	sl, r4, #25
 800303a:	68e3      	ldr	r3, [r4, #12]
 800303c:	6832      	ldr	r2, [r6, #0]
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	42ab      	cmp	r3, r5
 8003042:	dc26      	bgt.n	8003092 <_printf_common+0x96>
 8003044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003048:	1e13      	subs	r3, r2, #0
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	bf18      	it	ne
 800304e:	2301      	movne	r3, #1
 8003050:	0692      	lsls	r2, r2, #26
 8003052:	d42b      	bmi.n	80030ac <_printf_common+0xb0>
 8003054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003058:	4649      	mov	r1, r9
 800305a:	4638      	mov	r0, r7
 800305c:	47c0      	blx	r8
 800305e:	3001      	adds	r0, #1
 8003060:	d01e      	beq.n	80030a0 <_printf_common+0xa4>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	68e5      	ldr	r5, [r4, #12]
 8003066:	6832      	ldr	r2, [r6, #0]
 8003068:	f003 0306 	and.w	r3, r3, #6
 800306c:	2b04      	cmp	r3, #4
 800306e:	bf08      	it	eq
 8003070:	1aad      	subeq	r5, r5, r2
 8003072:	68a3      	ldr	r3, [r4, #8]
 8003074:	6922      	ldr	r2, [r4, #16]
 8003076:	bf0c      	ite	eq
 8003078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800307c:	2500      	movne	r5, #0
 800307e:	4293      	cmp	r3, r2
 8003080:	bfc4      	itt	gt
 8003082:	1a9b      	subgt	r3, r3, r2
 8003084:	18ed      	addgt	r5, r5, r3
 8003086:	2600      	movs	r6, #0
 8003088:	341a      	adds	r4, #26
 800308a:	42b5      	cmp	r5, r6
 800308c:	d11a      	bne.n	80030c4 <_printf_common+0xc8>
 800308e:	2000      	movs	r0, #0
 8003090:	e008      	b.n	80030a4 <_printf_common+0xa8>
 8003092:	2301      	movs	r3, #1
 8003094:	4652      	mov	r2, sl
 8003096:	4649      	mov	r1, r9
 8003098:	4638      	mov	r0, r7
 800309a:	47c0      	blx	r8
 800309c:	3001      	adds	r0, #1
 800309e:	d103      	bne.n	80030a8 <_printf_common+0xac>
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a8:	3501      	adds	r5, #1
 80030aa:	e7c6      	b.n	800303a <_printf_common+0x3e>
 80030ac:	18e1      	adds	r1, r4, r3
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	2030      	movs	r0, #48	; 0x30
 80030b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030b6:	4422      	add	r2, r4
 80030b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030c0:	3302      	adds	r3, #2
 80030c2:	e7c7      	b.n	8003054 <_printf_common+0x58>
 80030c4:	2301      	movs	r3, #1
 80030c6:	4622      	mov	r2, r4
 80030c8:	4649      	mov	r1, r9
 80030ca:	4638      	mov	r0, r7
 80030cc:	47c0      	blx	r8
 80030ce:	3001      	adds	r0, #1
 80030d0:	d0e6      	beq.n	80030a0 <_printf_common+0xa4>
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7d9      	b.n	800308a <_printf_common+0x8e>
	...

080030d8 <_printf_i>:
 80030d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030dc:	460c      	mov	r4, r1
 80030de:	4691      	mov	r9, r2
 80030e0:	7e27      	ldrb	r7, [r4, #24]
 80030e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030e4:	2f78      	cmp	r7, #120	; 0x78
 80030e6:	4680      	mov	r8, r0
 80030e8:	469a      	mov	sl, r3
 80030ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030ee:	d807      	bhi.n	8003100 <_printf_i+0x28>
 80030f0:	2f62      	cmp	r7, #98	; 0x62
 80030f2:	d80a      	bhi.n	800310a <_printf_i+0x32>
 80030f4:	2f00      	cmp	r7, #0
 80030f6:	f000 80d8 	beq.w	80032aa <_printf_i+0x1d2>
 80030fa:	2f58      	cmp	r7, #88	; 0x58
 80030fc:	f000 80a3 	beq.w	8003246 <_printf_i+0x16e>
 8003100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003108:	e03a      	b.n	8003180 <_printf_i+0xa8>
 800310a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800310e:	2b15      	cmp	r3, #21
 8003110:	d8f6      	bhi.n	8003100 <_printf_i+0x28>
 8003112:	a001      	add	r0, pc, #4	; (adr r0, 8003118 <_printf_i+0x40>)
 8003114:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003118:	08003171 	.word	0x08003171
 800311c:	08003185 	.word	0x08003185
 8003120:	08003101 	.word	0x08003101
 8003124:	08003101 	.word	0x08003101
 8003128:	08003101 	.word	0x08003101
 800312c:	08003101 	.word	0x08003101
 8003130:	08003185 	.word	0x08003185
 8003134:	08003101 	.word	0x08003101
 8003138:	08003101 	.word	0x08003101
 800313c:	08003101 	.word	0x08003101
 8003140:	08003101 	.word	0x08003101
 8003144:	08003291 	.word	0x08003291
 8003148:	080031b5 	.word	0x080031b5
 800314c:	08003273 	.word	0x08003273
 8003150:	08003101 	.word	0x08003101
 8003154:	08003101 	.word	0x08003101
 8003158:	080032b3 	.word	0x080032b3
 800315c:	08003101 	.word	0x08003101
 8003160:	080031b5 	.word	0x080031b5
 8003164:	08003101 	.word	0x08003101
 8003168:	08003101 	.word	0x08003101
 800316c:	0800327b 	.word	0x0800327b
 8003170:	680b      	ldr	r3, [r1, #0]
 8003172:	1d1a      	adds	r2, r3, #4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	600a      	str	r2, [r1, #0]
 8003178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800317c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003180:	2301      	movs	r3, #1
 8003182:	e0a3      	b.n	80032cc <_printf_i+0x1f4>
 8003184:	6825      	ldr	r5, [r4, #0]
 8003186:	6808      	ldr	r0, [r1, #0]
 8003188:	062e      	lsls	r6, r5, #24
 800318a:	f100 0304 	add.w	r3, r0, #4
 800318e:	d50a      	bpl.n	80031a6 <_printf_i+0xce>
 8003190:	6805      	ldr	r5, [r0, #0]
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	2d00      	cmp	r5, #0
 8003196:	da03      	bge.n	80031a0 <_printf_i+0xc8>
 8003198:	232d      	movs	r3, #45	; 0x2d
 800319a:	426d      	negs	r5, r5
 800319c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a0:	485e      	ldr	r0, [pc, #376]	; (800331c <_printf_i+0x244>)
 80031a2:	230a      	movs	r3, #10
 80031a4:	e019      	b.n	80031da <_printf_i+0x102>
 80031a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031aa:	6805      	ldr	r5, [r0, #0]
 80031ac:	600b      	str	r3, [r1, #0]
 80031ae:	bf18      	it	ne
 80031b0:	b22d      	sxthne	r5, r5
 80031b2:	e7ef      	b.n	8003194 <_printf_i+0xbc>
 80031b4:	680b      	ldr	r3, [r1, #0]
 80031b6:	6825      	ldr	r5, [r4, #0]
 80031b8:	1d18      	adds	r0, r3, #4
 80031ba:	6008      	str	r0, [r1, #0]
 80031bc:	0628      	lsls	r0, r5, #24
 80031be:	d501      	bpl.n	80031c4 <_printf_i+0xec>
 80031c0:	681d      	ldr	r5, [r3, #0]
 80031c2:	e002      	b.n	80031ca <_printf_i+0xf2>
 80031c4:	0669      	lsls	r1, r5, #25
 80031c6:	d5fb      	bpl.n	80031c0 <_printf_i+0xe8>
 80031c8:	881d      	ldrh	r5, [r3, #0]
 80031ca:	4854      	ldr	r0, [pc, #336]	; (800331c <_printf_i+0x244>)
 80031cc:	2f6f      	cmp	r7, #111	; 0x6f
 80031ce:	bf0c      	ite	eq
 80031d0:	2308      	moveq	r3, #8
 80031d2:	230a      	movne	r3, #10
 80031d4:	2100      	movs	r1, #0
 80031d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031da:	6866      	ldr	r6, [r4, #4]
 80031dc:	60a6      	str	r6, [r4, #8]
 80031de:	2e00      	cmp	r6, #0
 80031e0:	bfa2      	ittt	ge
 80031e2:	6821      	ldrge	r1, [r4, #0]
 80031e4:	f021 0104 	bicge.w	r1, r1, #4
 80031e8:	6021      	strge	r1, [r4, #0]
 80031ea:	b90d      	cbnz	r5, 80031f0 <_printf_i+0x118>
 80031ec:	2e00      	cmp	r6, #0
 80031ee:	d04d      	beq.n	800328c <_printf_i+0x1b4>
 80031f0:	4616      	mov	r6, r2
 80031f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80031f6:	fb03 5711 	mls	r7, r3, r1, r5
 80031fa:	5dc7      	ldrb	r7, [r0, r7]
 80031fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003200:	462f      	mov	r7, r5
 8003202:	42bb      	cmp	r3, r7
 8003204:	460d      	mov	r5, r1
 8003206:	d9f4      	bls.n	80031f2 <_printf_i+0x11a>
 8003208:	2b08      	cmp	r3, #8
 800320a:	d10b      	bne.n	8003224 <_printf_i+0x14c>
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	07df      	lsls	r7, r3, #31
 8003210:	d508      	bpl.n	8003224 <_printf_i+0x14c>
 8003212:	6923      	ldr	r3, [r4, #16]
 8003214:	6861      	ldr	r1, [r4, #4]
 8003216:	4299      	cmp	r1, r3
 8003218:	bfde      	ittt	le
 800321a:	2330      	movle	r3, #48	; 0x30
 800321c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003224:	1b92      	subs	r2, r2, r6
 8003226:	6122      	str	r2, [r4, #16]
 8003228:	f8cd a000 	str.w	sl, [sp]
 800322c:	464b      	mov	r3, r9
 800322e:	aa03      	add	r2, sp, #12
 8003230:	4621      	mov	r1, r4
 8003232:	4640      	mov	r0, r8
 8003234:	f7ff fee2 	bl	8002ffc <_printf_common>
 8003238:	3001      	adds	r0, #1
 800323a:	d14c      	bne.n	80032d6 <_printf_i+0x1fe>
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	b004      	add	sp, #16
 8003242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003246:	4835      	ldr	r0, [pc, #212]	; (800331c <_printf_i+0x244>)
 8003248:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	680e      	ldr	r6, [r1, #0]
 8003250:	061f      	lsls	r7, r3, #24
 8003252:	f856 5b04 	ldr.w	r5, [r6], #4
 8003256:	600e      	str	r6, [r1, #0]
 8003258:	d514      	bpl.n	8003284 <_printf_i+0x1ac>
 800325a:	07d9      	lsls	r1, r3, #31
 800325c:	bf44      	itt	mi
 800325e:	f043 0320 	orrmi.w	r3, r3, #32
 8003262:	6023      	strmi	r3, [r4, #0]
 8003264:	b91d      	cbnz	r5, 800326e <_printf_i+0x196>
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	f023 0320 	bic.w	r3, r3, #32
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	2310      	movs	r3, #16
 8003270:	e7b0      	b.n	80031d4 <_printf_i+0xfc>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	f043 0320 	orr.w	r3, r3, #32
 8003278:	6023      	str	r3, [r4, #0]
 800327a:	2378      	movs	r3, #120	; 0x78
 800327c:	4828      	ldr	r0, [pc, #160]	; (8003320 <_printf_i+0x248>)
 800327e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003282:	e7e3      	b.n	800324c <_printf_i+0x174>
 8003284:	065e      	lsls	r6, r3, #25
 8003286:	bf48      	it	mi
 8003288:	b2ad      	uxthmi	r5, r5
 800328a:	e7e6      	b.n	800325a <_printf_i+0x182>
 800328c:	4616      	mov	r6, r2
 800328e:	e7bb      	b.n	8003208 <_printf_i+0x130>
 8003290:	680b      	ldr	r3, [r1, #0]
 8003292:	6826      	ldr	r6, [r4, #0]
 8003294:	6960      	ldr	r0, [r4, #20]
 8003296:	1d1d      	adds	r5, r3, #4
 8003298:	600d      	str	r5, [r1, #0]
 800329a:	0635      	lsls	r5, r6, #24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	d501      	bpl.n	80032a4 <_printf_i+0x1cc>
 80032a0:	6018      	str	r0, [r3, #0]
 80032a2:	e002      	b.n	80032aa <_printf_i+0x1d2>
 80032a4:	0671      	lsls	r1, r6, #25
 80032a6:	d5fb      	bpl.n	80032a0 <_printf_i+0x1c8>
 80032a8:	8018      	strh	r0, [r3, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	6123      	str	r3, [r4, #16]
 80032ae:	4616      	mov	r6, r2
 80032b0:	e7ba      	b.n	8003228 <_printf_i+0x150>
 80032b2:	680b      	ldr	r3, [r1, #0]
 80032b4:	1d1a      	adds	r2, r3, #4
 80032b6:	600a      	str	r2, [r1, #0]
 80032b8:	681e      	ldr	r6, [r3, #0]
 80032ba:	6862      	ldr	r2, [r4, #4]
 80032bc:	2100      	movs	r1, #0
 80032be:	4630      	mov	r0, r6
 80032c0:	f7fc ffae 	bl	8000220 <memchr>
 80032c4:	b108      	cbz	r0, 80032ca <_printf_i+0x1f2>
 80032c6:	1b80      	subs	r0, r0, r6
 80032c8:	6060      	str	r0, [r4, #4]
 80032ca:	6863      	ldr	r3, [r4, #4]
 80032cc:	6123      	str	r3, [r4, #16]
 80032ce:	2300      	movs	r3, #0
 80032d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032d4:	e7a8      	b.n	8003228 <_printf_i+0x150>
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	4632      	mov	r2, r6
 80032da:	4649      	mov	r1, r9
 80032dc:	4640      	mov	r0, r8
 80032de:	47d0      	blx	sl
 80032e0:	3001      	adds	r0, #1
 80032e2:	d0ab      	beq.n	800323c <_printf_i+0x164>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	079b      	lsls	r3, r3, #30
 80032e8:	d413      	bmi.n	8003312 <_printf_i+0x23a>
 80032ea:	68e0      	ldr	r0, [r4, #12]
 80032ec:	9b03      	ldr	r3, [sp, #12]
 80032ee:	4298      	cmp	r0, r3
 80032f0:	bfb8      	it	lt
 80032f2:	4618      	movlt	r0, r3
 80032f4:	e7a4      	b.n	8003240 <_printf_i+0x168>
 80032f6:	2301      	movs	r3, #1
 80032f8:	4632      	mov	r2, r6
 80032fa:	4649      	mov	r1, r9
 80032fc:	4640      	mov	r0, r8
 80032fe:	47d0      	blx	sl
 8003300:	3001      	adds	r0, #1
 8003302:	d09b      	beq.n	800323c <_printf_i+0x164>
 8003304:	3501      	adds	r5, #1
 8003306:	68e3      	ldr	r3, [r4, #12]
 8003308:	9903      	ldr	r1, [sp, #12]
 800330a:	1a5b      	subs	r3, r3, r1
 800330c:	42ab      	cmp	r3, r5
 800330e:	dcf2      	bgt.n	80032f6 <_printf_i+0x21e>
 8003310:	e7eb      	b.n	80032ea <_printf_i+0x212>
 8003312:	2500      	movs	r5, #0
 8003314:	f104 0619 	add.w	r6, r4, #25
 8003318:	e7f5      	b.n	8003306 <_printf_i+0x22e>
 800331a:	bf00      	nop
 800331c:	08003a92 	.word	0x08003a92
 8003320:	08003aa3 	.word	0x08003aa3

08003324 <memcpy>:
 8003324:	440a      	add	r2, r1
 8003326:	4291      	cmp	r1, r2
 8003328:	f100 33ff 	add.w	r3, r0, #4294967295
 800332c:	d100      	bne.n	8003330 <memcpy+0xc>
 800332e:	4770      	bx	lr
 8003330:	b510      	push	{r4, lr}
 8003332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800333a:	4291      	cmp	r1, r2
 800333c:	d1f9      	bne.n	8003332 <memcpy+0xe>
 800333e:	bd10      	pop	{r4, pc}

08003340 <memmove>:
 8003340:	4288      	cmp	r0, r1
 8003342:	b510      	push	{r4, lr}
 8003344:	eb01 0402 	add.w	r4, r1, r2
 8003348:	d902      	bls.n	8003350 <memmove+0x10>
 800334a:	4284      	cmp	r4, r0
 800334c:	4623      	mov	r3, r4
 800334e:	d807      	bhi.n	8003360 <memmove+0x20>
 8003350:	1e43      	subs	r3, r0, #1
 8003352:	42a1      	cmp	r1, r4
 8003354:	d008      	beq.n	8003368 <memmove+0x28>
 8003356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800335a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800335e:	e7f8      	b.n	8003352 <memmove+0x12>
 8003360:	4402      	add	r2, r0
 8003362:	4601      	mov	r1, r0
 8003364:	428a      	cmp	r2, r1
 8003366:	d100      	bne.n	800336a <memmove+0x2a>
 8003368:	bd10      	pop	{r4, pc}
 800336a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800336e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003372:	e7f7      	b.n	8003364 <memmove+0x24>

08003374 <_free_r>:
 8003374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003376:	2900      	cmp	r1, #0
 8003378:	d048      	beq.n	800340c <_free_r+0x98>
 800337a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800337e:	9001      	str	r0, [sp, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f1a1 0404 	sub.w	r4, r1, #4
 8003386:	bfb8      	it	lt
 8003388:	18e4      	addlt	r4, r4, r3
 800338a:	f000 f8d3 	bl	8003534 <__malloc_lock>
 800338e:	4a20      	ldr	r2, [pc, #128]	; (8003410 <_free_r+0x9c>)
 8003390:	9801      	ldr	r0, [sp, #4]
 8003392:	6813      	ldr	r3, [r2, #0]
 8003394:	4615      	mov	r5, r2
 8003396:	b933      	cbnz	r3, 80033a6 <_free_r+0x32>
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	6014      	str	r4, [r2, #0]
 800339c:	b003      	add	sp, #12
 800339e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033a2:	f000 b8cd 	b.w	8003540 <__malloc_unlock>
 80033a6:	42a3      	cmp	r3, r4
 80033a8:	d90b      	bls.n	80033c2 <_free_r+0x4e>
 80033aa:	6821      	ldr	r1, [r4, #0]
 80033ac:	1862      	adds	r2, r4, r1
 80033ae:	4293      	cmp	r3, r2
 80033b0:	bf04      	itt	eq
 80033b2:	681a      	ldreq	r2, [r3, #0]
 80033b4:	685b      	ldreq	r3, [r3, #4]
 80033b6:	6063      	str	r3, [r4, #4]
 80033b8:	bf04      	itt	eq
 80033ba:	1852      	addeq	r2, r2, r1
 80033bc:	6022      	streq	r2, [r4, #0]
 80033be:	602c      	str	r4, [r5, #0]
 80033c0:	e7ec      	b.n	800339c <_free_r+0x28>
 80033c2:	461a      	mov	r2, r3
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	b10b      	cbz	r3, 80033cc <_free_r+0x58>
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	d9fa      	bls.n	80033c2 <_free_r+0x4e>
 80033cc:	6811      	ldr	r1, [r2, #0]
 80033ce:	1855      	adds	r5, r2, r1
 80033d0:	42a5      	cmp	r5, r4
 80033d2:	d10b      	bne.n	80033ec <_free_r+0x78>
 80033d4:	6824      	ldr	r4, [r4, #0]
 80033d6:	4421      	add	r1, r4
 80033d8:	1854      	adds	r4, r2, r1
 80033da:	42a3      	cmp	r3, r4
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	d1dd      	bne.n	800339c <_free_r+0x28>
 80033e0:	681c      	ldr	r4, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	6053      	str	r3, [r2, #4]
 80033e6:	4421      	add	r1, r4
 80033e8:	6011      	str	r1, [r2, #0]
 80033ea:	e7d7      	b.n	800339c <_free_r+0x28>
 80033ec:	d902      	bls.n	80033f4 <_free_r+0x80>
 80033ee:	230c      	movs	r3, #12
 80033f0:	6003      	str	r3, [r0, #0]
 80033f2:	e7d3      	b.n	800339c <_free_r+0x28>
 80033f4:	6825      	ldr	r5, [r4, #0]
 80033f6:	1961      	adds	r1, r4, r5
 80033f8:	428b      	cmp	r3, r1
 80033fa:	bf04      	itt	eq
 80033fc:	6819      	ldreq	r1, [r3, #0]
 80033fe:	685b      	ldreq	r3, [r3, #4]
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	bf04      	itt	eq
 8003404:	1949      	addeq	r1, r1, r5
 8003406:	6021      	streq	r1, [r4, #0]
 8003408:	6054      	str	r4, [r2, #4]
 800340a:	e7c7      	b.n	800339c <_free_r+0x28>
 800340c:	b003      	add	sp, #12
 800340e:	bd30      	pop	{r4, r5, pc}
 8003410:	200000a8 	.word	0x200000a8

08003414 <_malloc_r>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	1ccd      	adds	r5, r1, #3
 8003418:	f025 0503 	bic.w	r5, r5, #3
 800341c:	3508      	adds	r5, #8
 800341e:	2d0c      	cmp	r5, #12
 8003420:	bf38      	it	cc
 8003422:	250c      	movcc	r5, #12
 8003424:	2d00      	cmp	r5, #0
 8003426:	4606      	mov	r6, r0
 8003428:	db01      	blt.n	800342e <_malloc_r+0x1a>
 800342a:	42a9      	cmp	r1, r5
 800342c:	d903      	bls.n	8003436 <_malloc_r+0x22>
 800342e:	230c      	movs	r3, #12
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	2000      	movs	r0, #0
 8003434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003436:	f000 f87d 	bl	8003534 <__malloc_lock>
 800343a:	4921      	ldr	r1, [pc, #132]	; (80034c0 <_malloc_r+0xac>)
 800343c:	680a      	ldr	r2, [r1, #0]
 800343e:	4614      	mov	r4, r2
 8003440:	b99c      	cbnz	r4, 800346a <_malloc_r+0x56>
 8003442:	4f20      	ldr	r7, [pc, #128]	; (80034c4 <_malloc_r+0xb0>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b923      	cbnz	r3, 8003452 <_malloc_r+0x3e>
 8003448:	4621      	mov	r1, r4
 800344a:	4630      	mov	r0, r6
 800344c:	f000 f862 	bl	8003514 <_sbrk_r>
 8003450:	6038      	str	r0, [r7, #0]
 8003452:	4629      	mov	r1, r5
 8003454:	4630      	mov	r0, r6
 8003456:	f000 f85d 	bl	8003514 <_sbrk_r>
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	d123      	bne.n	80034a6 <_malloc_r+0x92>
 800345e:	230c      	movs	r3, #12
 8003460:	6033      	str	r3, [r6, #0]
 8003462:	4630      	mov	r0, r6
 8003464:	f000 f86c 	bl	8003540 <__malloc_unlock>
 8003468:	e7e3      	b.n	8003432 <_malloc_r+0x1e>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	1b5b      	subs	r3, r3, r5
 800346e:	d417      	bmi.n	80034a0 <_malloc_r+0x8c>
 8003470:	2b0b      	cmp	r3, #11
 8003472:	d903      	bls.n	800347c <_malloc_r+0x68>
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	441c      	add	r4, r3
 8003478:	6025      	str	r5, [r4, #0]
 800347a:	e004      	b.n	8003486 <_malloc_r+0x72>
 800347c:	6863      	ldr	r3, [r4, #4]
 800347e:	42a2      	cmp	r2, r4
 8003480:	bf0c      	ite	eq
 8003482:	600b      	streq	r3, [r1, #0]
 8003484:	6053      	strne	r3, [r2, #4]
 8003486:	4630      	mov	r0, r6
 8003488:	f000 f85a 	bl	8003540 <__malloc_unlock>
 800348c:	f104 000b 	add.w	r0, r4, #11
 8003490:	1d23      	adds	r3, r4, #4
 8003492:	f020 0007 	bic.w	r0, r0, #7
 8003496:	1ac2      	subs	r2, r0, r3
 8003498:	d0cc      	beq.n	8003434 <_malloc_r+0x20>
 800349a:	1a1b      	subs	r3, r3, r0
 800349c:	50a3      	str	r3, [r4, r2]
 800349e:	e7c9      	b.n	8003434 <_malloc_r+0x20>
 80034a0:	4622      	mov	r2, r4
 80034a2:	6864      	ldr	r4, [r4, #4]
 80034a4:	e7cc      	b.n	8003440 <_malloc_r+0x2c>
 80034a6:	1cc4      	adds	r4, r0, #3
 80034a8:	f024 0403 	bic.w	r4, r4, #3
 80034ac:	42a0      	cmp	r0, r4
 80034ae:	d0e3      	beq.n	8003478 <_malloc_r+0x64>
 80034b0:	1a21      	subs	r1, r4, r0
 80034b2:	4630      	mov	r0, r6
 80034b4:	f000 f82e 	bl	8003514 <_sbrk_r>
 80034b8:	3001      	adds	r0, #1
 80034ba:	d1dd      	bne.n	8003478 <_malloc_r+0x64>
 80034bc:	e7cf      	b.n	800345e <_malloc_r+0x4a>
 80034be:	bf00      	nop
 80034c0:	200000a8 	.word	0x200000a8
 80034c4:	200000ac 	.word	0x200000ac

080034c8 <_realloc_r>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	4607      	mov	r7, r0
 80034cc:	4614      	mov	r4, r2
 80034ce:	460e      	mov	r6, r1
 80034d0:	b921      	cbnz	r1, 80034dc <_realloc_r+0x14>
 80034d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034d6:	4611      	mov	r1, r2
 80034d8:	f7ff bf9c 	b.w	8003414 <_malloc_r>
 80034dc:	b922      	cbnz	r2, 80034e8 <_realloc_r+0x20>
 80034de:	f7ff ff49 	bl	8003374 <_free_r>
 80034e2:	4625      	mov	r5, r4
 80034e4:	4628      	mov	r0, r5
 80034e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034e8:	f000 f830 	bl	800354c <_malloc_usable_size_r>
 80034ec:	42a0      	cmp	r0, r4
 80034ee:	d20f      	bcs.n	8003510 <_realloc_r+0x48>
 80034f0:	4621      	mov	r1, r4
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7ff ff8e 	bl	8003414 <_malloc_r>
 80034f8:	4605      	mov	r5, r0
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d0f2      	beq.n	80034e4 <_realloc_r+0x1c>
 80034fe:	4631      	mov	r1, r6
 8003500:	4622      	mov	r2, r4
 8003502:	f7ff ff0f 	bl	8003324 <memcpy>
 8003506:	4631      	mov	r1, r6
 8003508:	4638      	mov	r0, r7
 800350a:	f7ff ff33 	bl	8003374 <_free_r>
 800350e:	e7e9      	b.n	80034e4 <_realloc_r+0x1c>
 8003510:	4635      	mov	r5, r6
 8003512:	e7e7      	b.n	80034e4 <_realloc_r+0x1c>

08003514 <_sbrk_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4d06      	ldr	r5, [pc, #24]	; (8003530 <_sbrk_r+0x1c>)
 8003518:	2300      	movs	r3, #0
 800351a:	4604      	mov	r4, r0
 800351c:	4608      	mov	r0, r1
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	f7fd fd56 	bl	8000fd0 <_sbrk>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <_sbrk_r+0x1a>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	b103      	cbz	r3, 800352e <_sbrk_r+0x1a>
 800352c:	6023      	str	r3, [r4, #0]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	2000020c 	.word	0x2000020c

08003534 <__malloc_lock>:
 8003534:	4801      	ldr	r0, [pc, #4]	; (800353c <__malloc_lock+0x8>)
 8003536:	f000 b811 	b.w	800355c <__retarget_lock_acquire_recursive>
 800353a:	bf00      	nop
 800353c:	20000214 	.word	0x20000214

08003540 <__malloc_unlock>:
 8003540:	4801      	ldr	r0, [pc, #4]	; (8003548 <__malloc_unlock+0x8>)
 8003542:	f000 b80c 	b.w	800355e <__retarget_lock_release_recursive>
 8003546:	bf00      	nop
 8003548:	20000214 	.word	0x20000214

0800354c <_malloc_usable_size_r>:
 800354c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003550:	1f18      	subs	r0, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfbc      	itt	lt
 8003556:	580b      	ldrlt	r3, [r1, r0]
 8003558:	18c0      	addlt	r0, r0, r3
 800355a:	4770      	bx	lr

0800355c <__retarget_lock_acquire_recursive>:
 800355c:	4770      	bx	lr

0800355e <__retarget_lock_release_recursive>:
 800355e:	4770      	bx	lr

08003560 <_init>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	bf00      	nop
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr

0800356c <_fini>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr
